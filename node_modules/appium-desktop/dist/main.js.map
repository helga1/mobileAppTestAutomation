{"version":3,"sources":["configs/app.config.js","configs/i18next.config.renderer.js","renderer/actions/ServerMonitor.js","renderer/actions/StartServer.js","renderer/components/Inspector/shared.js","renderer/actions/shared.js","renderer/util.js","renderer/lib/client-frameworks/framework.js","renderer/lib/client-frameworks/js-wd.js","renderer/lib/client-frameworks/js-wdio.js","renderer/lib/client-frameworks/java.js","renderer/lib/client-frameworks/python.js","renderer/lib/client-frameworks/ruby.js","renderer/lib/client-frameworks/robot.js","renderer/lib/client-frameworks/index.js","renderer/actions/Inspector.js","renderer/components/Session/ServerTabTestobject.js","renderer/components/Session/ServerTabHeadspin.js","renderer/components/Session/ServerTabBrowserstack.js","renderer/components/Session/ServerTabBitbar.js","renderer/components/Session/ServerTabKobiton.js","renderer/components/Session/ServerTabPerfecto.js","renderer/components/Session/ServerTabPcloudy.js","renderer/components/Session/ServerTabSauce.js","renderer/components/Session/ServerTabTestingbot.js","renderer/components/Session/CloudProviders.js","renderer/actions/Session.js","shared/settings.js","configs/i18next.config.js","main/appium-method-handler.js","main/auto-updater/config.js","main/auto-updater/update-checker.js","../env/.env-dev.js","env.js","main/auto-updater/index.js","main/helpers.js","main/appium.js","main/menus.js","main.js"],"names":["config","platform","process","languages","namespace","i18n","i18nextOptions","backend","loadPath","path","join","__dirname","addPath","jsonIndent","interpolation","escapeValue","lng","settings","getSync","fallbackLng","whitelist","react","wait","isInitialized","use","initReactI18next","i18nextBackend","init","SERVER_STOP_REQ","SERVER_STOP_OK","SERVER_STOP_FAIL","LOGS_RECEIVED","LOGS_CLEARED","MONITOR_CLOSED","START_SESSION_REQUEST","SET_SERVER_ARGS","stopServerReq","type","stopServerOK","stopServerFailed","reason","startSessionRequest","sessionUUID","serverLogsReceived","logs","setServerArgs","args","monitorClosed","stopListening","removeAllListeners","removeStopListeners","stopServer","dispatch","once","event","message","alert","t","level","msg","setTimeout","send","closeMonitor","clearLogs","getState","logfilePath","startServer","startSession","getRawLogs","openExternal","SERVER_START_REQ","SERVER_START_OK","SERVER_START_ERR","UPDATE_ARGS","SWITCH_TAB","PRESET_SAVE_REQ","PRESET_SAVE_OK","GET_PRESETS","PRESET_DELETE_REQ","PRESET_DELETE_OK","SET_LOGFILE_PATH","PRESETS","evt","preventDefault","serverArgs","removeStartServerListeners","on","updateArgs","switchTab","tabId","savePreset","name","presets","get","_modified","Date","now","set","e","console","error","getPresets","deletePreset","parseCoordinates","element","bounds","x","y","width","height","attributes","boundsArray","split","filter","str","x1","y1","x2","y2","parseInt","isUnique","attrName","attrValue","sourceXML","doc","DOMParser","parseFromString","xpath","select","length","STRATEGY_MAPPINGS","getLocators","res","strategyAlias","strategy","value","SCREENSHOT_INTERACTION_MODE","SELECT","SWIPE","TAP","actionArgTypes","STRING","NUMBER","actionDefinitions","methodName","refresh","INTERACTION_MODE","SOURCE","ACTIONS","clientMethodPromises","bindClient","resp","_","isObject","isEmpty","truncatedResult","truncate","JSON","stringify","util","hasValue","ignoreResult","success","description","result","duration","elementId","id","promise","uuid","resolve","parse","reject","unbindClient","callClientMethod","params","ipcRenderer","Error","UUID","v4","Promise","getOptimalXPath","domNode","uniqueAttributes","tagName","nodeType","getAttribute","othersWithAttr","XPath","ign","indexOf","parentNode","childNodes","Array","prototype","slice","call","childNode","withTranslation","componentCls","hocs","flow","Framework","constructor","host","port","https","caps","scheme","actions","localVarCount","localVarCache","lastAssignedVar","serverUrl","language","addAction","action","push","wrapWithBoilerplate","indent","spaces","lines","spaceStr","i","l","trim","map","getCodeString","includeBoilerplate","genCodeFn","code","getNewLocalVar","getVarForFind","locator","key","wasNew","getVarName","varName","varIndex","codeFor_findAndAssign","codeFor_findElement","localVar","codeFor_tap","codeFor_swipe","JsWdFramework","isArray","suffixMap","codeFor_click","codeFor_clear","codeFor_sendKeys","text","codeFor_back","varNameIgnore","varIndexIgnore","codeFor_getCurrentActivity","codeFor_getCurrentPackage","codeFor_installAppOnDevice","app","codeFor_isAppInstalledOnDevice","codeFor_launchApp","codeFor_backgroundApp","timeout","codeFor_closeApp","codeFor_resetApp","codeFor_removeAppFromDevice","codeFor_getAppStrings","stringFile","codeFor_getClipboard","codeFor_setClipboard","clipboardText","codeFor_pressKeycode","keyCode","metaState","flags","codeFor_longPressKeycode","codeFor_hideDeviceKeyboard","codeFor_isKeyboardShown","codeFor_pushFileToDevice","pathToInstallTo","fileContentString","codeFor_pullFile","pathToPullFrom","codeFor_pullFolder","folderToPullFrom","codeFor_toggleAirplaneMode","codeFor_toggleData","codeFor_toggleWiFi","codeFor_toggleLocationServices","codeFor_sendSMS","phoneNumber","codeFor_gsmCall","codeFor_gsmSignal","signalStrength","codeFor_gsmVoice","state","codeFor_shake","codeFor_lock","seconds","codeFor_unlock","codeFor_isLocked","codeFor_rotateDevice","radius","rotation","touchCount","codeFor_getPerformanceData","packageName","dataType","dataReadTimeout","codeFor_getSupportedPerformanceDataTypes","codeFor_performTouchId","match","codeFor_toggleTouchIdEnrollment","enroll","codeFor_openNotifications","codeFor_getDeviceTime","codeFor_fingerprint","fingerprintId","codeFor_sessionCapabilities","codeFor_setPageLoadTimeout","ms","codeFor_setAsyncScriptTimeout","codeFor_setImplicitWaitTimeout","codeFor_getOrientation","codeFor_setOrientation","orientation","codeFor_getGeoLocation","codeFor_setGeoLocation","latitude","longitude","altitude","codeFor_logTypes","codeFor_log","logType","codeFor_updateSettings","settingsJson","codeFor_settings","readableName","JsWdIoFramework","chainifyCode","replace","proto","codeFor_setCommandTimeout","JavaFramework","pkg","cls","platformName","toLowerCase","Object","keys","k","codeFor_startActivity","settingName","settingValue","toPairs","PythonFramework","getPythonVal","jsonVal","RubyFramework","RobotFramework","getCapsVariables","getApplicationInitialization","lastID","frameworks","jsWd","jsWdIo","java","python","ruby","robot","SET_SESSION_DETAILS","SET_SOURCE_AND_SCREENSHOT","SESSION_DONE","SELECT_ELEMENT","UNSELECT_ELEMENT","SET_SELECTED_ELEMENT_ID","SET_INTERACTIONS_NOT_AVAILABLE","METHOD_CALL_REQUESTED","METHOD_CALL_DONE","SET_FIELD_VALUE","SET_EXPANDED_PATHS","SELECT_HOVERED_ELEMENT","UNSELECT_HOVERED_ELEMENT","SHOW_SEND_KEYS_MODAL","HIDE_SEND_KEYS_MODAL","QUIT_SESSION_REQUESTED","QUIT_SESSION_DONE","START_RECORDING","PAUSE_RECORDING","CLEAR_RECORDING","CLOSE_RECORDER","SET_ACTION_FRAMEWORK","SAVED_FRAMEWORK","RECORD_ACTION","SET_SHOW_BOILERPLATE","SHOW_LOCATOR_TEST_MODAL","HIDE_LOCATOR_TEST_MODAL","SET_LOCATOR_TEST_STRATEGY","SET_LOCATOR_TEST_VALUE","SEARCHING_FOR_ELEMENTS","SEARCHING_FOR_ELEMENTS_COMPLETED","SET_LOCATOR_TEST_ELEMENT","CLEAR_SEARCH_RESULTS","ADD_ASSIGNED_VAR_CACHE","CLEAR_ASSIGNED_VAR_CACHE","SET_SCREENSHOT_INTERACTION_MODE","SET_SEARCHED_FOR_ELEMENT_BOUNDS","CLEAR_SEARCHED_FOR_ELEMENT_BOUNDS","SET_SWIPE_START","SET_SWIPE_END","CLEAR_SWIPE_ACTION","PROMPT_KEEP_ALIVE","HIDE_PROMPT_KEEP_ALIVE","SELECT_INTERACTION_MODE","SELECT_ACTION_GROUP","SELECT_SUB_ACTION_GROUP","ENTERING_ACTION_ARGS","REMOVE_ACTION","SET_ACTION_ARG","xmlToJSON","source","xmlDoc","recursive","xmlNode","parentPath","index","attrObject","attribute","undefined","children","childIndex","bindAppium","promptKeepAlive","killedByUser","findElement","debounce","strategyMap","selector","variableName","variableType","inspector","selectedElementPath","selectElement","selectedElementAttributes","selectedElementXPath","selectedElement","expandedPaths","pathArr","splice","paths","unselectElement","selectHoveredElement","unselectHoveredElement","applyClientMethod","isRecording","screenshot","windowSize","sourceError","screenshotError","windowSizeError","variableIndex","findAndAssign","concat","addAssignedVarCache","showSendKeysModal","hideSendKeysModal","setFieldValue","setExpandedPaths","quitSession","startRecording","pauseRecording","clearRecording","getSavedActionFramework","framework","setActionFramework","recordAction","closeRecorder","toggleShowBoilerplate","show","showBoilerplate","setSessionDetails","sessionDetails","showLocatorTestModal","hideLocatorTestModal","setLocatorTestValue","locatorTestValue","setLocatorTestStrategy","locatorTestStrategy","searchForElement","elements","fetchArray","el","assignedVarCache","setLocatorTestElement","location","size","B","all","skipScreenshotAndSource","skipRecord","clearSearchResults","selectScreenshotInteractionMode","screenshotInteractionMode","setSwipeStart","swipeStartX","swipeStartY","setSwipeEnd","swipeEndX","swipeEndY","clearSwipeAction","keepSessionAlive","selectActionGroup","group","selectSubActionGroup","selectInteractionMode","interaction","startEnteringActionArgs","actionName","cancelPendingAction","setActionArg","FormItem","Form","Item","ServerTabTestobject","Component","render","server","setServerParam","props","placeholder","env","TESTOBJECT_API_KEY","environmentVariable","testobject","apiKey","target","SessionStyles","addonDataCenter","inputDataCenter","dataCenter","ServerTabHeadspin","customServerInputLeft","headspin","webDriverUrl","localDesc","ServerTabBrowserstack","browserstackUsernamePlaceholder","BROWSERSTACK_USERNAME","browserstackAccessKeyPlaceholder","BROWSERSTACK_ACCESS_KEY","browserstack","username","accessKey","ServerTabBitbar","bitbarApiKeyPlaceholder","BITBAR_API_KEY","bitbar","ServerTabKobiton","kobitonUsernamePlaceholder","KOBITON_USERNAME","kobitonAccessKeyPlaceholder","KOBITON_ACCESS_KEY","kobiton","ServerTabPerfecto","perfectoTokenPlaceholder","PERFECTO_TOKEN","perfecto","hostname","token","ServerTabPcloudy","pcloudy","ServerTabSauce","sauceUsernamePlaceholder","SAUCE_USERNAME","sauceAccessKeyPlaceholder","SAUCE_ACCESS_KEY","sauce","useSCProxy","checked","scHost","scPort","ServerTabTestingbot","testingbotKeyPlaceholder","TB_KEY","testingbotSecretPlaceholder","TB_SECRET","testingbot","secret","CloudProviders","tabhead","tabText","SauceLogo","tab","logo","TestObjectLogo","HeadSpinLogo","BrowserStackLogo","BitBarLogo","KobitonLogo","PerfectoLogo","PcloudyLogo","TestingBotLogo","NEW_SESSION_REQUESTED","NEW_SESSION_BEGAN","NEW_SESSION_DONE","CHANGE_CAPABILITY","SAVE_SESSION_REQUESTED","SAVE_SESSION_DONE","GET_SAVED_SESSIONS_REQUESTED","GET_SAVED_SESSIONS_DONE","SET_CAPABILITY_PARAM","ADD_CAPABILITY","REMOVE_CAPABILITY","SWITCHED_TABS","SET_CAPS","SAVE_AS_MODAL_REQUESTED","HIDE_SAVE_AS_MODAL_REQUESTED","SET_SAVE_AS_TEXT","DELETE_SAVED_SESSION_REQUESTED","DELETE_SAVED_SESSION_DONE","CHANGE_SERVER_TYPE","SET_SERVER_PARAM","SET_SERVER","SESSION_LOADING","SESSION_LOADING_DONE","SAVED_SESSIONS","SESSION_SERVER_PARAMS","SESSION_SERVER_TYPE","SERVER_ARGS","VISIBLE_PROVIDERS","SET_ATTACH_SESS_ID","GET_SESSIONS_REQUESTED","GET_SESSIONS_DONE","ENABLE_DESIRED_CAPS_EDITOR","ABORT_DESIRED_CAPS_EDITOR","SAVE_RAW_DESIRED_CAPS","SET_RAW_DESIRED_CAPS","SHOW_DESIRED_CAPS_JSON_ERROR","IS_ADDING_CLOUD_PROVIDER","SET_PROVIDERS","serverTypes","local","remote","ServerTypes","JSON_TYPES","getCapsObject","assign","cap","obj","showError","secs","errMessage","status","data","setCaps","changeCapability","addCapability","setCapabilityParam","removeCapability","newSession","attachSessId","desiredCapabilities","session","serverType","ssl","TESTOBJECT_HOST","testobject_api_key","headspinUrl","url","pathname","protocol","securityToken","BROWSERSTACK_HOST","BITBAR_HOST","testdroid_source","testdroid_apiKey","KOBITON_HOST","PCLOUDY_USERNAME","pCloudy_Username","PCLOUDY_ACCESS_KEY","pCloudy_ApiKey","TB_HOST","rejectUnauthorized","proxy","advanced","allowUnauthorized","useProxy","removeNewSessionListeners","saveSession","savedSessions","newSavedSession","date","getSavedSessions","switchTabs","requestSaveAsModal","hideSaveAsModal","setSaveAsText","saveAsText","deleteSavedSession","newSessions","setAttachSessId","changeServerType","getRunningSessions","debounceGetRunningSessions","setLocalServerParams","setSavedServerParams","currentProviders","visibleProviders","includes","avoidServerTypes","serverInfo","sessions","removeRunningSessionsListeners","startDesiredCapsEditor","abortDesiredCapsEditor","saveRawDesiredCaps","rawDesiredCaps","capsArray","newCaps","newCapsArray","setRawDesiredCaps","isValidCapsJson","invalidCapsJsonReason","isValidatingCapsJson","addCloudProvider","isAddingProvider","stopAddCloudProvider","addVisibleProvider","provider","providers","removeVisibleProvider","setVisibleProviders","defaults","isDevelopment","NODE_ENV","KEEP_ALIVE_PING_INTERVAL","NO_NEW_COMMAND_LIMIT","WAIT_FOR_USER_KEEP_ALIVE","AppiumMethodHandler","driver","sender","elementCache","elVariableCounter","elArrayVariableCounter","_lastActiveMoment","runKeepAliveLoop","keepAlive","setInterval","sessionCapabilities","waitForUserTimeout","close","killKeepAliveLoop","clearInterval","clearTimeout","fetchElement","elementOrNull","fetchElements","els","_execute","cachedEl","sourceAndScreenshot","apply","wd","TouchAction","tap","perform","startX","startY","endX","endY","press","moveTo","release","Bluebird","delay","_getSourceAndScreenshot","executeElementCommand","executeMethod","checkShouldResolve","then","catch","takeScreenshot","getWindowSize","restart","elCache","values","_isAttachedSession","quit","createSession","winId","appiumHandlers","info","handler","killSession","getSessionHandler","baseFeedUrl","getFeedUrl","version","checkUpdate","currentVersion","request","_ENV_","require","isDev","runningLocally","RUNNING_LOCALLY","checkNewUpdates","noop","RUNNING_IN_SPECTRON","setFeedURL","getVersion","fromMenu","update","notes","pub_date","pubDate","format","detail","NO_AUTO_UPDATE","showMessageBox","buttons","response","checkForUpdates","emit","releaseNotes","releaseName","quitAndInstall","openBrowserWindow","route","opts","win","BrowserWindow","minWidth","minHeight","backgroundColor","frame","webPreferences","devTools","nodeIntegration","htmlPath","loadURL","openDevTools","webContents","buildFromTemplate","label","click","inspectElement","popup","setSavedEnv","savedEnv","LOG_SEND_INTERVAL_MS","defaultEnvironmentVariables","clone","logFile","logWatcher","batchedLogs","deleteLogfile","fs","rimraf","connectStartServer","dir","tempDir","openDir","defaultCapabilities","logHandler","throwInsteadOfExit","writeFile","log","flag","connectStopServer","delete","connectGetDefaultArgs","returnValue","argv","connectCreateNewSessionWindow","createNewSessionWindow","connectClearLogFile","sessionWin","title","titleBarStyle","sessionID","connectCreateNewSession","windowId","promiseChainRemote","configureHttp","attach","newCommandTimeout","connectHardwareKeyboard","wdNoDefaults","p","context","connectRestartRecorder","connectKeepAlive","connectClientMethodListener","renderer","methodHandler","deleteSync","getCurrentSessions","appiumPath","connectGetSessionsListener","connectMoveToApplicationsFolder","moveToApplicationsFolder","createNewConfigWindow","parent","connectOpenConfig","connectGetEnv","savedEnvironmentVariables","connectSaveEnv","environmentVariables","pickBy","identity","connectServerErrorBackdoor","initializeIpc","rebuildMenus","menuTemplates","mac","other","mainWindow","languageMenu","languageCode","changeLanguage","macMenuAppium","submenu","accelerator","macMenuEdit","macMenuView","reload","toggleDevTools","setFullScreen","isFullScreen","macMenuWindow","macMenuHelp","otherMenuFile","fileSubmenu","otherMenuView","otherMenuHelp","mainWin","template","menu","Menu","setApplicationMenu","setMenu","decoratedEnv","shellEnv","sync","installExtensions","installer","extensions","forceDownload","UPGRADE_EXTENSIONS","default","focus","getAllWebContents","forEach","wc"],"mappings":"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","file":"main.js","sourceRoot":"../app","sourcesContent":["const config = {\n  platform: process.platform,\n  languages: ['en', 'de', 'ru', 'ja', 'zh-CN', 'ko', 'hi', 'kn', 'ml-IN', 'pa-IN', 'te', 'pt-BR'],\n  namespace: 'translation',\n};\n\nexport default config;\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport config from './app.config';\nimport settings from '../shared/settings';\nimport path from 'path';\nimport i18nextBackend from 'i18next-node-fs-backend';\n\nconst i18nextOptions = {\n  backend: {\n    loadPath: path.join(__dirname, 'locales/{{lng}}/{{ns}}.json'),\n    addPath: path.join(__dirname, 'locales/{{lng}}/{{ns}}.json'),\n    jsonIndent: 2,\n  },\n  // debug: true,\n  // saveMissing: true,\n  interpolation: {\n    escapeValue: false\n  },\n  lng: settings && settings.getSync('PREFERRED_LANGUAGE', 'en') || 'en',\n  fallbackLng: config.fallbackLng,\n  whitelist: config.languages,\n  react: {\n    wait: false\n  }\n};\n\nif (!i18n.isInitialized) {\n  i18n\n    .use(initReactI18next)\n    .use(i18nextBackend)\n    .init(i18nextOptions);\n}\n\nexport default i18n;\n","import { ipcRenderer, shell } from 'electron';\nimport { push } from 'connected-react-router';\nimport i18n from '../../configs/i18next.config.renderer';\n\nexport const SERVER_STOP_REQ = 'SERVER_STOP_REQ';\nexport const SERVER_STOP_OK = 'SERVER_STOP_OK';\nexport const SERVER_STOP_FAIL = 'SERVER_STOP_FAIL';\nexport const LOGS_RECEIVED = 'LOGS_RECEIVED';\nexport const LOGS_CLEARED = 'LOGS_CLEARED';\nexport const MONITOR_CLOSED = 'MONITOR_CLOSED';\nexport const START_SESSION_REQUEST = 'START_SESSION';\nexport const SET_SERVER_ARGS = 'SET_SERVER_ARGS';\n\nexport function stopServerReq () {\n  return {type: SERVER_STOP_REQ};\n}\n\nexport function stopServerOK () {\n  return {type: SERVER_STOP_OK};\n}\n\nexport function stopServerFailed (reason) {\n  return {type: SERVER_STOP_FAIL, reason};\n}\n\nexport function startSessionRequest (sessionUUID) {\n  return {type: START_SESSION_REQUEST, sessionUUID};\n}\n\nexport function serverLogsReceived (logs) {\n  return {type: LOGS_RECEIVED, logs};\n}\n\nexport function setServerArgs (args) {\n  return {type: SET_SERVER_ARGS, args};\n}\n\nexport function monitorClosed () {\n  return {type: MONITOR_CLOSED};\n}\n\nfunction stopListening () {\n  ipcRenderer.removeAllListeners('appium-log-line');\n  ipcRenderer.removeAllListeners('appium-stop-error');\n}\n\nfunction removeStopListeners () {\n  ipcRenderer.removeAllListeners('appium-stop-error');\n  ipcRenderer.removeAllListeners('appium-stop-ok');\n}\n\nexport function stopServer () {\n  return (dispatch) => {\n    dispatch(stopServerReq());\n\n    ipcRenderer.once('appium-stop-error', (event, message) => {\n      alert(i18n.t('stopServerFailed', {message}));\n      dispatch(stopServerFailed(message));\n      removeStopListeners();\n    });\n\n    stopListening();\n\n    ipcRenderer.once('appium-stop-ok', () => {\n      dispatch(serverLogsReceived([{\n        level: 'info',\n        msg: 'Appium server stopped successfully'\n      }]));\n      setTimeout(() => {\n        dispatch(stopServerOK());\n      }, 0);\n      removeStopListeners();\n    });\n\n    ipcRenderer.send('stop-server');\n  };\n}\n\nexport function closeMonitor () {\n  return (dispatch) => {\n    dispatch(monitorClosed());\n    dispatch(push('/'));\n  };\n}\n\nexport function clearLogs () {\n  return (dispatch, getState) => {\n    const logfilePath = getState().startServer.logfilePath;\n    if (logfilePath) {\n      ipcRenderer.send('appium-clear-logfile', {logfilePath});\n    }\n    dispatch({type: LOGS_CLEARED});\n  };\n}\n\nexport function startSession () {\n  return (dispatch) => {\n    dispatch({type: START_SESSION_REQUEST});\n    ipcRenderer.send('create-new-session-window');\n  };\n}\n\nexport function getRawLogs () {\n  return (dispatch, getState) => {\n    const logfilePath = getState().startServer.logfilePath;\n    if (logfilePath) {\n      shell.openExternal(`file://${logfilePath}`);\n    } else {\n      alert(i18n.t('logsNotAvailableError'));\n    }\n  };\n}","/* eslint-disable no-console */\nimport { ipcRenderer } from 'electron';\nimport { push } from 'connected-react-router';\nimport { serverLogsReceived, clearLogs, setServerArgs } from './ServerMonitor';\nimport settings from '../../shared/settings';\nimport i18n from '../../configs/i18next.config.renderer';\n\nexport const SERVER_START_REQ = 'SERVER_START_REQ';\nexport const SERVER_START_OK = 'SERVER_START_OK';\nexport const SERVER_START_ERR = 'SERVER_START_ERR';\nexport const UPDATE_ARGS = 'UPDATE_ARGS';\nexport const SWITCH_TAB = 'SWITCH_TAB';\nexport const PRESET_SAVE_REQ = 'PRESET_SAVE_REQ';\nexport const PRESET_SAVE_OK = 'PRESET_SAVE_OK';\nexport const GET_PRESETS = 'GET_PRESETS';\nexport const PRESET_DELETE_REQ = 'PRESET_DELETE_REQ';\nexport const PRESET_DELETE_OK = 'PRESET_DELETE_OK';\nexport const SET_LOGFILE_PATH = 'SET_LOGFILE_PATH';\n\nexport const PRESETS = 'presets';\n\nexport function startServer (evt) {\n  evt.preventDefault();\n  return (dispatch, getState) => {\n    // signal to the UI that we are beginning our request\n    dispatch({type: SERVER_START_REQ});\n    const {serverArgs} = getState().startServer;\n\n    // if we get an error from electron, fail with the message\n    ipcRenderer.once('appium-start-error', (event, message) => {\n      // don't listen for log lines any more if we failed to start, other-\n      // wise we'll start to stack listeners for subsequent attempts\n      ipcRenderer.removeAllListeners('appium-log-line');\n      alert(i18n.t('errorStartingServer', {message}));\n      dispatch({type: SERVER_START_ERR});\n      removeStartServerListeners();\n    });\n\n    ipcRenderer.once('appium-start-ok', () => {\n      // don't listen for subsequent server start failures later in the\n      // lifetime of this app instance\n      ipcRenderer.removeAllListeners('appium-start-error');\n      dispatch({type: SERVER_START_OK});\n      dispatch(setServerArgs(serverArgs));\n      dispatch(push('/monitor'));\n      removeStartServerListeners();\n    });\n\n    ipcRenderer.on('appium-log-line', (event, logs) => {\n      dispatch(serverLogsReceived(logs));\n    });\n\n    dispatch(clearLogs());\n    ipcRenderer.once('path-to-logs', (event, logfilePath) => dispatch({type: SET_LOGFILE_PATH, logfilePath}));\n    ipcRenderer.send('start-server', serverArgs);\n  };\n}\n\nfunction removeStartServerListeners () {\n  ipcRenderer.removeAllListeners('appium-start-error');\n  ipcRenderer.removeAllListeners('appium-start-ok');\n}\n\nexport function updateArgs (args) {\n  return (dispatch) => {\n    dispatch({type: UPDATE_ARGS, args});\n  };\n}\n\nexport function switchTab (tabId) {\n  return (dispatch) => {\n    dispatch({type: SWITCH_TAB, tabId});\n  };\n}\n\nexport function savePreset (name, args) {\n  return async (dispatch) => {\n    dispatch({type: PRESET_SAVE_REQ});\n    let presets = await settings.get(PRESETS);\n    try {\n      presets[name] = args;\n      presets[name]._modified = Date.now();\n      await settings.set(PRESETS, presets);\n    } catch (e) {\n      console.error(e);\n      alert(i18n.t('errorSavingPreset', {message: e.message}));\n    }\n    dispatch({type: PRESET_SAVE_OK, presets});\n  };\n}\n\nexport function getPresets () {\n  return async (dispatch) => {\n    try {\n      let presets = await settings.get(PRESETS);\n      dispatch({type: GET_PRESETS, presets});\n    } catch (e) {\n      console.error(e);\n      alert(i18n.t('errorGettingPreset', {message: e.message}));\n    }\n  };\n}\n\nexport function deletePreset (name) {\n  return async (dispatch) => {\n    dispatch({type: PRESET_DELETE_REQ});\n    let presets = await settings.get(PRESETS);\n    try {\n      delete presets[name];\n      await settings.set(PRESETS);\n    } catch (e) {\n      console.error(e);\n      alert(i18n.t('errorDeletingPreset', {message: e.message}));\n    }\n    dispatch({type: PRESET_DELETE_OK, presets});\n  };\n}","import { DOMParser } from 'xmldom';\nimport xpath from 'xpath';\n\nexport function parseCoordinates (element) {\n  let {bounds, x, y, width, height} = element.attributes || {};\n\n  if (bounds) {\n    let boundsArray = bounds.split(/\\[|\\]|,/).filter((str) => str !== '');\n    return {x1: boundsArray[0], y1: boundsArray[1], x2: boundsArray[2], y2: boundsArray[3]};\n  } else if (x) {\n    x = parseInt(x, 10);\n    y = parseInt(y, 10);\n    width = parseInt(width, 10);\n    height = parseInt(height, 10);\n    return {x1: x, y1: y, x2: x + width, y2: y + height};\n  } else {\n    return {};\n  }\n}\n\nexport function isUnique (attrName, attrValue, sourceXML) {\n  // If no sourceXML provided, assume it's unique\n  if (!sourceXML) {\n    return true;\n  }\n  const doc = new DOMParser().parseFromString(sourceXML);\n  return xpath.select(`//*[@${attrName}=\"${attrValue}\"]`, doc).length < 2;\n}\n\n// Map of the optimal strategies.\nconst STRATEGY_MAPPINGS = [\n  ['name', 'accessibility id'],\n  ['content-desc', 'accessibility id'],\n  ['id', 'id'],\n  ['rntestid', 'id'],\n  ['resource-id', 'id'],\n];\n\nexport function getLocators (attributes, sourceXML) {\n  const res = {};\n  for (let [strategyAlias, strategy] of STRATEGY_MAPPINGS) {\n    const value = attributes[strategyAlias];\n    if (value && isUnique(strategyAlias, value, sourceXML)) {\n      res[strategy] = attributes[strategyAlias];\n    }\n  }\n  return res;\n}\n\nexport const SCREENSHOT_INTERACTION_MODE = {\n  SELECT: 'select',\n  SWIPE: 'swipe',\n  TAP: 'tap',\n};\n\nexport const actionArgTypes = {\n  STRING: 'string',\n  NUMBER: 'number',\n};\n\nconst { STRING, NUMBER } = actionArgTypes;\n\n// Note: When adding or removing actionDefinitions, update `en/translation.json`\nexport const actionDefinitions = {\n  'Device': {\n    'Execute Mobile': {\n      'Execute': {methodName: 'execute', args: [['command', STRING], ['jsonArgument', STRING]]}\n    },\n    'Android Activity': {\n      'Start Activity': {methodName: 'startActivity', args: [\n        ['appPackage', STRING], ['appActivity', STRING], ['appWaitPackage', STRING],\n        ['intentAction', STRING], ['intentCategory', STRING], ['intentFlags', STRING],\n        ['optionalIntentArguments', STRING], ['dontStopAppOnReset', STRING],\n      ], refresh: true},\n      'Current Activity': {methodName: 'getCurrentActivity'},\n      'Current Package': {methodName: 'getCurrentPackage'},\n    },\n    'App': {\n      'Install App': {methodName: 'installAppOnDevice', args: [['appPathOrUrl', STRING]]},\n      'Is App Installed': {methodName: 'isAppInstalledOnDevice', args: [['appId', STRING]]},\n      'Launch App': {methodName: 'launchApp', refresh: true},\n      'Background App': {methodName: 'backgroundApp', args: [['timeout', NUMBER]], refresh: true},\n      'Close App': {methodName: 'closeApp', refresh: true},\n      'Reset App': {methodName: 'resetApp', refresh: true},\n      'Remove App': {methodName: 'removeAppFromDevice', args: [['bundleId', STRING]]},\n      'Get App Strings': {methodName: 'getAppStrings', args: [['language', STRING], ['stringFile', STRING]], refresh: true},\n    },\n    'Clipboard': {\n      'Get Clipboard': {methodName: 'getClipboard'},\n      'Set Clipboard': {methodName: 'setClipboard', args: [['clipboardText', STRING]]},\n    },\n    'File': {\n      'Push File': {methodName: 'pushFileToDevice', args: [['pathToInstallTo', STRING], ['fileContentString', STRING]]},\n      'Pull File': {methodName: 'pullFile', args: [['pathToPullFrom', STRING]]},\n      'Pull Folder': {methodName: 'pullFolder', args: [['folderToPullFrom', STRING]]},\n    },\n    'Interaction': {\n      'Shake': {methodName: 'shake'},\n      'Lock': {methodName: 'lock', args: [['seconds', NUMBER]], refresh: true},\n      'Unlock': {methodName: 'unlock', refresh: true},\n      'Is Device Locked': {methodName: 'isLocked'},\n      'Rotate Device': {methodName: 'rotateDevice', args: [\n        ['x', NUMBER], ['y', NUMBER], ['radius', NUMBER], ['rotatation', NUMBER], ['touchCount', NUMBER], ['duration', NUMBER]\n      ], refresh: true},\n    },\n    'Keys': {\n      'Press Key': {methodName: 'pressKeycode', args: [['keyCode', NUMBER], ['metaState', NUMBER], ['flags', NUMBER]], refresh: true},\n      'Long Press Key': {methodName: 'longPressKeycode', args: [['keyCode', NUMBER], ['metaState', NUMBER], ['flags', NUMBER]], refresh: true},\n      'Hide Keyboard': {methodName: 'hideDeviceKeyboard', refresh: true},\n      'Is Keyboard Shown': {methodName: 'isKeyboardShown'},\n    },\n    'Network': {\n      'Toggle Airplane Mode': {methodName: 'toggleAirplaneMode'},\n      'Toggle Data': {methodName: 'toggleData'},\n      'Toggle WiFi': {methodName: 'toggleWiFi'},\n      'Toggle Location Services': {methodName: 'toggleLocationServices'},\n      'Send SMS': {methodName: 'sendSMS', args: [['phoneNumber', STRING], ['text', STRING]]},\n      'GSM Call': {methodName: 'gsmCall', args: [['phoneNumber', STRING], ['action', STRING]]},\n      'GSM Signal': {methodName: 'gsmSignal', args: [['signalStrengh', NUMBER]]},\n      'GSM Voice': {methodName: 'gsmVoice', args: [['state', STRING]]},\n    },\n    'Performance Data': {\n      'Get Data': {methodName: 'getPerformanceData', args: [['packageName', STRING], ['dataType', STRING], ['dataReadTimeout', NUMBER]]},\n      'Get Data Types': {methodName: 'getSupportedPerformanceDataTypes'},\n    },\n    'iOS Simulator': {\n      'Perform Touch Id': {methodName: 'performTouchId', args: [['match', STRING]], refresh: true},\n      'Toggle Touch Id Enrollment': {methodName: 'toggleTouchIdEnrollment', args: [['enroll', STRING]]},\n    },\n    'System': {\n      'Open Notifications': {methodName: 'openNotifications', refresh: true},\n      'Get System Time': {methodName: 'getDeviceTime'},\n      'Fingerprint (Android)': {methodName: 'fingerprint', args: [['fingerPrintId', NUMBER]], refresh: true}\n    },\n  },\n  'Session': {\n    'Session Capabilities': {\n      'Get Session Capabilities': {methodName: 'sessionCapabilities'}\n    },\n    'Timeouts': {\n      'Set Pageload Timeout': {methodName: 'setPageLoadTimeout', args: [['timeout', NUMBER]]},\n      'Set Script Timeout': {methodName: 'setAsyncScriptTimeout', args: [['timeout', NUMBER]]},\n      'Set Implicit Timeout': {methodName: 'setImplicitWaitTimeout', args: [['timeout', NUMBER]]},\n    },\n    'Orientation': {\n      'Get Orientation': {methodName: 'getOrientation'},\n      'Set Orientation': {methodName: 'setOrientation', args: [['orientation', STRING]], refresh: true},\n    },\n    'Geolocation': {\n      'Get Geolocation': {methodName: 'getGeoLocation'},\n      'Set Geolocation': {methodName: 'setGeoLocation', args: [['latitude', NUMBER], ['longitude', NUMBER], ['altitude', NUMBER]]},\n    },\n    'Logs': {\n      'Get Log Types': {methodName: 'logTypes'},\n      'Get Logs': {methodName: 'log', args: [['logType', STRING]]},\n    },\n    'Settings': {\n      'Update Settings': {methodName: 'updateSettings', args: [['settingsJson', STRING]]},\n      'Get Device Settings': {methodName: 'settings'},\n    },\n  },\n};\n\nexport const INTERACTION_MODE = {\n  SOURCE: 'source',\n  ACTIONS: 'actions',\n};","import { ipcRenderer } from 'electron';\nimport { notification } from 'antd';\nimport { util } from 'appium-support';\nimport i18n from '../../configs/i18next.config.renderer';\nimport _ from 'lodash';\nimport UUID from 'uuid';\nimport Promise from 'bluebird';\n\nconst clientMethodPromises = {};\n\nexport function bindClient () {\n  /**\n   * When we hear back from the main process, resolve the promise\n   */\n  ipcRenderer.removeAllListeners('appium-client-command-response');\n  ipcRenderer.on('appium-client-command-response', (evt, resp) => {\n    // Rename 'id' to 'elementId'\n    let {res, methodName} = resp;\n\n    // Ignore empty objects\n    if (_.isObject(res) && _.isEmpty(res)) {\n      res = null;\n    }\n\n    const truncatedResult = _.truncate(JSON.stringify(res), {length: 2000});\n\n    if (util.hasValue(res) && !resp.ignoreResult) {\n      notification.success({\n        message: i18n.t('methodCallResult', {methodName}),\n        description: i18n.t('commandWasReturnedWithResult', {result: truncatedResult}),\n        duration: 15,\n      });\n    }\n    resp.elementId = resp.id;\n    let promise = clientMethodPromises[resp.uuid];\n    if (promise) {\n      promise.resolve(resp);\n      delete clientMethodPromises[resp.uuid];\n    }\n  });\n\n  /**\n   * If we hear back with an error, reject the promise\n   */\n  ipcRenderer.on('appium-client-command-response-error', (evt, resp) => {\n    let {e, uuid} = resp;\n    e = JSON.parse(e);\n    let promise = clientMethodPromises[uuid];\n    if (promise) {\n      promise.reject(e);\n      delete clientMethodPromises[uuid];\n    }\n  });\n}\n\nexport function unbindClient () {\n  ipcRenderer.removeAllListeners('appium-client-command-response');\n  ipcRenderer.removeAllListeners('appium-client-command-response-error');\n}\n\nexport function callClientMethod (params) {\n  if (!ipcRenderer) {\n    throw new Error('Cannot call ipcRenderer from main context');\n  }\n  let uuid = UUID.v4();\n  let promise = new Promise((resolve, reject) => clientMethodPromises[uuid] = {resolve, reject});\n  ipcRenderer.send('appium-client-command-request', {\n    ...params,\n    uuid,\n  });\n  return promise;\n}","import XPath from 'xpath';\nimport { withTranslation as wt } from 'react-i18next';\nimport config from '../configs/app.config';\nimport _ from 'lodash';\n\n/**\n * Get an optimal XPath for a DOMNode\n * @param {*} domNode {DOMNode}\n * @param {*} uniqueAttributes {array[string]} Attributes we know are unique (defaults to just 'id')\n */\nexport function getOptimalXPath (doc, domNode, uniqueAttributes = ['id']) {\n  try {\n    // BASE CASE #1: If this isn't an element, we're above the root, return empty string\n    if (!domNode.tagName || domNode.nodeType !== 1) {\n      return '';\n    }\n\n    // BASE CASE #2: If this node has a unique attribute, return an absolute XPath with that attribute\n    for (let attrName of uniqueAttributes) {\n      const attrValue = domNode.getAttribute(attrName);\n      if (attrValue) {\n        let xpath = `//${domNode.tagName || '*'}[@${attrName}=\"${attrValue}\"]`;\n        let othersWithAttr;\n\n        // If the XPath does not parse, move to the next unique attribute\n        try {\n          othersWithAttr = XPath.select(xpath, doc);\n        } catch (ign) {\n          continue;\n        }\n\n        // If the attribute isn't actually unique, get it's index too\n        if (othersWithAttr.length > 1) {\n          let index = othersWithAttr.indexOf(domNode);\n          xpath = `(${xpath})[${index + 1}]`;\n        }\n        return xpath;\n      }\n    }\n\n\n    // Get the relative xpath of this node using tagName\n    let xpath = `/${domNode.tagName}`;\n\n    // If this node has siblings of the same tagName, get the index of this node\n    if (domNode.parentNode) {\n      // Get the siblings\n      const childNodes = Array.prototype.slice.call(domNode.parentNode.childNodes, 0).filter((childNode) => (\n        childNode.nodeType === 1 && childNode.tagName === domNode.tagName\n      ));\n\n      // If there's more than one sibling, append the index\n      if (childNodes.length > 1) {\n        let index = childNodes.indexOf(domNode);\n        xpath += `[${index + 1}]`;\n      }\n    }\n\n    // Make a recursive call to this nodes parents and prepend it to this xpath\n    return getOptimalXPath(doc, domNode.parentNode, uniqueAttributes) + xpath;\n  } catch (ign) {\n    // If there's an unexpected exception, abort and don't get an XPath\n    return null;\n  }\n}\n\nexport function withTranslation (componentCls, ...hocs) {\n  return _.flow(\n    ...hocs,\n    wt(config.namespace),\n  )(componentCls);\n}\n","export default class Framework {\n\n  constructor (host, port, path, https, caps) {\n    this.host = host || 'localhost';\n    this.port = port || 4723;\n    this.path = path || '/wd/hub';\n    this.caps = caps || {};\n    this.https = !!https;\n    this.scheme = https ? 'https' : 'http';\n    this.actions = [];\n    this.localVarCount = 0;\n    this.localVarCache = {};\n    this.lastAssignedVar = null;\n  }\n\n  get serverUrl () {\n    return `${this.scheme}://${this.host}:${this.port}${this.path}`;\n  }\n\n  get name () {\n    throw new Error('Must implement name getter');\n  }\n\n  get language () {\n    throw new Error('Must implement language getter');\n  }\n\n  addAction (action, params) {\n    this.actions.push({action, params});\n  }\n\n  wrapWithBoilerplate () {\n    throw new Error('Must implement wrapWithBoilerplate');\n  }\n\n  indent (str, spaces) {\n    let lines = str.split('\\n');\n    let spaceStr = '';\n    for (let i = 0; i < spaces; i++) {\n      spaceStr += ' ';\n    }\n    return lines\n      .filter((l) => !!l.trim())\n      .map((l) => `${spaceStr}${l}`)\n      .join('\\n');\n  }\n\n  getCodeString (includeBoilerplate = false) {\n    let str = '';\n    for (let {action, params} of this.actions) {\n      let genCodeFn = `codeFor_${action}`;\n      if (!this[genCodeFn]) {\n        throw new Error(`Need to implement 'codeFor_${action}()'`);\n      }\n      let code = this[genCodeFn](...params);\n      if (code) {\n        str += `${code}\\n`;\n      }\n    }\n    if (includeBoilerplate) {\n      return this.wrapWithBoilerplate(str);\n    }\n    return str;\n  }\n\n  getNewLocalVar () {\n    this.localVarCount++;\n    return `el${this.localVarCount}`;\n  }\n\n  getVarForFind (strategy, locator) {\n    const key = `${strategy}-${locator}`;\n    let wasNew = false;\n    if (!this.localVarCache[key]) {\n      this.localVarCache[key] = this.getNewLocalVar();\n      wasNew = true;\n    }\n    this.lastAssignedVar = this.localVarCache[key];\n    return [this.localVarCache[key], wasNew];\n  }\n\n  getVarName (varName, varIndex) {\n    if (varIndex || varIndex === 0) {\n      return `${varName}[${varIndex}]`;\n    }\n    return varName;\n  }\n\n  codeFor_findAndAssign () {\n    throw new Error('Need to implement codeFor_findAndAssign');\n  }\n\n  codeFor_findElement (strategy, locator) {\n    let [localVar, wasNew] = this.getVarForFind(strategy, locator);\n    if (!wasNew) {\n      // if we've already found this element, don't print out\n      // finding it again\n      return '';\n    }\n\n    return this.codeFor_findAndAssign(strategy, locator, localVar);\n\n  }\n\n  codeFor_tap () {\n    throw new Error('Need to implement codeFor_tap');\n  }\n\n  codeFor_swipe () {\n    throw new Error('Need to implement codeFor_tap');\n  }\n}\n","import Framework from './framework';\n\nclass JsWdFramework extends Framework {\n\n  get language () {\n    return 'js';\n  }\n\n  wrapWithBoilerplate (code) {\n    let caps = JSON.stringify(this.caps);\n    return `// Requires the admc/wd client library\n// (npm install wd)\n// Then paste this into a .js file and run with Node 7.6+\n\nconst wd = require('wd');\nconst driver = wd.promiseChainRemote(\"${this.serverUrl}\");\nconst caps = ${caps};\n\nasync function main () {\n  await driver.init(caps);\n${this.indent(code, 2)}\n  await driver.quit();\n}\n\nmain().catch(console.log);\n`;\n  }\n\n  codeFor_findAndAssign (strategy, locator, localVar, isArray) {\n    let suffixMap = {\n      xpath: 'XPath',\n      'accessibility id': 'AccessibilityId',\n      'id': 'Id',\n      'name': 'Name',\n      'class name': 'ClassName',\n      '-android uiautomator': 'AndroidUIAutomator',\n      '-android datamatcher': 'AndroidDataMatcher',\n      '-ios predicate string': 'IosUIAutomation',\n      '-ios class chain': 'IosClassChain',\n    };\n    if (!suffixMap[strategy]) {\n      throw new Error(`Strategy ${strategy} can't be code-gened`);\n    }\n    if (isArray) {\n      return `let ${localVar} = await driver.elementsBy${suffixMap[strategy]}(${JSON.stringify(locator)});`;\n    } else {\n      return `let ${localVar} = await driver.elementBy${suffixMap[strategy]}(${JSON.stringify(locator)});`;\n    }\n  }\n\n  codeFor_click (varName, varIndex) {\n    return `await ${this.getVarName(varName, varIndex)}.click();`;\n  }\n\n  codeFor_clear (varName, varIndex) {\n    return `await ${this.getVarName(varName, varIndex)}.clear();`;\n  }\n\n  codeFor_sendKeys (varName, varIndex, text) {\n    return `await ${this.getVarName(varName, varIndex)}.sendKeys(${JSON.stringify(text)});`;\n  }\n\n  codeFor_back () {\n    return `await driver.back();`;\n  }\n\n  codeFor_tap (varNameIgnore, varIndexIgnore, x, y) {\n    return `await (new wd.TouchAction(driver))\n  .tap({x: ${x}, y: ${y}})\n  .perform()\n    `;\n  }\n\n  codeFor_swipe (varNameIgnore, varIndexIgnore, x1, y1, x2, y2) {\n    return `await (new wd.TouchAction(driver))\n  .press({x: ${x1}, y: ${y1}})\n  .moveTo({x: ${x2}, y: ${y2}})\n  .release()\n  .perform()\n    `;\n  }\n\n  codeFor_getCurrentActivity () {\n    return `let activityName = await driver.getCurrentActivity()`;\n  }\n\n  codeFor_getCurrentPackage () {\n    return `let packageName = await driver.getCurrentPackage()`;\n  }\n\n\n  codeFor_installAppOnDevice (varNameIgnore, varIndexIgnore, app) {\n    return `let isAppInstalled = await driver.installAppOnDevice('${app}');`;\n  }\n\n  codeFor_isAppInstalledOnDevice (varNameIgnore, varIndexIgnore, app) {\n    return `driver.isAppInstalled(\"${app}\");`;\n  }\n\n  codeFor_launchApp () {\n    return `await driver.launchApp();`;\n  }\n\n  codeFor_backgroundApp (varNameIgnore, varIndexIgnore, timeout) {\n    return `await driver.backgroundApp(${timeout});`;\n  }\n\n  codeFor_closeApp () {\n    return `await driver.closeApp();`;\n  }\n\n  codeFor_resetApp () {\n    return `await driver.resetApp();`;\n  }\n\n  codeFor_removeAppFromDevice (varNameIgnore, varIndexIgnore, app) {\n    return `await driver.removeAppFromDevice('${app}');`;\n  }\n\n  codeFor_getAppStrings (varNameIgnore, varIndexIgnore, language, stringFile) {\n    return `let appStrings = await driver.getAppStrings(${language ? `${language}, ` : ''}${stringFile ? `\"${stringFile}` : ''});`;\n  }\n\n  codeFor_getClipboard () {\n    return `let clipboardText = await driver.getClipboard();`;\n  }\n\n  codeFor_setClipboard (varNameIgnore, varIndexIgnore, clipboardText) {\n    return `await driver.setClipboard('${clipboardText}')`;\n  }\n\n  codeFor_pressKeycode (varNameIgnore, varIndexIgnore, keyCode, metaState, flags) {\n    return `await driver.longPressKeyCode(${keyCode}, ${metaState}, ${flags});`;\n  }\n\n  codeFor_longPressKeycode (varNameIgnore, varIndexIgnore, keyCode, metaState, flags) {\n    return `await driver.longPressKeyCode(${keyCode}, ${metaState}, ${flags});`;\n  }\n\n  codeFor_hideDeviceKeyboard () {\n    return `await driver.hideDeviceKeyboard();`;\n  }\n\n  codeFor_isKeyboardShown () {\n    return `await driver.isKeyboardShown();`;\n  }\n\n  codeFor_pushFileToDevice (varNameIgnore, varIndexIgnore, pathToInstallTo, fileContentString) {\n    return `await driver.pushFileToDevice('${pathToInstallTo}', '${fileContentString}');`;\n  }\n\n  codeFor_pullFile (varNameIgnore, varIndexIgnore, pathToPullFrom) {\n    return `let fileBase64 = await driver.pullFile('${pathToPullFrom}');`;\n  }\n\n  codeFor_pullFolder (varNameIgnore, varIndexIgnore, folderToPullFrom) {\n    return `let fileBase64 = await driver.pullFolder('${folderToPullFrom}');`;\n  }\n\n  codeFor_toggleAirplaneMode () {\n    return `await driver.toggleAirplaneMode();`;\n  }\n\n  codeFor_toggleData () {\n    return `await driver.toggleData();`;\n  }\n\n  codeFor_toggleWiFi () {\n    return `await driver.toggleWiFi();`;\n  }\n\n  codeFor_toggleLocationServices () {\n    return `await driver.toggleLocationServices();`;\n  }\n\n  codeFor_sendSMS (varNameIgnore, varIndexIgnore, phoneNumber, text) {\n    return `await driver.sendSms('${phoneNumber}', '${text}');`;\n  }\n\n  codeFor_gsmCall (varNameIgnore, varIndexIgnore, phoneNumber, action) {\n    return `await driver.gsmCall('${phoneNumber}', '${action}');`;\n  }\n\n  codeFor_gsmSignal (varNameIgnore, varIndexIgnore, signalStrength) {\n    return `await driver.gsmSignal(${signalStrength});`;\n  }\n\n  codeFor_gsmVoice (varNameIgnore, varIndexIgnore, state) {\n    return `await driver.gsmVoice('${state}');`;\n  }\n\n  codeFor_shake () {\n    return `await driver.shake();`;\n  }\n\n  codeFor_lock (varNameIgnore, varIndexIgnore, seconds) {\n    return `await driver.lock(${seconds})`;\n  }\n\n  codeFor_unlock () {\n    return `await driver.unlock()`;\n  }\n\n  codeFor_isLocked () {\n    return `let isLocked = await driver.isLocked();`;\n  }\n\n  codeFor_rotateDevice (varNameIgnore, varIndexIgnore, x, y, radius, rotation, touchCount, duration) {\n    return `driver.rotateDevice({x: ${x}, y: ${y}, duration: ${duration}, radius: ${radius}, rotation: ${rotation}, touchCount: ${touchCount}});`;\n  }\n\n  codeFor_getPerformanceData (varNameIgnore, varIndexIgnore, packageName, dataType, dataReadTimeout) {\n    return `let performanceData = await driver.getPerformanceData('${packageName}', '${dataType}', ${dataReadTimeout});`;\n  }\n\n  codeFor_getSupportedPerformanceDataTypes () {\n    return `let supportedPerformanceDataTypes = await driver.getSupportedPerformanceDataTypes();`;\n  }\n\n  codeFor_performTouchId (varNameIgnore, varIndexIgnore, match) {\n    return `await driver.touchId(${match});`;\n  }\n\n  codeFor_toggleTouchIdEnrollment (varNameIgnore, varIndexIgnore, enroll) {\n    return `await driver.toggleTouchIdEnrollment(${enroll});`;\n  }\n\n  codeFor_openNotifications () {\n    return `await driver.openNotifications();`;\n  }\n\n  codeFor_getDeviceTime () {\n    return `let time = await driver.getDeviceTime();`;\n  }\n\n  codeFor_fingerprint (varNameIgnore, varIndexIgnore, fingerprintId) {\n    return `await driver.fingerprint(${fingerprintId});`;\n  }\n\n  codeFor_sessionCapabilities () {\n    return `let caps = await driver.sessionCapabilities();`;\n  }\n\n  codeFor_setPageLoadTimeout (varNameIgnore, varIndexIgnore, ms) {\n    return `await setPageLoadTimeout(${ms})`;\n  }\n\n  codeFor_setAsyncScriptTimeout (varNameIgnore, varIndexIgnore, ms) {\n    return `await setAsyncScriptTimeout(${ms})`;\n  }\n\n  codeFor_setImplicitWaitTimeout (varNameIgnore, varIndexIgnore, ms) {\n    return `await setImplicitWaitTimeout(${ms})`;\n  }\n\n  codeFor_getOrientation () {\n    return `let orientation = await driver.getOrientation();`;\n  }\n\n  codeFor_setOrientation (varNameIgnore, varIndexIgnore, orientation) {\n    return `await driver.setOrientation('${orientation}');`;\n  }\n\n  codeFor_getGeoLocation () {\n    return `let location = await driver.getGeoLocation();`;\n  }\n\n  codeFor_setGeoLocation (varNameIgnore, varIndexIgnore, latitude, longitude, altitude) {\n    return `await driver.setGeoLocation(${latitude}, ${longitude}, ${altitude});`;\n  }\n\n  codeFor_logTypes () {\n    return `let logTypes = await driver.logTypes();`;\n  }\n\n  codeFor_log (varNameIgnore, varIndexIgnore, logType) {\n    return `let logs = await driver.log('${logType}');`;\n  }\n\n  codeFor_updateSettings (varNameIgnore, varIndexIgnore, settingsJson) {\n    return `await driver.updateSettings(${settingsJson});`;\n  }\n\n  codeFor_settings () {\n    return `let settings = await driver.settings();`;\n  }\n\n}\n\nJsWdFramework.readableName = 'JS - WD (Promise)';\n\nexport default JsWdFramework;\n","import Framework from './framework';\n\nclass JsWdIoFramework extends Framework {\n\n  get language () {\n    return 'js';\n  }\n\n  chainifyCode (code) {\n    return code\n      .replace(/let .+ = /g, '')\n      .replace(/(\\n|^)(driver|el[0-9]+)\\./g, '\\n.')\n      .replace(/;\\n/g, '\\n');\n  }\n\n  wrapWithBoilerplate (code) {\n    let host = JSON.stringify(this.host);\n    let caps = JSON.stringify(this.caps);\n    let proto = JSON.stringify(this.scheme);\n    let path = JSON.stringify(this.path);\n    return `// Requires the webdriverio client library\n// (npm install webdriverio)\n// Then paste this into a .js file and run with Node:\n// node <file>.js\n\nconst wdio = require('webdriverio');\nconst caps = ${caps};\nconst driver = wdio.remote({\n  protocol: ${proto},\n  host: ${host},\n  port: ${this.port},\n  path: ${path},\n  desiredCapabilities: caps\n});\n\ndriver.init()\n${this.indent(this.chainifyCode(code), 2)}\n  .end();\n`;\n  }\n\n  codeFor_findAndAssign (strategy, locator, localVar, isArray) {\n    // wdio has its own way of indicating the strategy in the locator string\n    switch (strategy) {\n      case 'xpath': break; // xpath does not need to be updated\n      case 'accessibility id': locator = `~${locator}`; break;\n      case 'id': locator = `${locator}`; break;\n      case 'name': locator = `name=${locator}`; break;\n      case 'class name': locator = `${locator}`; break;\n      case '-android uiautomator': locator = `android=${locator}`; break;\n      case '-android datamatcher': locator = `android=${locator}`; break;\n      case '-ios predicate string': locator = `ios=${locator}`; break;\n      case '-ios class chain': locator = `ios=${locator}`; break; // TODO: Handle IOS class chain properly. Not all libs support it. Or take it out\n      default: throw new Error(`Can't handle strategy ${strategy}`);\n    }\n    if (isArray) {\n      return `let ${localVar} = driver.elements(${JSON.stringify(locator)});`;\n    } else {\n      return `let ${localVar} = driver.element(${JSON.stringify(locator)});`;\n    }\n  }\n\n  codeFor_click (varName, varIndex) {\n    return `${this.getVarName(varName, varIndex)}.click();`;\n  }\n\n  codeFor_clear (varName, varIndex) {\n    return `${this.getVarName(varName, varIndex)}.clearElement();`;\n  }\n\n  codeFor_sendKeys (varName, varIndex, text) {\n    return `${this.getVarName(varName, varIndex)}.setValue(${JSON.stringify(text)});`;\n  }\n\n  codeFor_back () {\n    return `driver.back();`;\n  }\n\n  codeFor_tap (varNameIgnore, varIndexIgnore, x, y) {\n    return `driver.touchAction({actions: 'tap', x: ${x}, y: ${y}})`;\n  }\n\n  codeFor_swipe (varNameIgnore, varIndexIgnore, x1, y1, x2, y2) {\n    return `driver.touchAction([\n  {action: 'press', x: ${x1}, y: ${y1}},\n  {action: 'moveTo', x: ${x2}, y: ${y2}},\n  'release'\n]);`;\n  }\n\n  codeFor_getCurrentActivity () {\n    return `let activityName = await driver.currentActivity();`;\n  }\n\n  codeFor_getCurrentPackage () {\n    return `let packageName = await driver.currentPackage();`;\n  }\n\n\n  codeFor_installAppOnDevice (varNameIgnore, varIndexIgnore, app) {\n    return `await driver.installApp('${app}');`;\n  }\n\n  codeFor_isAppInstalledOnDevice (varNameIgnore, varIndexIgnore, app) {\n    return `let isAppInstalled = await driver.isAppInstalled(\"${app}\");`;\n  }\n\n  codeFor_launchApp () {\n    return `await driver.launch();`;\n  }\n\n  codeFor_backgroundApp (varNameIgnore, varIndexIgnore, timeout) {\n    return `await driver.background(${timeout});`;\n  }\n\n  codeFor_closeApp () {\n    return `await driver.close_app();`;\n  }\n\n  codeFor_resetApp () {\n    return `await driver.reset();`;\n  }\n\n  codeFor_removeAppFromDevice (varNameIgnore, varIndexIgnore, app) {\n    return `await driver.removeApp('${app}')`;\n  }\n\n  codeFor_getAppStrings (varNameIgnore, varIndexIgnore, language, stringFile) {\n    return `let appStrings = await driver.getAppStrings(${language ? `${language}, ` : ''}${stringFile ? `\"${stringFile}` : ''});`;\n  }\n\n  codeFor_getClipboard () {\n    return `let clipboardText = await driver.getClipboard();`;\n  }\n\n  codeFor_setClipboard (varNameIgnore, varIndexIgnore, clipboardText) {\n    return `await driver.setClipboard('${clipboardText}')`;\n  }\n\n  codeFor_pressKeycode (varNameIgnore, varIndexIgnore, keyCode, metaState, flags) {\n    return `await driver.longPressKeyCode(${keyCode}, ${metaState}, ${flags});`;\n  }\n\n  codeFor_longPressKeycode (varNameIgnore, varIndexIgnore, keyCode, metaState, flags) {\n    return `await driver.longPressKeyCode(${keyCode}, ${metaState}, ${flags});`;\n  }\n\n  codeFor_hideDeviceKeyboard () {\n    return `await driver.hideDeviceKeyboard();`;\n  }\n\n  codeFor_isKeyboardShown () {\n    return `//isKeyboardShown not supported`;\n  }\n\n  codeFor_pushFileToDevice (varNameIgnore, varIndexIgnore, pathToInstallTo, fileContentString) {\n    return `await driver.pushFile('${pathToInstallTo}', '${fileContentString}');`;\n  }\n\n  codeFor_pullFile (varNameIgnore, varIndexIgnore, pathToPullFrom) {\n    return `let data = await driver.pullFile('${pathToPullFrom}');`;\n  }\n\n  codeFor_pullFolder (varNameIgnore, varIndexIgnore, folderToPullFrom) {\n    return `let data = await driver.pullFolder('${folderToPullFrom}');`;\n  }\n\n  codeFor_toggleAirplaneMode () {\n    return `await driver.toggleAirplaneMode();`;\n  }\n\n  codeFor_toggleData () {\n    return `await driver.toggleData();`;\n  }\n\n  codeFor_toggleWiFi () {\n    return `await driver.toggleWiFi();`;\n  }\n\n  codeFor_toggleLocationServices () {\n    return `await driver.toggleLocationServices();`;\n  }\n\n  codeFor_sendSMS () {\n    return `// Not supported: sendSms;`;\n  }\n\n  codeFor_gsmCall () {\n    return `// Not supported: gsmCall`;\n  }\n\n  codeFor_gsmSignal () {\n    return `// Not supported: gsmSignal`;\n  }\n\n  codeFor_gsmVoice () {\n    return `// Not supported: gsmVoice`;\n  }\n\n  codeFor_shake () {\n    return `await driver.shake();`;\n  }\n\n  codeFor_lock (varNameIgnore, varIndexIgnore, seconds) {\n    return `await driver.lock(${seconds});`;\n  }\n\n  codeFor_unlock () {\n    return `await driver.unlock();`;\n  }\n\n  codeFor_isLocked () {\n    return `let isLocked = await driver.isLocked();`;\n  }\n\n  codeFor_rotateDevice (varNameIgnore, varIndexIgnore, x, y, radius, rotation, touchCount, duration) {\n    return `driver.rotate(${x}, ${y}, ${radius}, ${rotation}, ${touchCount}, ${duration});`;\n  }\n\n  codeFor_getPerformanceData () {\n    return `// Not supported: getPerformanceData`;\n  }\n\n  codeFor_getSupportedPerformanceDataTypes () {\n    return `// Not supported: getSupportedPerformanceDataTypes`;\n  }\n\n  codeFor_performTouchId (varNameIgnore, varIndexIgnore, match) {\n    return `await driver.touchId(${match});`;\n  }\n\n  codeFor_toggleTouchIdEnrollment (varNameIgnore, varIndexIgnore, enroll) {\n    return `await driver.toggleTouchIdEnrollment(${enroll});`;\n  }\n\n  codeFor_openNotifications () {\n    return `await driver.openNotifications();`;\n  }\n\n  codeFor_getDeviceTime () {\n    return `let time = await driver.getDeviceTime();`;\n  }\n\n  codeFor_fingerprint (varNameIgnore, varIndexIgnore, fingerprintId) {\n    return `await driver.fingerprint(${fingerprintId});`;\n  }\n\n  codeFor_sessionCapabilities () {\n    return `let caps = await driver.session('c8db88a0-47a6-47a1-802d-164d746c06aa');`;\n  }\n\n  codeFor_setPageLoadTimeout (varNameIgnore, varIndexIgnore, ms) {\n    return `await driver.timeouts('page load', ${ms})`;\n  }\n\n  codeFor_setAsyncScriptTimeout (varNameIgnore, varIndexIgnore, ms) {\n    return `await driver.timeouts('script', ${ms})`;\n  }\n\n  codeFor_setImplicitWaitTimeout (varNameIgnore, varIndexIgnore, ms) {\n    return `await driver.timeouts('implicit', ${ms})`;\n  }\n\n  codeFor_setCommandTimeout (varNameIgnore, varIndexIgnore, ms) {\n    return `await driver.timeouts('command', ${ms})`;\n  }\n\n  codeFor_getOrientation () {\n    return `let orientation = await driver.orientation();`;\n  }\n\n  codeFor_setOrientation (varNameIgnore, varIndexIgnore, orientation) {\n    return `driver.orientation(\"${orientation}\");`;\n  }\n\n  codeFor_getGeoLocation () {\n    return `let location = await driver.location();`;\n  }\n\n  codeFor_setGeoLocation (varNameIgnore, varIndexIgnore, latitude, longitude, altitude) {\n    return `await driver.location({latitude: ${latitude}, longitude: ${longitude}, altitude: ${altitude}});`;\n  }\n\n  codeFor_logTypes () {\n    return `let logTypes = await driver.log();`;\n  }\n\n  codeFor_log (varNameIgnore, varIndexIgnore, logType) {\n    return `let logs = await driver.log('${logType}');`;\n  }\n\n  codeFor_updateSettings (varNameIgnore, varIndexIgnore, settingsJson) {\n    return `await driver.settings(${settingsJson});`;\n  }\n\n  codeFor_settings () {\n    return `let settings = await driver.settings();`;\n  }\n}\n\nJsWdIoFramework.readableName = 'JS - Webdriver.io';\n\nexport default JsWdIoFramework;\n","import Framework from './framework';\nimport _ from 'lodash';\n\nclass JavaFramework extends Framework {\n\n  get language () {\n    return 'java';\n  }\n\n  wrapWithBoilerplate (code) {\n    let [pkg, cls] = (() => {\n      if (this.caps.platformName) {\n        switch (this.caps.platformName.toLowerCase()) {\n          case 'ios': return ['ios', 'IOSDriver'];\n          case 'android': return ['android', 'AndroidDriver'];\n          default: return ['unknownPlatform', 'UnknownDriver'];\n        }\n      } else {\n        return ['unknownPlatform', 'UnknownDriver'];\n      }\n    })();\n    let capStr = this.indent(Object.keys(this.caps).map((k) => {\n      return `desiredCapabilities.setCapability(${JSON.stringify(k)}, ${JSON.stringify(this.caps[k])});`;\n    }).join('\\n'), 4);\n    return `import io.appium.java_client.MobileElement;\nimport io.appium.java_client.${pkg}.${cls};\nimport junit.framework.TestCase;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport org.openqa.selenium.remote.DesiredCapabilities;\n\npublic class SampleTest {\n\n  private ${cls} driver;\n\n  @Before\n  public void setUp() throws MalformedURLException {\n    DesiredCapabilities desiredCapabilities = new DesiredCapabilities();\n${capStr}\n\n    URL remoteUrl = new URL(\"${this.serverUrl}\");\n\n    driver = new ${cls}(remoteUrl, desiredCapabilities);\n  }\n\n  @Test\n  public void sampleTest() {\n${this.indent(code, 4)}\n  }\n\n  @After\n  public void tearDown() {\n    driver.quit();\n  }\n}\n`;\n  }\n\n  codeFor_findAndAssign (strategy, locator, localVar, isArray) {\n    let suffixMap = {\n      xpath: 'XPath',\n      'accessibility id': 'AccessibilityId',\n      'id': 'Id',\n      'class name': 'ClassName',\n      'name': 'Name',\n      '-android uiautomator': 'AndroidUIAutomator',\n      '-android datamatcher': 'AndroidDataMatcher',\n      '-ios predicate string': 'IosNsPredicate',\n      '-ios class chain': 'IosClassChain',\n    };\n    if (!suffixMap[strategy]) {\n      throw new Error(`Strategy ${strategy} can't be code-gened`);\n    }\n    if (isArray) {\n      return `List<MobileElement> ${localVar} = (MobileElement) driver.findElementsBy${suffixMap[strategy]}(${JSON.stringify(locator)});`;\n    } else {\n      return `MobileElement ${localVar} = (MobileElement) driver.findElementBy${suffixMap[strategy]}(${JSON.stringify(locator)});`;\n    }\n  }\n\n  getVarName (varName, varIndex) {\n    if (varIndex || varIndex === 0) {\n      return `${varName}.get(${varIndex})`;\n    }\n    return varName;\n  }\n\n  codeFor_click (varName, varIndex) {\n    return `${this.getVarName(varName, varIndex)}.click();`;\n  }\n\n  codeFor_clear (varName, varIndex) {\n    return `${this.getVarName(varName, varIndex)}.clear();`;\n  }\n\n  codeFor_sendKeys (varName, varIndex, text) {\n    return `${this.getVarName(varName, varIndex)}.sendKeys(${JSON.stringify(text)});`;\n  }\n\n  codeFor_back () {\n    return `driver.navigate().back();`;\n  }\n\n  codeFor_tap (varNameIgnore, varIndexIgnore, x, y) {\n    return `(new TouchAction(driver)).tap(${x}, ${y}).perform()`;\n  }\n\n  codeFor_swipe (varNameIgnore, varIndexIgnore, x1, y1, x2, y2) {\n    return `(new TouchAction(driver))\n  .press({x: ${x1}, y: ${y1}})\n  .moveTo({x: ${x2}: y: ${y2}})\n  .release()\n  .perform()\n  `;\n  }\n\n  codeFor_getCurrentActivity () {\n    return `String activityName = driver.currentActivity()`;\n  }\n\n  codeFor_getCurrentPackage () {\n    return `String packageName = driver.currentPackage()`;\n  }\n\n  codeFor_startActivity () {\n    return `driver.`;\n  }\n\n  codeFor_installAppOnDevice (varNameIgnore, varIndexIgnore, app) {\n    return `driver.installApp(\"${app}\");`;\n  }\n\n  codeFor_isAppInstalledOnDevice (varNameIgnore, varIndexIgnore, app) {\n    return `boolean isAppInstalled = driver.isAppInstalled(\"${app}\");`;\n  }\n\n  codeFor_launchApp () {\n    return `driver.launchApp();`;\n  }\n\n  codeFor_backgroundApp (varNameIgnore, varIndexIgnore, timeout) {\n    return `driver.runAppInBackground(Duration.ofSeconds(${timeout}));`;\n  }\n\n  codeFor_closeApp () {\n    return `driver.closeApp();`;\n  }\n\n  codeFor_resetApp () {\n    return `driver.resetApp();`;\n  }\n\n  codeFor_removeAppFromDevice (varNameIgnore, varIndexIgnore, app) {\n    return `driver.removeApp(\"${app}\");`;\n  }\n\n  codeFor_getAppStrings (varNameIgnore, varIndexIgnore, language, stringFile) {\n    return `Map<String, String> appStrings = driver.getAppStringMap(${language ? `${language}, ` : ''}${stringFile ? `\"${stringFile}` : ''});`;\n  }\n\n  codeFor_getClipboard () {\n    return `String clipboardText = driver.getClipboardText();`;\n  }\n\n  codeFor_setClipboard (varNameIgnore, varIndexIgnore, clipboardText) {\n    return `driver.setClipboardText(\"${clipboardText}\");`;\n  }\n\n  codeFor_pressKeycode (varNameIgnore, varIndexIgnore, keyCode, metaState, flags) {\n    return `driver.pressKeyCode(${keyCode}, ${metaState}, ${flags});`;\n  }\n\n  codeFor_longPressKeycode (varNameIgnore, varIndexIgnore, keyCode, metaState, flags) {\n    return `driver.longPressKeyCode(${keyCode}, ${metaState}, ${flags});`;\n  }\n\n  codeFor_hideDeviceKeyboard () {\n    return `driver.hideKeyboard();`;\n  }\n\n  codeFor_isKeyboardShown () {\n    return `boolean isKeyboardShown = driver.isKeyboardShown();`;\n  }\n\n  codeFor_pushFileToDevice (varNameIgnore, varIndexIgnore, pathToInstallTo, fileContentString) {\n    return `driver.pushFile(\"${pathToInstallTo}\", ${fileContentString})`;\n  }\n\n  codeFor_pullFile (varNameIgnore, varIndexIgnore, pathToPullFrom) {\n    return `byte[] fileBase64 = driver.pullFile(\"${pathToPullFrom}\");`;\n  }\n\n  codeFor_pullFolder (varNameIgnore, varIndexIgnore, folderToPullFrom) {\n    return `byte[] fileBase64 = driver.pullFolder(\"${folderToPullFrom}\");`;\n  }\n\n  codeFor_toggleAirplaneMode () {\n    return `driver.toggleAirplaneMode();`;\n  }\n\n  codeFor_toggleData () {\n    return `driver.toggleData();`;\n  }\n\n  codeFor_toggleWiFi () {\n    return `driver.toggleWifi();`;\n  }\n\n  codeFor_toggleLocationServices () {\n    return `driver.toggleLocationServices();`;\n  }\n\n  codeFor_sendSMS (varNameIgnore, varIndexIgnore, phoneNumber, text) {\n    return `driver.sendSMS(\"${phoneNumber}\", \"${text}\");`;\n  }\n\n  codeFor_gsmCall (varNameIgnore, varIndexIgnore, phoneNumber, action) {\n    return `driver.makeGsmCall(\"${phoneNumber}\", \"${action}\");`;\n  }\n\n  codeFor_gsmSignal (varNameIgnore, varIndexIgnore, signalStrength) {\n    return `driver.setGsmSignalStrength(\"${signalStrength}\");`;\n  }\n\n  codeFor_gsmVoice (varNameIgnore, varIndexIgnore, state) {\n    return `driver.setGsmVoice(\"${state}\");`;\n  }\n\n  codeFor_shake () {\n    return `driver.shake();`;\n  }\n\n  codeFor_lock (varNameIgnore, varIndexIgnore, seconds) {\n    return `driver.lockDevice(${seconds});`;\n  }\n\n  codeFor_unlock () {\n    return `driver.unlockDevice()`;\n  }\n\n  codeFor_isLocked () {\n    return `boolean isLocked = driver.isDeviceLocked();`;\n  }\n\n  codeFor_rotateDevice (varNameIgnore, varIndexIgnore, x, y, radius, rotation, touchCount, duration) {\n    return `driver.rotate(new DeviceRotation(${x}, ${y}, ${radius}, ${rotation}, ${touchCount}, ${duration}));`;\n  }\n\n  codeFor_getPerformanceData (varNameIgnore, varIndexIgnore, packageName, dataType, dataReadTimeout) {\n    return `List<List<Object>> performanceData = driver.getPerformanceData(\"${packageName}\", \"${dataType}\", ${dataReadTimeout});`;\n  }\n\n  codeFor_getSupportedPerformanceDataTypes () {\n    return `List<String> performanceTypes = driver.getSupportedPerformanceDataTypes();`;\n  }\n\n  codeFor_performTouchId (varNameIgnore, varIndexIgnore, match) {\n    return `driver.performTouchID(${match});`;\n  }\n\n  codeFor_toggleTouchIdEnrollment (varNameIgnore, varIndexIgnore, enroll) {\n    return `driver.toggleTouchIDEnrollment(${enroll});`;\n  }\n\n  codeFor_openNotifications () {\n    return `driver.openNotifications();`;\n  }\n\n  codeFor_getDeviceTime () {\n    return `String time = driver.getDeviceTime();`;\n  }\n\n  codeFor_fingerprint (varNameIgnore, varIndexIgnore, fingerprintId) {\n    return `driver.fingerPrint(${fingerprintId});`;\n  }\n\n  codeFor_sessionCapabilities () {\n    return `Map<String, Object> caps = driver.getSessionDetails();`;\n  }\n\n  codeFor_setPageLoadTimeout (varNameIgnore, varIndexIgnore, ms) {\n    return `driver.manage().timeouts().pageLoadTimeout(${ms / 1000}, TimeUnit.SECONDS);`;\n  }\n\n  codeFor_setAsyncScriptTimeout (varNameIgnore, varIndexIgnore, ms) {\n    return `driver.manage().timeouts().setScriptTimeout(${ms / 1000}, TimeUnit.SECONDS);`;\n  }\n\n  codeFor_setImplicitWaitTimeout (varNameIgnore, varIndexIgnore, ms) {\n    return `driver.manage().timeouts().implicitlyWait(${ms / 1000}, TimeUnit.SECONDS);`;\n  }\n\n  codeFor_getOrientation () {\n    return `ScreenOrientation orientation = driver.getOrientation();`;\n  }\n\n  codeFor_setOrientation (varNameIgnore, varIndexIgnore, orientation) {\n    return `driver.rotate(\"${orientation}\");`;\n  }\n\n  codeFor_getGeoLocation () {\n    return `Location location = driver.location();`;\n  }\n\n  codeFor_setGeoLocation (varNameIgnore, varIndexIgnore, latitude, longitude, altitude) {\n    return `driver.setLocation(new Location(${latitude}, ${longitude}, ${altitude}));`;\n  }\n\n  codeFor_logTypes () {\n    return `Set<String> logTypes = driver.manage().logs().getAvailableLogTypes();`;\n  }\n\n  codeFor_log (varNameIgnore, varIndexIgnore, logType) {\n    return `LogEntries logEntries = driver.manage().logs().get(\"${logType}\");`;\n  }\n\n  codeFor_updateSettings (varNameIgnore, varIndexIgnore, settingsJson) {\n    try {\n      let settings = '';\n      for (let [settingName, settingValue] of _.toPairs(JSON.parse(settingsJson))) {\n        settings += `driver.setSetting(\"${settingName}\", \"${settingValue}\");\\n`;\n      }\n      return settings;\n    } catch (e) {\n      return `// Could not parse: ${settingsJson}`;\n    }\n  }\n\n  codeFor_settings () {\n    return `Map<String, Object> settings = driver.getSettings();`;\n  }\n\n  /*\n\n  codeFor_ REPLACE_ME (varNameIgnore, varIndexIgnore) {\n    return `REPLACE_ME`;\n  }\n\n  */\n\n}\n\nJavaFramework.readableName = 'Java - JUnit';\n\nexport default JavaFramework;\n","import Framework from './framework';\n\nclass PythonFramework extends Framework {\n\n  get language () {\n    return 'python';\n  }\n\n  getPythonVal (jsonVal) {\n    if (typeof jsonVal === 'boolean') {\n      return jsonVal ? 'True' : 'False';\n    }\n    return JSON.stringify(jsonVal);\n  }\n\n  wrapWithBoilerplate (code) {\n    let capStr = Object.keys(this.caps).map((k) => {\n      return `caps[${JSON.stringify(k)}] = ${this.getPythonVal(this.caps[k])}`;\n    }).join('\\n');\n    return `# This sample code uses the Appium python client\n# pip install Appium-Python-Client\n# Then you can paste this into a file and simply run with Python\n\nfrom appium import webdriver\n\ncaps = {}\n${capStr}\n\ndriver = webdriver.Remote(\"${this.serverUrl}\", caps)\n\n${code}\ndriver.quit()`;\n  }\n\n  codeFor_findAndAssign (strategy, locator, localVar, isArray) {\n    let suffixMap = {\n      xpath: 'xpath',\n      'accessibility id': 'accessibility_id',\n      'id': 'id',\n      'name': 'name', // TODO: How does Python use name selector\n      'class name': 'class_name',\n      '-android uiautomator': 'android_uiautomator',\n      '-android datamatcher': 'android_datamatcher',\n      '-ios predicate string': 'ios_predicate',\n      '-ios class chain': 'ios_uiautomation', // TODO: Could not find iOS UIAutomation\n    };\n    if (!suffixMap[strategy]) {\n      throw new Error(`Strategy ${strategy} can't be code-gened`);\n    }\n    if (isArray) {\n      return `${localVar} = driver.find_elements_by_${suffixMap[strategy]}(${JSON.stringify(locator)})`;\n    } else {\n      return `${localVar} = driver.find_element_by_${suffixMap[strategy]}(${JSON.stringify(locator)})`;\n    }\n  }\n\n  codeFor_click (varName, varIndex) {\n    return `${this.getVarName(varName, varIndex)}.click()`;\n  }\n\n  codeFor_clear (varName, varIndex) {\n    return `${this.getVarName(varName, varIndex)}.clear()`;\n  }\n\n  codeFor_sendKeys (varName, varIndex, text) {\n    return `${this.getVarName(varName, varIndex)}.send_keys(${JSON.stringify(text)})`;\n  }\n\n  codeFor_back () {\n    return `driver.back()`;\n  }\n\n  codeFor_tap (varNameIgnore, varIndexIgnore, x, y) {\n    return `TouchAction(driver).tap(x=${x}, y=${y}).perform()`;\n  }\n\n  codeFor_swipe (varNameIgnore, varIndexIgnore, x1, y1, x2, y2) {\n    return `TouchAction(driver) \\\n  .press(x=${x1}, y=${y1}) \\\n  .move_to(x=${x2}, y=${y2}) \\\n  .release() \\\n  .perform()\n    `;\n  }\n\n  codeFor_getCurrentActivity () {\n    return `activity_name = driver.current_activity`;\n  }\n\n  codeFor_getCurrentPackage () {\n    return `package_name = driver.current_package`;\n  }\n\n  codeFor_installAppOnDevice (varNameIgnore, varIndexIgnore, app) {\n    return `driver.install_app('${app}');`;\n  }\n\n  codeFor_isAppInstalledOnDevice (varNameIgnore, varIndexIgnore, app) {\n    return `is_app_installed = driver.isAppInstalled(\"${app}\");`;\n  }\n\n  codeFor_launchApp () {\n    return `driver.launch_app()`;\n  }\n\n  codeFor_backgroundApp (varNameIgnore, varIndexIgnore, timeout) {\n    return `driver.background_app(${timeout})`;\n  }\n\n  codeFor_closeApp () {\n    return `driver.close_app()`;\n  }\n\n  codeFor_resetApp () {\n    return `driver.reset()`;\n  }\n\n  codeFor_removeAppFromDevice (varNameIgnore, varIndexIgnore, app) {\n    return `driver.remove_app('${app}');`;\n  }\n\n  codeFor_getAppStrings (varNameIgnore, varIndexIgnore, language, stringFile) {\n    return `appStrings = driver.app_strings(${language ? `${language}, ` : ''}${stringFile ? `\"${stringFile}` : ''})`;\n  }\n\n  codeFor_getClipboard () {\n    return `clipboard_text = driver.get_clipboard_text()`;\n  }\n\n  codeFor_setClipboard (varNameIgnore, varIndexIgnore, clipboardText) {\n    return `driver.set_clipboard_text('${clipboardText}')`;\n  }\n\n  codeFor_pressKeycode (varNameIgnore, varIndexIgnore, keyCode, metaState, flags) {\n    return `driver.press_keycode(${keyCode}, ${metaState}, ${flags});`;\n  }\n\n  codeFor_longPressKeycode (varNameIgnore, varIndexIgnore, keyCode, metaState, flags) {\n    return `driver.long_press_keycode(${keyCode}, ${metaState}, ${flags});`;\n  }\n\n  codeFor_hideDeviceKeyboard () {\n    return `driver.hide_keyboard()`;\n  }\n\n  codeFor_isKeyboardShown () {\n    return `# isKeyboardShown not supported`;\n  }\n\n  codeFor_pushFileToDevice (varNameIgnore, varIndexIgnore, pathToInstallTo, fileContentString) {\n    return `driver.push_file('${pathToInstallTo}', '${fileContentString}');`;\n  }\n\n  codeFor_pullFile (varNameIgnore, varIndexIgnore, pathToPullFrom) {\n    return `file_base64 = self.driver.pull_file('${pathToPullFrom}');`;\n  }\n\n  codeFor_pullFolder (varNameIgnore, varIndexIgnore, folderToPullFrom) {\n    return `file_base64 = self.driver.pull_folder('${folderToPullFrom}');`;\n  }\n\n  codeFor_toggleAirplaneMode () {\n    return `# Not supported: toggleAirplaneMode`;\n  }\n\n  codeFor_toggleData () {\n    return `# Not supported: toggleData`;\n  }\n\n  codeFor_toggleWiFi () {\n    return `# Not supported: toggleWifi`;\n  }\n\n  codeFor_toggleLocationServices () {\n    return `driver.toggle_location_services();`;\n  }\n\n  codeFor_sendSMS () {\n    return `# Not supported: sendSMS`;\n  }\n\n  codeFor_gsmCall () {\n    return `# Not supported: gsmCall`;\n  }\n\n  codeFor_gsmSignal () {\n    return `# Not supported: gsmSignal`;\n  }\n\n  codeFor_gsmVoice () {\n    return `# Not supported: gsmVoice`;\n  }\n\n  codeFor_shake () {\n    return `driver.shake();`;\n  }\n\n  codeFor_lock (varNameIgnore, varIndexIgnore, seconds) {\n    return `driver.lock(${seconds});`;\n  }\n\n  codeFor_unlock () {\n    return `driver.unlock();`;\n  }\n\n  codeFor_isLocked () {\n    return `# Not supported: is device locked`;\n  }\n\n  codeFor_rotateDevice () {\n    return `# Not supported: rotate device`;\n  }\n\n  codeFor_getPerformanceData () {\n    return `# Not supported: getPerformanceData`;\n  }\n\n  codeFor_getSupportedPerformanceDataTypes () {\n    return `# Not supported: getSupportedPerformanceDataTypes`;\n  }\n\n  codeFor_performTouchId (varNameIgnore, varIndexIgnore, match) {\n    return `driver.touch_id(${match})`;\n  }\n\n  codeFor_toggleTouchIdEnrollment (varNameIgnore, varIndexIgnore, enroll) {\n    return `driver.toggle_touch_id_enrollment(${enroll})`;\n  }\n\n  codeFor_openNotifications () {\n    return `driver.open_notifications();`;\n  }\n\n  codeFor_getDeviceTime () {\n    return `time = self.driver.device_time()`;\n  }\n\n  codeFor_fingerprint (varNameIgnore, varIndexIgnore, fingerprintId) {\n    return `driver.finger_print(${fingerprintId})`;\n  }\n\n  codeFor_sessionCapabilities () {\n    return `desired_caps = self.driver.desired_capabilities()`;\n  }\n\n  codeFor_setPageLoadTimeout (varNameIgnore, varIndexIgnore, ms) {\n    return `driver.set_page_load_timeout(${ms})`;\n  }\n\n  codeFor_setAsyncScriptTimeout (varNameIgnore, varIndexIgnore, ms) {\n    return `driver.timeouts('script', ${ms})`;\n  }\n\n  codeFor_setImplicitWaitTimeout (varNameIgnore, varIndexIgnore, ms) {\n    return `driver.timeouts('implicit', ${ms})`;\n  }\n\n  codeFor_getOrientation () {\n    return `orientation = self.driver.orientation()`;\n  }\n\n  codeFor_setOrientation (varNameIgnore, varIndexIgnore, orientation) {\n    return `driver.orientation = \"${orientation}\"`;\n  }\n\n  codeFor_getGeoLocation () {\n    return `location = self.driver.location()`;\n  }\n\n  codeFor_setGeoLocation (varNameIgnore, varIndexIgnore, latitude, longitude, altitude) {\n    return `driver.set_location(${latitude}, ${longitude}, ${altitude})`;\n  }\n\n  codeFor_logTypes () {\n    return `log_types = driver.log_types();`;\n  }\n\n  codeFor_log (varNameIgnore, varIndexIgnore, logType) {\n    return `logs = driver.get_log('${logType}');`;\n  }\n\n  codeFor_updateSettings (varNameIgnore, varIndexIgnore, settingsJson) {\n    return `driver.update_settings(${settingsJson}))`;\n  }\n\n  codeFor_settings () {\n    return `settings = driver.get_settings`;\n  }\n}\n\nPythonFramework.readableName = 'Python';\n\nexport default PythonFramework;\n","import Framework from './framework';\nimport _ from 'lodash';\n\nclass RubyFramework extends Framework {\n\n  get language () {\n    return 'ruby';\n  }\n\n  wrapWithBoilerplate (code) {\n    let capStr = Object.keys(this.caps).map((k) => {\n      return `caps[${JSON.stringify(k)}] = ${JSON.stringify(this.caps[k])}`;\n    }).join('\\n');\n    return `# This sample code uses the Appium ruby client\n# gem install appium_lib\n# Then you can paste this into a file and simply run with Ruby\n\nrequire 'rubygems'\nrequire 'appium_lib'\n\ncaps = {}\n${capStr}\nopts = {\n    sauce_username: nil,\n    server_url: \"${this.serverUrl}\"\n}\ndriver = Appium::Driver.new({caps: caps, appium_lib: opts}).start_driver\n\n${code}\ndriver.quit`;\n  }\n\n  codeFor_findAndAssign (strategy, locator, localVar, isArray) {\n    let suffixMap = {\n      xpath: ':xpath',\n      'accessibility id': ':accessibility_id',\n      'id': ':id',\n      'name': ':name',\n      'class name': ':class_name',\n      '-android uiautomator': ':uiautomation',\n      '-android datamatcher': ':datamatcher',\n      '-ios predicate string': ':predicate',\n      '-ios class chain': ':class_chain',\n    };\n    if (!suffixMap[strategy]) {\n      throw new Error(`Strategy ${strategy} can't be code-gened`);\n    }\n    if (isArray) {\n      return `${localVar} = driver.find_element(${suffixMap[strategy]}, ${JSON.stringify(locator)})`;\n    } else {\n      return `${localVar} = driver.find_elements(${suffixMap[strategy]}, ${JSON.stringify(locator)})`;\n    }\n  }\n\n  codeFor_click (varName, varIndex) {\n    return `${this.getVarName(varName, varIndex)}.click`;\n  }\n\n  codeFor_clear (varName, varIndex) {\n    return `${this.getVarName(varName, varIndex)}.clear`;\n  }\n\n  codeFor_sendKeys (varName, varIndex, text) {\n    return `${this.getVarName(varName, varIndex)}.send_keys ${JSON.stringify(text)}`;\n  }\n\n  codeFor_back () {\n    return `driver.back`;\n  }\n\n  codeFor_tap (varNameIgnore, varIndexIgnore, x, y) {\n    return `TouchAction\n  .new\n  .tap(x: ${x}, y: ${y})\n  .perform\n    `;\n  }\n\n  codeFor_swipe (varNameIgnore, varIndexIgnore, x1, y1, x2, y2) {\n    return `TouchAction\n  .new\n  .press({x: ${x1}, y: ${y1}})\n  .moveTo({x: ${x2}, y: ${y2}})\n  .release\n  .perform\n    `;\n  }\n\n  codeFor_getCurrentActivity () {\n    return `current_activity = driver.current_activity`;\n  }\n\n  codeFor_getCurrentPackage () {\n    return `current_package = driver.current_package`;\n  }\n\n\n  codeFor_installAppOnDevice (varNameIgnore, varIndexIgnore, app) {\n    return `driver.app_installed?('${app}')`;\n  }\n\n  codeFor_isAppInstalledOnDevice (varNameIgnore, varIndexIgnore, app) {\n    return `is_app_installed = driver.isAppInstalled(\"${app}\");`;\n  }\n\n  codeFor_launchApp () {\n    return `driver.launch_app`;\n  }\n\n  codeFor_backgroundApp (varNameIgnore, varIndexIgnore, timeout) {\n    return `driver.background_app(${timeout})`;\n  }\n\n  codeFor_closeApp () {\n    return `driver.close_app`;\n  }\n\n  codeFor_resetApp () {\n    return `driver.reset`;\n  }\n\n  codeFor_removeAppFromDevice (varNameIgnore, varIndexIgnore, app) {\n    return `driver.remove_app('${app}')`;\n  }\n\n  codeFor_getAppStrings (varNameIgnore, varIndexIgnore, language, stringFile) {\n    return `driver.app_strings(${language ? `${language}, ` : ''}${stringFile ? `\"${stringFile}` : ''})`;\n  }\n\n  codeFor_getClipboard () {\n    return `clipboard_text = driver.get_clipboard`;\n  }\n\n  codeFor_setClipboard (varNameIgnore, varIndexIgnore, clipboardText) {\n    return `driver.set_clipboard content: '${clipboardText}'`;\n  }\n\n  codeFor_pressKeycode (varNameIgnore, varIndexIgnore, keyCode, metaState, flags) {\n    return `driver.press_keycode(${keyCode}, ${metaState}, ${flags})`;\n  }\n\n  codeFor_longPressKeycode (varNameIgnore, varIndexIgnore, keyCode, metaState, flags) {\n    return `driver.long_press_keycode(${keyCode}, ${metaState}, ${flags})`;\n  }\n\n  codeFor_hideDeviceKeyboard () {\n    return `driver.hide_keyboard`;\n  }\n\n  codeFor_isKeyboardShown () {\n    return `is_keyboard_shown = driver.is_keyboard_shown`;\n  }\n\n  codeFor_pushFileToDevice (varNameIgnore, varIndexIgnore, pathToInstallTo, fileContentString) {\n    return `driver.push_file('${pathToInstallTo}', '${fileContentString}')`;\n  }\n\n  codeFor_pullFile (varNameIgnore, varIndexIgnore, pathToPullFrom) {\n    return `driver.pull_file('${pathToPullFrom}')`;\n  }\n\n  codeFor_pullFolder (varNameIgnore, varIndexIgnore, folderToPullFrom) {\n    return `driver.pull_folder('${folderToPullFrom}')`;\n  }\n\n  codeFor_toggleAirplaneMode () {\n    return `driver.toggle_flight_mode`;\n  }\n\n  codeFor_toggleData () {\n    return `driver.toggle_data`;\n  }\n\n  codeFor_toggleWiFi () {\n    return `driver.toggle_wifi`;\n  }\n\n  codeFor_toggleLocationServices () {\n    return `driver.toggle_location_services`;\n  }\n\n  codeFor_sendSMS (varNameIgnore, varIndexIgnore, phoneNumber, text) {\n    return `driver.send_sms(phone_number: '${phoneNumber}', message: '${text}')`;\n  }\n\n  codeFor_gsmCall (varNameIgnore, varIndexIgnore, phoneNumber, action) {\n    return `driver.gsm_call(phone_number: '${phoneNumber}', action: :${action})`;\n  }\n\n  codeFor_gsmSignal (varNameIgnore, varIndexIgnore, signalStrength) {\n    return `driver.gsm_signal :${signalStrength}`;\n  }\n\n  codeFor_gsmVoice (varNameIgnore, varIndexIgnore, state) {\n    return `driver.gsm_voice :${state}`;\n  }\n\n  codeFor_shake () {\n    return `driver.shake`;\n  }\n\n  codeFor_lock (varNameIgnore, varIndexIgnore, seconds) {\n    return `driver.lock(${seconds})`;\n  }\n\n  codeFor_unlock () {\n    return `driver.unlock`;\n  }\n\n  codeFor_isLocked () {\n    return `is_device_locked = driver.device_locked?`;\n  }\n\n  codeFor_rotateDevice () {\n    return `# Not supported: rotateDevice`;\n  }\n\n  codeFor_getPerformanceData (varNameIgnore, varIndexIgnore, packageName, dataType, dataReadTimeout) {\n    return `performance_data = driver.get_performance_data package_name: '${packageName}', data_type: '${dataType}', data_read_timeout: ${dataReadTimeout}`;\n  }\n\n  codeFor_getSupportedPerformanceDataTypes () {\n    return `performance_data = driver.get_performance_data_types`;\n  }\n\n  codeFor_performTouchId (varNameIgnore, varIndexIgnore, match) {\n    return `driver.touch_id ${match}`;\n  }\n\n  codeFor_toggleTouchIdEnrollment (varNameIgnore, varIndexIgnore, enroll) {\n    return `driver.toggle_touch_id_enrollment ${enroll}`;\n  }\n\n  codeFor_openNotifications () {\n    return `driver.open_notifications`;\n  }\n\n  codeFor_getDeviceTime () {\n    return `device_time = driver.device_time`;\n  }\n\n  codeFor_fingerprint (varNameIgnore, varIndexIgnore, fingerprintId) {\n    return `driver.finger_print ${fingerprintId}`;\n  }\n\n  codeFor_sessionCapabilities () {\n    return `session_capabilities = driver.session_capabilities`;\n  }\n\n  codeFor_setPageLoadTimeout (varNameIgnore, varIndexIgnore, ms) {\n    return `driver.timeout('pageLoad', ${ms})`;\n  }\n\n  codeFor_setAsyncScriptTimeout (varNameIgnore, varIndexIgnore, ms) {\n    return `driver.timeout('script', ${ms})`;\n  }\n\n  codeFor_setImplicitWaitTimeout (varNameIgnore, varIndexIgnore, ms) {\n    return `driver.timeout('implicit', ${ms})`;\n  }\n\n  codeFor_getOrientation () {\n    return `orientation = driver.orientation`;\n  }\n\n  codeFor_setOrientation (varNameIgnore, varIndexIgnore, orientation) {\n    return `driver.rotation = :${orientation}`;\n  }\n\n  codeFor_getGeoLocation () {\n    return `geo_location = driver.location`;\n  }\n\n  codeFor_setGeoLocation (varNameIgnore, varIndexIgnore, latitude, longitude, altitude) {\n    return `driver.set_location(${latitude}, ${longitude}, ${altitude})`;\n  }\n\n  codeFor_logTypes () {\n    return `log_types = driver.logs.available_types`;\n  }\n\n  codeFor_log (varNameIgnore, varIndexIgnore, logType) {\n    return `driver.logs.get '${logType}'`;\n  }\n\n  codeFor_updateSettings (varNameIgnore, varIndexIgnore, settingsJson) {\n    try {\n      let settings = '';\n      for (let [settingName, settingValue] of _.toPairs(JSON.parse(settingsJson))) {\n        settings += `driver.update_settings(${settingName}: '${settingValue}')\\n`;\n      }\n      return settings;\n    } catch (e) {\n      return `// Could not parse: ${settingsJson}`;\n    }\n  }\n\n  codeFor_settings () {\n    return `settings = driver.get_settings`;\n  }\n}\n\nRubyFramework.readableName = 'Ruby';\n\nexport default RubyFramework;\n","/* eslint no-useless-escape: 0 */\n\nimport Framework from './framework';\n\nclass RobotFramework extends Framework {\n\n  get language () {\n    //TODO: Make https://highlightjs.org/ use robot syntax\n    return 'python';\n  }\n\n  get getCapsVariables () {\n    return Object.keys(this.caps).map((k) => {\n      return `\\$\\{${k}\\}    ${this.getPythonVal(this.caps[k])}`;\n    }).join('\\n');\n  }\n\n  getPythonVal (jsonVal) {\n    if (typeof jsonVal === 'boolean') {\n      return jsonVal ? 'True' : 'False';\n    }\n    return jsonVal;\n  }\n\n  wrapWithBoilerplate (code) {\n    return `# This sample code uses the Appium robot client\n# pip install robotframework-appiumlibrary\n# Then you can paste this into a file and simply run with robot\n#\n#  more keywords on: http://serhatbolsu.github.io/robotframework-appiumlibrary/AppiumLibrary.html\n\n*** Settings ***\nLibrary           AppiumLibrary\n\n*** Variables ***\n$\\{REMOTE_URL\\}   ${this.serverUrl}\n${this.getCapsVariables}\n\n*** Test Cases ***\nTest case name\n${this.indent(this.getApplicationInitialization(), 4)}\n${this.indent(code, 4)}\n\n*** Test Teardown ***\n    Quit Application\n\n*** Suite Teardown ***\n    Close Application`;\n  }\n\n  codeFor_findAndAssign (strategy, locator/*, localVar, isArray*/) {\n    let suffixMap = {\n      xpath: 'xpath',\n      'accessibility id': 'accessibility_id',\n      'id': 'id',\n      'name': 'name', // TODO: How does Python use name selector\n      'class name': 'class_name',\n      '-android uiautomator': 'unsupported',\n      '-android datamatcher': 'unsupported',\n      '-ios predicate string': 'ios_predicate',\n      '-ios class chain': 'ios_uiautomation', // TODO: Could not find iOS UIAutomation\n    };\n    if (!suffixMap[strategy]) {\n      throw new Error(`Strategy ${strategy} can't be code-gened`);\n    }\n    //TODO: in the robot case, we need the ID on the codeFor_ for execution\n    this.lastID = `${strategy}=${locator}`;\n    return `# ${this.lastID}`;\n  }\n\n  getApplicationInitialization () {\n    let varString = Object.keys(this.caps).map((k) => {\n      return `${k}=\\$\\{${k}\\}`;\n    }).join('  ');\n    return `Open Application    \\$\\{REMOTE_URL\\}   ${varString}`;\n  }\n\n  codeFor_click (/*varName, varIndex*/) {\n    return `Click Element    ${this.lastID}`;\n  }\n\n  codeFor_clear (/*varName, varIndex*/) {\n    return `Clear Text    ${this.lastID}`;\n  }\n\n  codeFor_sendKeys (varName, varIndex, text) {\n    return `Input Text    ${this.lastID}    ${text}`;\n  }\n\n  codeFor_back () {\n    return `Go Back`;\n  }\n\n  codeFor_tap (varNameIgnore, varIndexIgnore, x, y) {\n    return `Tap    ${this.lastID}    ${x}    ${y}`;\n  }\n\n  codeFor_swipe (varNameIgnore, varIndexIgnore, x1, y1, x2, y2) {\n    return `Swipe    ${x1}    ${y1}    ${x2}    ${y2}`;\n  }\n\n  // TODO: Add these robot framework commands\n  codeFor_getCurrentActivity () {\n    return '';\n  }\n\n  codeFor_getCurrentPackage () {\n    return '';\n  }\n\n  codeFor_installAppOnDevice () {\n    return ``;\n  }\n\n  codeFor_isAppInstalledOnDevice () {\n    return ``;\n  }\n\n  codeFor_launchApp () {\n    return ``;\n  }\n\n  codeFor_backgroundApp () {\n    return ``;\n  }\n\n  codeFor_closeApp () {\n    return ``;\n  }\n\n  codeFor_resetApp () {\n    return ``;\n  }\n\n  codeFor_removeAppFromDevice () {\n    return ``;\n  }\n\n  codeFor_getAppStrings () {\n    return ``;\n  }\n\n  codeFor_getClipboard () {\n    return ``;\n  }\n\n  codeFor_setClipboard () {\n    return ``;\n  }\n\n  codeFor_pressKeycode () {\n    return ``;\n  }\n\n  codeFor_longPressKeycode () {\n    return ``;\n  }\n\n  codeFor_hideDeviceKeyboard () {\n    return ``;\n  }\n\n  codeFor_isKeyboardShown () {\n    return ``;\n  }\n\n  codeFor_pushFileToDevice () {\n    return ``;\n  }\n\n  codeFor_pullFile () {\n    return ``;\n  }\n\n  codeFor_pullFolder () {\n    return ``;\n  }\n\n  codeFor_toggleAirplaneMode () {\n    return ``;\n  }\n\n  codeFor_toggleData () {\n    return ``;\n  }\n\n  codeFor_toggleWiFi () {\n    return ``;\n  }\n\n  codeFor_toggleLocationServices () {\n    return ``;\n  }\n\n  codeFor_sendSMS () {\n    return ``;\n  }\n\n  codeFor_gsmCall () {\n    return ``;\n  }\n\n  codeFor_gsmSignal () {\n    return ``;\n  }\n\n  codeFor_gsmVoice () {\n    return ``;\n  }\n\n  codeFor_shake () {\n    return ``;\n  }\n\n  codeFor_lock () {\n    return ``;\n  }\n\n  codeFor_unlock () {\n    return ``;\n  }\n\n  codeFor_isLocked () {\n    return ``;\n  }\n\n  codeFor_rotateDevice () {\n    return ``;\n  }\n\n  codeFor_getPerformanceData () {\n    return ``;\n  }\n\n  codeFor_getSupportedPerformanceDataTypes () {\n    return ``;\n  }\n\n  codeFor_performTouchId () {\n    return ``;\n  }\n\n  codeFor_toggleTouchIdEnrollment () {\n    return ``;\n  }\n\n  codeFor_openNotifications () {\n    return ``;\n  }\n\n  codeFor_getDeviceTime () {\n    return ``;\n  }\n\n  codeFor_fingerprint () {\n    return ``;\n  }\n\n  codeFor_sessionCapabilities () {\n    return ``;\n  }\n\n  codeFor_setPageLoadTimeout () {\n    return ``;\n  }\n\n  codeFor_setAsyncScriptTimeout () {\n    return ``;\n  }\n\n  codeFor_setImplicitWaitTimeout () {\n    return ``;\n  }\n\n  codeFor_setCommandTimeout () {\n    return ``;\n  }\n\n  codeFor_getOrientation () {\n    return ``;\n  }\n\n  codeFor_setOrientation () {\n    return ``;\n  }\n\n  codeFor_getGeoLocation () {\n    return ``;\n  }\n\n  codeFor_setGeoLocation () {\n    return ``;\n  }\n\n  codeFor_logTypes () {\n    return ``;\n  }\n\n  codeFor_log () {\n    return ``;\n  }\n\n  codeFor_updateSettings () {\n    return ``;\n  }\n\n  codeFor_settings () {\n    return ``;\n  }\n}\n\nRobotFramework.readableName = 'Robot Framework';\n\nexport default RobotFramework;\n","import JsWdFramework from './js-wd';\nimport JsWdIoFramework from './js-wdio';\nimport JavaFramework from './java';\nimport PythonFramework from './python';\nimport RubyFramework from './ruby';\nimport RobotFramework from './robot';\n\nconst frameworks = {\n  jsWd: JsWdFramework,\n  jsWdIo: JsWdIoFramework,\n  java: JavaFramework,\n  python: PythonFramework,\n  ruby: RubyFramework,\n  robot: RobotFramework,\n};\n\nexport default frameworks;\n","import { ipcRenderer } from 'electron';\nimport { notification } from 'antd';\nimport { push } from 'connected-react-router';\nimport _ from 'lodash';\nimport B from 'bluebird';\nimport { getLocators } from '../components/Inspector/shared';\nimport { showError } from './Session';\nimport { bindClient, unbindClient, callClientMethod } from './shared';\nimport { getOptimalXPath } from '../util';\nimport frameworks from '../lib/client-frameworks';\nimport settings from '../../shared/settings';\nimport i18n from '../../configs/i18next.config.renderer';\n\nexport const SET_SESSION_DETAILS = 'SET_SESSION_DETAILS';\nexport const SET_SOURCE_AND_SCREENSHOT = 'SET_SOURCE_AND_SCREENSHOT';\nexport const SESSION_DONE = 'SESSION_DONE';\nexport const SELECT_ELEMENT = 'SELECT_ELEMENT';\nexport const UNSELECT_ELEMENT = 'UNSELECT_ELEMENT';\nexport const SET_SELECTED_ELEMENT_ID = 'SET_SELECTED_ELEMENT_ID';\nexport const SET_INTERACTIONS_NOT_AVAILABLE = 'SET_INTERACTIONS_NOT_AVAILABLE';\nexport const METHOD_CALL_REQUESTED = 'METHOD_CALL_REQUESTED';\nexport const METHOD_CALL_DONE = 'METHOD_CALL_DONE';\nexport const SET_FIELD_VALUE = 'SET_FIELD_VALUE';\nexport const SET_EXPANDED_PATHS = 'SET_EXPANDED_PATHS';\nexport const SELECT_HOVERED_ELEMENT = 'SELECT_HOVERED_ELEMENT';\nexport const UNSELECT_HOVERED_ELEMENT = 'UNSELECT_HOVERED_ELEMENT';\nexport const SHOW_SEND_KEYS_MODAL = 'SHOW_SEND_KEYS_MODAL';\nexport const HIDE_SEND_KEYS_MODAL = 'HIDE_SEND_KEYS_MODAL';\nexport const QUIT_SESSION_REQUESTED = 'QUIT_SESSION_REQUESTED';\nexport const QUIT_SESSION_DONE = 'QUIT_SESSION_DONE';\n\nexport const START_RECORDING = 'START_RECORDING';\nexport const PAUSE_RECORDING = 'PAUSE_RECORDING';\nexport const CLEAR_RECORDING = 'CLEAR_RECORDING';\nexport const CLOSE_RECORDER = 'CLOSE_RECORDER';\nexport const SET_ACTION_FRAMEWORK = 'SET_ACTION_FRAMEWORK';\nexport const SAVED_FRAMEWORK = 'SAVED_FRAMEWORK';\nexport const RECORD_ACTION = 'RECORD_ACTION';\nexport const SET_SHOW_BOILERPLATE = 'SET_SHOW_BOILERPLATE';\n\nexport const SHOW_LOCATOR_TEST_MODAL = 'SHOW_LOCATOR_TEST_MODAL';\nexport const HIDE_LOCATOR_TEST_MODAL = 'HIDE_LOCATOR_TEST_MODAL';\nexport const SET_LOCATOR_TEST_STRATEGY = 'SET_LOCATOR_TEST_STRATEGY';\nexport const SET_LOCATOR_TEST_VALUE = 'SET_LOCATOR_TEST_VALUE';\nexport const SEARCHING_FOR_ELEMENTS = 'SEARCHING_FOR_ELEMENTS';\nexport const SEARCHING_FOR_ELEMENTS_COMPLETED = 'SEARCHING_FOR_ELEMENTS_COMPLETED';\nexport const SET_LOCATOR_TEST_ELEMENT = 'SET_LOCATOR_TEST_ELEMENT';\nexport const CLEAR_SEARCH_RESULTS = 'CLEAR_SEARCH_RESULTS';\nexport const ADD_ASSIGNED_VAR_CACHE = 'ADD_ASSIGNED_VAR_CACHE';\nexport const CLEAR_ASSIGNED_VAR_CACHE = 'CLEAR_ASSIGNED_VAR_CACHE';\nexport const SET_SCREENSHOT_INTERACTION_MODE = 'SET_SCREENSHOT_INTERACTION_MODE';\nexport const SET_SEARCHED_FOR_ELEMENT_BOUNDS = 'SET_SEARCHED_FOR_ELEMENT_BOUNDS';\nexport const CLEAR_SEARCHED_FOR_ELEMENT_BOUNDS = 'CLEAR_SEARCHED_FOR_ELEMENT_BOUNDS';\n\nexport const SET_SWIPE_START = 'SET_SWIPE_START';\nexport const SET_SWIPE_END = 'SET_SWIPE_END';\nexport const CLEAR_SWIPE_ACTION = 'CLEAR_SWIPE_ACTION';\nexport const PROMPT_KEEP_ALIVE = 'PROMPT_KEEP_ALIVE';\nexport const HIDE_PROMPT_KEEP_ALIVE = 'HIDE_PROMPT_KEEP_ALIVE';\n\nexport const SELECT_INTERACTION_MODE = 'SELECT_INTERACTION_MODE';\n\nexport const SELECT_ACTION_GROUP = 'SELECT_ACTION_GROUP';\nexport const SELECT_SUB_ACTION_GROUP = 'SELECT_SUB_ACTION_GROUP';\n\nexport const ENTERING_ACTION_ARGS = 'ENTERING_ACTION_ARGS';\nexport const REMOVE_ACTION = 'REMOVE_ACTION';\nexport const SET_ACTION_ARG = 'SET_ACTION_ARG';\n\n\n// Attributes on nodes that we know are unique to the node\nconst uniqueAttributes = [\n  'name',\n  'content-desc',\n  'id',\n  'accessibility-id',\n];\n\n/**\n * Translates sourceXML to JSON\n */\nfunction xmlToJSON (source) {\n  let xmlDoc;\n\n  // Replace strings with Unicode format &#012345 with #012345\n  // The &# unicode format breaks the parser\n  source = source.replace(/&#([0-9]{4,})/g, '#$1');\n\n  let recursive = (xmlNode, parentPath, index) => {\n\n    // Translate attributes array to an object\n    let attrObject = {};\n    for (let attribute of xmlNode.attributes || []) {\n      attrObject[attribute.name] = attribute.value;\n    }\n\n    // Dot Separated path of indices\n    let path = (index !== undefined) && `${!parentPath ? '' : parentPath + '.'}${index}`;\n\n    return {\n      children: [...xmlNode.children].map((childNode, childIndex) => recursive(childNode, path, childIndex)),\n      tagName: xmlNode.tagName,\n      attributes: attrObject,\n      xpath: getOptimalXPath(xmlDoc, xmlNode, uniqueAttributes),\n      path,\n    };\n  };\n  xmlDoc = (new DOMParser()).parseFromString(source, 'application/xml');\n  let sourceXML = xmlDoc.children[0];\n  return recursive(sourceXML);\n}\n\n\nexport function bindAppium () {\n  return (dispatch) => {\n    // Listen for session response messages from 'main'\n    bindClient();\n\n    // If user is inactive ask if they wish to keep session alive\n    ipcRenderer.on('appium-prompt-keep-alive', () => {\n      promptKeepAlive()(dispatch);\n    });\n\n    // When session is done, unbind them all\n    ipcRenderer.on('appium-session-done', (evt, {reason, killedByUser}) => {\n      ipcRenderer.removeAllListeners('appium-session-done');\n      ipcRenderer.removeAllListeners('appium-prompt-keep-alive');\n      unbindClient();\n      dispatch({type: QUIT_SESSION_DONE});\n      dispatch(push('/session'));\n      if (!killedByUser) {\n        notification.error({\n          message: 'Error',\n          description: reason || i18n.t('Session has been terminated'),\n          duration: 0\n        });\n      }\n    });\n  };\n}\n\n// A debounced function that calls findElement and gets info about the element\nconst findElement = _.debounce(async function (strategyMap, dispatch, getState, path) {\n  for (let [strategy, selector] of strategyMap) {\n    // Get the information about the element\n    let {elementId, variableName, variableType} = await callClientMethod({\n      strategy,\n      selector,\n    });\n\n    // Set the elementId, variableName and variableType for the selected element\n    // (check first that the selectedElementPath didn't change, to avoid race conditions)\n    if (elementId && getState().inspector.selectedElementPath === path) {\n      return dispatch({type: SET_SELECTED_ELEMENT_ID, elementId, variableName, variableType});\n    }\n  }\n\n  return dispatch({type: SET_INTERACTIONS_NOT_AVAILABLE});\n}, 1000);\n\nexport function selectElement (path) {\n  return async (dispatch, getState) => {\n    // Set the selected element in the source tree\n    dispatch({type: SELECT_ELEMENT, path});\n    const state = getState().inspector;\n    const {attributes: selectedElementAttributes, xpath: selectedElementXPath} = state.selectedElement;\n    const {sourceXML} = state;\n\n    // Expand all of this element's ancestors so that it's visible in the source tree\n    let {expandedPaths} = getState().inspector;\n    let pathArr = path.split('.').slice(0, path.length - 1);\n    while (pathArr.length > 1) {\n      pathArr.splice(pathArr.length - 1);\n      let path = pathArr.join('.');\n      if (expandedPaths.indexOf(path) < 0) {\n        expandedPaths.push(path);\n      }\n    }\n    dispatch({type: SET_EXPANDED_PATHS, paths: expandedPaths});\n\n\n    // Find the optimal selection strategy. If none found, fall back to XPath.\n    const strategyMap = _.toPairs(getLocators(selectedElementAttributes, sourceXML));\n    strategyMap.push(['xpath', selectedElementXPath]);\n\n    // Debounce find element so that if another element is selected shortly after, cancel the previous search\n    await findElement(strategyMap, dispatch, getState, path);\n  };\n}\n\nexport function unselectElement () {\n  return (dispatch) => {\n    dispatch({type: UNSELECT_ELEMENT});\n  };\n}\n\nexport function selectHoveredElement (path) {\n  return (dispatch) => {\n    dispatch({type: SELECT_HOVERED_ELEMENT, path});\n  };\n}\n\nexport function unselectHoveredElement (path) {\n  return (dispatch) => {\n    dispatch({type: UNSELECT_HOVERED_ELEMENT, path});\n  };\n}\n\n/**\n * Requests a method call on appium\n */\nexport function applyClientMethod (params) {\n  return async (dispatch, getState) => {\n    const isRecording = params.methodName !== 'quit' &&\n                      params.methodName !== 'source' &&\n                      getState().inspector.isRecording;\n    try {\n      dispatch({type: METHOD_CALL_REQUESTED});\n      const {source, screenshot, windowSize, result, sourceError,\n             screenshotError, windowSizeError, variableName,\n             variableIndex, strategy, selector} = await callClientMethod(params);\n\n      if (isRecording) {\n        // Add 'findAndAssign' line of code. Don't do it for arrays though. Arrays already have 'find' expression\n        if (strategy && selector && !variableIndex && variableIndex !== 0) {\n          findAndAssign(strategy, selector, variableName, false)(dispatch, getState);\n        }\n\n        // now record the actual action\n        let args = [variableName, variableIndex];\n        args = args.concat(params.args || []);\n        dispatch({type: RECORD_ACTION, action: params.methodName, params: args });\n      }\n      dispatch({type: METHOD_CALL_DONE});\n\n      if (source && screenshot) {\n        dispatch({\n          type: SET_SOURCE_AND_SCREENSHOT,\n          source: source && xmlToJSON(source),\n          sourceXML: source,\n          screenshot,\n          windowSize,\n          sourceError,\n          screenshotError,\n          windowSizeError,\n        });\n      }\n      return result;\n    } catch (error) {\n      let methodName = params.methodName === 'click' ? 'tap' : params.methodName;\n      showError(error, methodName, 10);\n      dispatch({type: METHOD_CALL_DONE});\n    }\n  };\n}\n\nexport function addAssignedVarCache (varName) {\n  return (dispatch) => {\n    dispatch({type: ADD_ASSIGNED_VAR_CACHE, varName});\n  };\n}\n\nexport function showSendKeysModal () {\n  return (dispatch) => {\n    dispatch({type: SHOW_SEND_KEYS_MODAL});\n  };\n}\n\nexport function hideSendKeysModal () {\n  return (dispatch) => {\n    dispatch({type: HIDE_SEND_KEYS_MODAL});\n  };\n}\n\n/**\n * Set a value of an arbitrarily named field\n */\nexport function setFieldValue (name, value) {\n  return (dispatch) => {\n    dispatch({type: SET_FIELD_VALUE, name, value});\n  };\n}\n\nexport function setExpandedPaths (paths) {\n  return (dispatch) => {\n    dispatch({type: SET_EXPANDED_PATHS, paths});\n  };\n}\n\n/**\n * Quit the session and go back to the new session window\n */\nexport function quitSession () {\n  return async (dispatch) => {\n    await applyClientMethod({methodName: 'quit'})(dispatch);\n  };\n}\n\nexport function startRecording () {\n  return (dispatch) => {\n    dispatch({type: START_RECORDING});\n  };\n}\n\nexport function pauseRecording () {\n  return (dispatch) => {\n    dispatch({type: PAUSE_RECORDING});\n  };\n}\n\nexport function clearRecording () {\n  return (dispatch) => {\n    dispatch({type: CLEAR_RECORDING});\n    ipcRenderer.send('appium-restart-recorder'); // Tell the main thread to start the variable count from 1\n    dispatch({type: CLEAR_ASSIGNED_VAR_CACHE}); // Get rid of the variable cache\n  };\n}\n\nexport function getSavedActionFramework () {\n  return async (dispatch) => {\n    let framework = await settings.get(SAVED_FRAMEWORK);\n    dispatch({type: SET_ACTION_FRAMEWORK, framework});\n  };\n}\n\nexport function setActionFramework (framework) {\n  return async (dispatch) => {\n    if (!frameworks[framework]) {\n      throw new Error(i18n.t('frameworkNotSupported', {framework}));\n    }\n    await settings.set(SAVED_FRAMEWORK, framework);\n    dispatch({type: SET_ACTION_FRAMEWORK, framework});\n  };\n}\n\nexport function recordAction (action, params) {\n  return (dispatch) => {\n    dispatch({type: RECORD_ACTION, action, params});\n  };\n}\n\nexport function closeRecorder () {\n  return (dispatch) => {\n    dispatch({type: CLOSE_RECORDER});\n  };\n}\n\nexport function toggleShowBoilerplate () {\n  return (dispatch, getState) => {\n    const show = !getState().inspector.showBoilerplate;\n    dispatch({type: SET_SHOW_BOILERPLATE, show});\n  };\n}\n\nexport function setSessionDetails (sessionDetails) {\n  return (dispatch) => {\n    dispatch({type: SET_SESSION_DETAILS, sessionDetails});\n  };\n}\n\nexport function showLocatorTestModal () {\n  return (dispatch) => {\n    dispatch({type: SHOW_LOCATOR_TEST_MODAL});\n  };\n}\n\nexport function hideLocatorTestModal () {\n  return (dispatch) => {\n    dispatch({type: HIDE_LOCATOR_TEST_MODAL});\n    dispatch({type: CLEAR_SEARCHED_FOR_ELEMENT_BOUNDS});\n  };\n}\n\nexport function setLocatorTestValue (locatorTestValue) {\n  return (dispatch) => {\n    dispatch({type: SET_LOCATOR_TEST_VALUE, locatorTestValue});\n  };\n}\n\nexport function setLocatorTestStrategy (locatorTestStrategy) {\n  return (dispatch) => {\n    dispatch({type: SET_LOCATOR_TEST_STRATEGY, locatorTestStrategy});\n  };\n}\n\nexport function searchForElement (strategy, selector) {\n  return async (dispatch, getState) => {\n    dispatch({type: SEARCHING_FOR_ELEMENTS});\n    try {\n      let {elements, variableName} = await callClientMethod({strategy, selector, fetchArray: true});\n      findAndAssign(strategy, selector, variableName, true)(dispatch, getState);\n      elements = elements.map((el) => el.id);\n      dispatch({type: SEARCHING_FOR_ELEMENTS_COMPLETED, elements});\n    } catch (error) {\n      dispatch({type: SEARCHING_FOR_ELEMENTS_COMPLETED});\n      showError(error, 10);\n    }\n  };\n}\n\nexport function findAndAssign (strategy, selector, variableName, isArray) {\n  return (dispatch, getState) => {\n    const {assignedVarCache} = getState().inspector;\n\n    // If this call to 'findAndAssign' for this variable wasn't done already, do it now\n    if (!assignedVarCache[variableName]) {\n      dispatch({type: RECORD_ACTION, action: 'findAndAssign', params: [strategy, selector, variableName, isArray]});\n      dispatch({type: ADD_ASSIGNED_VAR_CACHE, varName: variableName});\n    }\n  };\n}\n\nexport function setLocatorTestElement (elementId) {\n  return async (dispatch) => {\n    dispatch({type: SET_LOCATOR_TEST_ELEMENT, elementId});\n    dispatch({type: CLEAR_SEARCHED_FOR_ELEMENT_BOUNDS});\n    if (elementId) {\n      try {\n        const [location, size] = await (B.all([\n          callClientMethod({methodName: 'getLocation', args: [elementId], skipScreenshotAndSource: true, skipRecord: true, ignoreResult: true}),\n          callClientMethod({methodName: 'getSize', args: [elementId], skipScreenshotAndSource: true, skipRecord: true, ignoreResult: true}),\n        ]));\n        dispatch({type: SET_SEARCHED_FOR_ELEMENT_BOUNDS, location: location.res, size: size.res});\n      } catch (ign) { }\n    }\n  };\n}\n\nexport function clearSearchResults () {\n  return (dispatch) => {\n    dispatch({type: CLEAR_SEARCH_RESULTS});\n  };\n}\n\nexport function selectScreenshotInteractionMode (screenshotInteractionMode) {\n  return (dispatch) => {\n    dispatch({type: SET_SCREENSHOT_INTERACTION_MODE, screenshotInteractionMode });\n  };\n}\n\nexport function setSwipeStart (swipeStartX, swipeStartY) {\n  return (dispatch) => {\n    dispatch({type: SET_SWIPE_START, swipeStartX, swipeStartY});\n  };\n}\n\nexport function setSwipeEnd (swipeEndX, swipeEndY) {\n  return (dispatch) => {\n    dispatch({type: SET_SWIPE_END, swipeEndX, swipeEndY});\n  };\n}\n\nexport function clearSwipeAction () {\n  return (dispatch) => {\n    dispatch({type: CLEAR_SWIPE_ACTION});\n  };\n}\n\nexport function promptKeepAlive () {\n  return (dispatch) => {\n    dispatch({type: PROMPT_KEEP_ALIVE});\n  };\n}\n\nexport function keepSessionAlive () {\n  return (dispatch) => {\n    dispatch({type: HIDE_PROMPT_KEEP_ALIVE});\n    ipcRenderer.send('appium-keep-session-alive');\n  };\n}\n\nexport function selectActionGroup (group) {\n  return (dispatch) => {\n    dispatch({type: SELECT_ACTION_GROUP, group});\n  };\n}\n\nexport function selectSubActionGroup (group) {\n  return (dispatch) => {\n    dispatch({type: SELECT_SUB_ACTION_GROUP, group});\n  };\n}\n\nexport function selectInteractionMode (interaction) {\n  return (dispatch) => {\n    dispatch({type: SELECT_INTERACTION_MODE, interaction});\n  };\n}\n\nexport function startEnteringActionArgs (actionName, action) {\n  return (dispatch) => {\n    dispatch({type: ENTERING_ACTION_ARGS, actionName, action});\n  };\n}\n\nexport function cancelPendingAction () {\n  return (dispatch) => {\n    dispatch({type: REMOVE_ACTION});\n  };\n}\n\nexport function setActionArg (index, value) {\n  return (dispatch) => {\n    dispatch({type: SET_ACTION_ARG, index, value});\n  };\n}\n","import React, { Component } from 'react';\nimport { Form, Input, Radio, Row, Col } from 'antd';\nimport SessionStyles from './Session.css';\n\nconst FormItem = Form.Item;\n\nexport default class ServerTabTestobject extends Component {\n\n  render () {\n\n    const {server, setServerParam, t} = this.props;\n\n    const placeholder = process.env.TESTOBJECT_API_KEY ?\n      t('usingDataFoundIn', {environmentVariable: 'TESTOBJECT_API_KEY'}) : t('testobjectApiKey');\n\n    return <Form>\n      <Row gutter={8}>\n        <Col span={24}>\n          <FormItem>\n            <Input id='testObjectPassword' type='password' placeholder={placeholder} addonBefore={t('TestObject API Key')} value={server.testobject.apiKey} onChange={(e) => setServerParam('apiKey', e.target.value)} />\n          </FormItem>\n        </Col>\n      </Row>\n      <Row gutter={8}>\n        <Col span={24}>\n          <FormItem>\n            <div className={['ant-input-group-addon', SessionStyles.addonDataCenter].join(' ') }>{t('TestObject Data Center')}</div>\n            <Radio.Group className={SessionStyles.inputDataCenter} buttonStyle=\"solid\" defaultValue='us1' id='testObjectDataCenter' value={server.testobject.dataCenter} onChange={(e) => setServerParam('dataCenter', e.target.value)}>\n              <Radio value='us1'>{t('US')}</Radio>\n              <Radio value='eu1'>{t('EU')}</Radio>\n            </Radio.Group>\n          </FormItem>\n        </Col>\n      </Row>\n    </Form>;\n  }\n}\n","import React, { Component } from 'react';\nimport { Form, Row, Col, Input } from 'antd';\nimport SessionStyles from './Session.css';\n\nconst FormItem = Form.Item;\n\nexport default class ServerTabHeadspin extends Component {\n\n  render () {\n\n    const {server, setServerParam, t} = this.props;\n\n    const headspinUrl = 'https://xxxx.headspin.io:4723/v0/your-api-token/wd/hub';\n    return <Form>\n      <Row gutter={8}>\n        <Col span={24}>\n          <FormItem>\n            <Input className={SessionStyles.customServerInputLeft} id='headspinServerHost' placeholder={headspinUrl} addonBefore={t('serverTabHeasdpinWebDriverURL')}\n              value={server.headspin.webDriverUrl} onChange={(e) => setServerParam('webDriverUrl', e.target.value)} />\n            <p className={SessionStyles.localDesc}>{t('sessionHeadspinWebDriverURLDescription')}</p>\n          </FormItem>\n        </Col>\n      </Row>\n    </Form>;\n  }\n}\n","import React, { Component } from 'react';\nimport { Form, Input, Row, Col } from 'antd';\n\nconst FormItem = Form.Item;\n\nexport default class ServerTabBrowserstack extends Component {\n\n  render () {\n\n    const {server, setServerParam, t} = this.props;\n\n    const browserstackUsernamePlaceholder = process.env.BROWSERSTACK_USERNAME ?\n      t('usingDataFoundIn', {environmentVariable: 'BROWSERSTACK_USERNAME'}) : t('yourUsername');\n\n    const browserstackAccessKeyPlaceholder = process.env.BROWSERSTACK_ACCESS_KEY ?\n      t('usingDataFoundIn', {environmentVariable: 'BROWSERSTACK_ACCESS_KEY'}) : t('yourAccessKey');\n\n    return <Form>\n      <Row gutter={8}>\n        <Col span={12}>\n          <FormItem>\n            <Input id='browserstackUsername' placeholder={browserstackUsernamePlaceholder} addonBefore={t('BrowserStack Username')} value={server.browserstack.username}\n              onChange={(e) => setServerParam('username', e.target.value)} />\n          </FormItem>\n        </Col>\n      </Row>\n      <Row gutter={8}>\n        <Col span={12}>\n          <FormItem>\n            <Input id='browserstackPassword' type='password' placeholder={browserstackAccessKeyPlaceholder} addonBefore={t('BrowserStack Access Key')}\n              value={server.browserstack.accessKey} onChange={(e) => setServerParam('accessKey', e.target.value)} />\n          </FormItem>\n        </Col>\n      </Row>\n    </Form>;\n  }\n}\n","import React, { Component } from 'react';\nimport { Form, Input, Row, Col } from 'antd';\n\nconst FormItem = Form.Item;\n\nexport default class ServerTabBitbar extends Component {\n\n  render () {\n    const { server, setServerParam, t } = this.props;\n\n    const bitbarApiKeyPlaceholder = process.env.BITBAR_API_KEY ?\n      t('usingDataFoundIn', {environmentVariable: 'BITBAR_API_KEY'}) : t('yourApiKey');\n\n    return <Form>\n      <Row gutter={8}>\n        <Col span={12}>\n          <FormItem>\n            <Input id='bitbarApiKey' type='password' placeholder={bitbarApiKeyPlaceholder} addonBefore={t('Bitbar API Key')}\n              value={server.bitbar.apiKey} onChange={(e) => setServerParam('apiKey', e.target.value)} />\n          </FormItem>\n        </Col>\n      </Row>\n    </Form>;\n  }\n}\n","import React, { Component } from 'react';\nimport { Form, Input, Row, Col } from 'antd';\n\nconst FormItem = Form.Item;\n\nexport default class ServerTabKobiton extends Component {\n\n  render () {\n    const {server, setServerParam, t} = this.props;\n    const kobitonUsernamePlaceholder = process.env.KOBITON_USERNAME ?\n      t('usingDataFoundIn', {environmentVariable: 'KOBITON_USERNAME'}) : t('yourUsername');\n\n    const kobitonAccessKeyPlaceholder = process.env.KOBITON_ACCESS_KEY ?\n      t('usingDataFoundIn', {environmentVariable: 'KOBITON_ACCESS_KEY'}) : t('yourAccessKey');\n\n    return <Form>\n      <Row gutter={8}>\n        <Col span={12}>\n          <FormItem>\n            <Input id='kobitonUsername' placeholder={kobitonUsernamePlaceholder} addonBefore={t('Kobiton Username')} value={server.kobiton.username}\n              onChange={(e) => setServerParam('username', e.target.value)} />\n          </FormItem>\n        </Col>\n      </Row>\n      <Row gutter={8}>\n        <Col span={12}>\n          <FormItem>\n            <Input id='kobitonAccessKey' type='password' placeholder={kobitonAccessKeyPlaceholder} addonBefore={t('Kobiton Access Key')} value={server.kobiton.accessKey} onChange={(e) => setServerParam('accessKey', e.target.value)} />\n          </FormItem>\n        </Col>\n      </Row>\n    </Form>;\n  }\n}\n","import React, { Component } from 'react';\nimport { Form, Row, Col, Input } from 'antd';\nimport SessionStyles from './Session.css';\n\nconst FormItem = Form.Item;\n\nexport default class ServerTabPerfecto extends Component {\n\n  render () {\n\n    const {server, setServerParam, t} = this.props;\n\n    const cloudPerfectoUrl = 'cloud.Perfectomobile.com';\n\n    const perfectoTokenPlaceholder = process.env.PERFECTO_TOKEN ?\n      t('usingDataFoundIn', {environmentVariable: 'PERFECTO_TOKEN'}) : t('Add your token');\n\n    return <Form>\n      <Row gutter={8}>\n        <Col span={12}>\n          <FormItem>\n            <Input className={SessionStyles.customServerInputLeft} id='PerfectoServerHost' placeholder={cloudPerfectoUrl} addonBefore={t('Perfecto Host')}\n              value={server.perfecto.hostname} onChange={(e) => setServerParam('hostname', e.target.value)} />\n          </FormItem>\n        </Col>\n        <Col span={12}>\n          <FormItem>\n            <Input id='PerfectoPort' placeholder={80} addonBefore={t('Perfecto Port')} value={server.perfecto.port}\n              onChange={(e) => setServerParam('port', e.target.value)} />\n          </FormItem>\n        </Col>\n        <Col span={24}>\n          <FormItem>\n            <Input id='token' placeholder={perfectoTokenPlaceholder} addonBefore={t('Perfecto Token')} value={server.perfecto.token} onChange={(e) => setServerParam('token', e.target.value)} />\n          </FormItem>\n        </Col>\n      </Row>\n    </Form>;\n  }\n}\n","import React, { Component } from 'react';\nimport { Form, Row, Col, Input } from 'antd';\nimport SessionStyles from './Session.css';\n\nconst FormItem = Form.Item;\n\nexport default class ServerTabPcloudy extends Component {\n\n  render () {\n\n    const {server, setServerParam, t} = this.props;\n\n    const pcloudyUsernamePlaceholder = 'username@pcloudy.com';\n    const pcloudyHostPlaceholder = 'cloud.pcloudy.com';\n    const pcloudyAccessKeyExample = 'kjdgtdwn65fdasd78uy6y';\n\n    return <Form>\n      <Row gutter={8}>\n        <Col span={12}>\n          <FormItem>\n            <Input className={SessionStyles.customServerInputLeft} id='PcloudyServerHost' placeholder={pcloudyHostPlaceholder} addonBefore={t('Pcloudy Host')}\n              value={server.pcloudy.hostname} onChange={(e) => setServerParam('hostname', e.target.value)} />\n          </FormItem>\n        </Col>\n      </Row>\n      <Row gutter={8}>\n        <Col span={12}>\n          <FormItem>\n            <Input id='username' type='text' placeholder={pcloudyUsernamePlaceholder} addonBefore={t('Pcloudy User Name')} value={server.pcloudy.username} onChange={(e) => setServerParam('username', e.target.value)} />\n          </FormItem>\n        </Col>\n        <Col span={12}>\n          <FormItem>\n            <Input id='accessKey' type='password' placeholder={pcloudyAccessKeyExample} addonBefore={t('Pcloudy API Key')}\n              value={server.pcloudy.accessKey} onChange={(e) => setServerParam('accessKey', e.target.value)} />\n          </FormItem>\n        </Col>\n      </Row>\n    </Form>;\n  }\n}\n","import React, { Component } from 'react';\nimport { Form, Row, Col, Input, Checkbox, Radio } from 'antd';\nimport SessionStyles from './Session.css';\nconst FormItem = Form.Item;\n\nexport default class ServerTabSauce extends Component {\n\n  render () {\n\n    const {server, setServerParam, t} = this.props;\n\n    const sauceUsernamePlaceholder = process.env.SAUCE_USERNAME ?\n      t('usingDataFoundIn', {environmentVariable: 'SAUCE_USERNAME'}) : t('yourUsername');\n\n    const sauceAccessKeyPlaceholder = process.env.SAUCE_ACCESS_KEY ?\n      t('usingDataFoundIn', {environmentVariable: 'SAUCE_ACCESS_KEY'}) : t('yourAccessKey');\n\n    return <Form>\n      <Row gutter={8}>\n        <Col span={12}>\n          <FormItem>\n            <Input id='sauceUsername' placeholder={sauceUsernamePlaceholder} addonBefore={t('Sauce Username')} value={server.sauce.username} onChange={(e) => setServerParam('username', e.target.value)} />\n          </FormItem>\n        </Col>\n        <Col span={12}>\n          <FormItem>\n            <Input id='saucePassword' type='password' placeholder={sauceAccessKeyPlaceholder}\n              addonBefore={t('Sauce Access Key')} value={server.sauce.accessKey} onChange={(e) => setServerParam('accessKey', e.target.value)} />\n          </FormItem>\n        </Col>\n      </Row>\n      <Row gutter={8}>\n        <Col span={24}>\n          <FormItem>\n            <div className={['ant-input-group-addon', SessionStyles.addonDataCenter].join(' ') }>{t('SauceLabs Data Center')}</div>\n            <Radio.Group className={SessionStyles.inputDataCenter} buttonStyle=\"solid\" defaultValue='us-west-1' id='sauceObjectDataCenter' value={server.sauce.dataCenter} onChange={(e) => setServerParam('dataCenter', e.target.value)}>\n              <Radio value='us-west-1'>{t('US')}</Radio>\n              <Radio value='eu-central-1'>{t('EU')}</Radio>\n            </Radio.Group>\n          </FormItem>\n        </Col>\n      </Row>\n      <Row gutter={8}>\n        <Col span={10}>\n          <FormItem>\n            <Checkbox checked={!!server.sauce.useSCProxy} onChange={(e) => setServerParam('useSCProxy', e.target.checked)}> {t('proxyThroughSC')}</Checkbox>\n          </FormItem>\n        </Col>\n        <Col span={6}>\n          <FormItem>\n            <Input addonBefore={t('Host')} placeholder={t('localhost')} disabled={!server.sauce.useSCProxy} value={server.sauce.scHost} onChange={(e) => setServerParam('scHost', e.target.value)}/>\n          </FormItem>\n        </Col>\n        <Col span={6}>\n          <FormItem>\n            <Input addonBefore={t('Port')} placeholder={4445} disabled={!server.sauce.useSCProxy} value={server.sauce.scPort} onChange={(e) => setServerParam('scPort', e.target.value)} />\n          </FormItem>\n        </Col>\n      </Row>\n    </Form>;\n  }\n}\n\n","import React, { Component } from 'react';\nimport { Form, Input, Row, Col } from 'antd';\n\nconst FormItem = Form.Item;\n\nexport default class ServerTabTestingbot extends Component {\n\n  render () {\n\n    const {server, setServerParam, t} = this.props;\n\n    const testingbotKeyPlaceholder = process.env.TB_KEY ?\n      t('usingDataFoundIn', {environmentVariable: 'TB_KEY'}) : t('yourUsername');\n\n    const testingbotSecretPlaceholder = process.env.TB_SECRET ?\n      t('usingDataFoundIn', {environmentVariable: 'TB_SECRET'}) : t('yourAccessKey');\n\n    return <Form>\n      <Row gutter={8}>\n        <Col span={12}>\n          <FormItem>\n            <Input id='testingbotKey' placeholder={testingbotKeyPlaceholder} addonBefore={t('TestingBot Key')} value={server.testingbot.key} onChange={(e) => setServerParam('key', e.target.value)} />\n          </FormItem>\n        </Col>\n      </Row>\n      <Row gutter={8}>\n        <Col span={12}>\n          <FormItem>\n            <Input id='testingbotSecret' type='password' placeholder={testingbotSecretPlaceholder} addonBefore={t('TestingBot Secret')} value={server.testingbot.secret} onChange={(e) => setServerParam('secret', e.target.value)} />\n          </FormItem>\n        </Col>\n      </Row>\n    </Form>;\n  }\n}\n","import React from 'react';\nimport ServerTabTestobject from './ServerTabTestobject';\nimport ServerTabHeadspin from './ServerTabHeadspin';\nimport ServerTabBrowserstack from './ServerTabBrowserstack';\nimport ServerTabBitbar from './ServerTabBitbar';\nimport ServerTabKobiton from './ServerTabKobiton';\nimport ServerTabPerfecto from './ServerTabPerfecto';\nimport ServerTabPcloudy from './ServerTabPcloudy';\nimport ServerTabSauce from './ServerTabSauce';\nimport ServerTabTestingbot from './ServerTabTestingbot';\n\nimport SessionStyles from './Session.css';\n\n// ParcelJS handles image loading by exporting a path to the image\nimport SauceLogo from '../../images/sauce_logo.svg';\nimport TestObjectLogo from '../../images/testobject_logo.svg';\nimport HeadSpinLogo from '../../images/headspin_logo.svg';\nimport BrowserStackLogo from '../../images/browserstack_logo.svg';\nimport BitBarLogo from '../../images/bitbar_logo.svg';\nimport KobitonLogo from '../../images/kobiton_logo.svg';\nimport PerfectoLogo from '../../images/perfecto_logo.png';\nimport PcloudyLogo from '../../images/pcloudy_logo.svg';\nimport TestingBotLogo from '../../images/testingbot_logo.svg';\n\nconst CloudProviders = {\n  sauce: {\n    tabhead: () => <span className={SessionStyles.tabText}><img src={SauceLogo} /></span>,\n    tab: props => <ServerTabSauce {...props} />,\n    logo: SauceLogo,\n  },\n  testobject: {\n    tabhead: () => <span className={SessionStyles.tabText}><img src={TestObjectLogo} /></span>,\n    tab: props => <ServerTabTestobject {...props} />,\n    logo: TestObjectLogo,\n  },\n  headspin: {\n    tabhead: () => <span className={SessionStyles.tabText}><img src={HeadSpinLogo} /></span>,\n    tab: props => <ServerTabHeadspin {...props} />,\n    logo: HeadSpinLogo,\n  },\n  browserstack: {\n    tabhead: () => <span className={SessionStyles.tabText}><img src={BrowserStackLogo} /></span>,\n    tab: props => <ServerTabBrowserstack {...props} />,\n    logo: BrowserStackLogo,\n  },\n  bitbar: {\n    tabhead: () => <span className={SessionStyles.tabText}><img src={BitBarLogo} /></span>,\n    tab: props => <ServerTabBitbar {...props} />,\n    logo: BitBarLogo,\n  },\n  kobiton: {\n    tabhead: () => <span className={SessionStyles.tabText}><img src={KobitonLogo} /></span>,\n    tab: props => <ServerTabKobiton {...props} />,\n    logo: KobitonLogo,\n  },\n  perfecto: {\n    tabhead: () => <span className={SessionStyles.tabText}><img src={PerfectoLogo} /></span>,\n    tab: props => <ServerTabPerfecto {...props} />,\n    logo: PerfectoLogo,\n  },\n  pcloudy: {\n    tabhead: () => <span className={SessionStyles.tabText}><img src={PcloudyLogo} /></span>,\n    tab: props => <ServerTabPcloudy {...props} />,\n    logo: PcloudyLogo,\n  },\n  testingbot: {\n    tabhead: () => <span className={SessionStyles.tabText}><img src={TestingBotLogo} /></span>,\n    tab: props => <ServerTabTestingbot {...props} />,\n    logo: TestingBotLogo,\n  },\n};\n\nexport default CloudProviders;","import { ipcRenderer } from 'electron';\nimport settings from '../../shared/settings';\nimport { v4 as UUID } from 'uuid';\nimport url from 'url';\nimport { push } from 'connected-react-router';\nimport { notification } from 'antd';\nimport { debounce, toPairs, union, without, keys } from 'lodash';\nimport { setSessionDetails } from './Inspector';\nimport i18n from '../../configs/i18next.config.renderer';\nimport CloudProviders from '../components/Session/CloudProviders';\n\nexport const NEW_SESSION_REQUESTED = 'NEW_SESSION_REQUESTED';\nexport const NEW_SESSION_BEGAN = 'NEW_SESSION_BEGAN';\nexport const NEW_SESSION_DONE = 'NEW_SESSION_DONE';\nexport const CHANGE_CAPABILITY = 'CHANGE_CAPABILITY';\nexport const SAVE_SESSION_REQUESTED = 'SAVE_SESSION_REQUESTED';\nexport const SAVE_SESSION_DONE = 'SAVE_SESSION_DONE';\nexport const GET_SAVED_SESSIONS_REQUESTED = 'GET_SAVED_SESSIONS_REQUESTED';\nexport const GET_SAVED_SESSIONS_DONE = 'GET_SAVED_SESSIONS_DONE';\nexport const SET_CAPABILITY_PARAM = 'SET_CAPABILITY_PARAM';\nexport const ADD_CAPABILITY = 'ADD_CAPABILITY';\nexport const REMOVE_CAPABILITY = 'REMOVE_CAPABILITY';\nexport const SWITCHED_TABS = 'SWITCHED_TABS';\nexport const SET_CAPS = 'SET_CAPS';\nexport const SAVE_AS_MODAL_REQUESTED = 'SAVE_AS_MODAL_REQUESTED';\nexport const HIDE_SAVE_AS_MODAL_REQUESTED = 'HIDE_SAVE_AS_MODAL_REQUESTED';\nexport const SET_SAVE_AS_TEXT = 'SET_SAVE_AS_TEXT';\nexport const DELETE_SAVED_SESSION_REQUESTED = 'DELETE_SAVED_SESSION_REQUESTED';\nexport const DELETE_SAVED_SESSION_DONE = 'DELETE_SAVED_SESSION_DONE';\nexport const CHANGE_SERVER_TYPE = 'CHANGE_SERVER_TYPE';\nexport const SET_SERVER_PARAM = 'SET_SERVER_PARAM';\nexport const SET_SERVER = 'SET_SERVER';\nexport const SESSION_LOADING = 'SESSION_LOADING';\nexport const SESSION_LOADING_DONE = 'SESSION_LOADING_DONE';\n\nexport const SAVED_SESSIONS = 'SAVED_SESSIONS';\nexport const SESSION_SERVER_PARAMS = 'SESSION_SERVER_PARAMS';\nexport const SESSION_SERVER_TYPE = 'SESSION_SERVER_TYPE';\nexport const SERVER_ARGS = 'SERVER_ARGS';\nexport const VISIBLE_PROVIDERS = 'VISIBLE_PROVIDERS';\n\nexport const SET_ATTACH_SESS_ID = 'SET_ATTACH_SESS_ID';\n\nexport const GET_SESSIONS_REQUESTED = 'GET_SESSIONS_REQUESTED';\nexport const GET_SESSIONS_DONE = 'GET_SESSIONS_DONE';\n\n\nexport const ENABLE_DESIRED_CAPS_EDITOR = 'ENABLE_DESIRED_CAPS_EDITOR';\nexport const ABORT_DESIRED_CAPS_EDITOR = 'ABORT_DESIRED_CAPS_EDITOR';\nexport const SAVE_RAW_DESIRED_CAPS = 'SAVE_RAW_DESIRED_CAPS';\nexport const SET_RAW_DESIRED_CAPS = 'SET_RAW_DESIRED_CAPS';\nexport const SHOW_DESIRED_CAPS_JSON_ERROR = 'SHOW_DESIRED_CAPS_JSON_ERROR';\n\nexport const IS_ADDING_CLOUD_PROVIDER = 'IS_ADDING_CLOUD_PROVIDER';\n\nexport const SET_PROVIDERS = 'SET_PROVIDERS';\n\nconst serverTypes = {};\nfor (const key of keys(CloudProviders)) {\n  serverTypes[key] = key;\n}\nserverTypes.local = 'local';\nserverTypes.remote = 'remote';\n\nexport const ServerTypes = serverTypes;\n\nconst JSON_TYPES = ['object', 'number', 'boolean'];\n\nexport function getCapsObject (caps) {\n  return Object.assign({}, ...(caps.map((cap) => {\n    if (JSON_TYPES.indexOf(cap.type) !== -1) {\n      try {\n        let obj = JSON.parse(cap.value);\n        return {[cap.name]: obj};\n      } catch (ign) {}\n    }\n    return {[cap.name]: cap.value};\n  })));\n}\n\nexport function showError (e, methodName, secs = 5) {\n  let errMessage;\n  if (e['jsonwire-error'] && e['jsonwire-error'].status === 7) {\n    errMessage = i18n.t('findElementFailure', {methodName});\n  } else if (e.data) {\n    try {\n      e.data = JSON.parse(e.data);\n    } catch (ign) {}\n    if (e.data.value && e.data.value.message) {\n      errMessage = e.data.value.message;\n    } else {\n      errMessage = e.data;\n    }\n  } else if (e.message) {\n    errMessage = e.message;\n  } else if (e.code) {\n    errMessage = e.code;\n  } else {\n    errMessage = i18n.t('Could not start session');\n  }\n  if (errMessage === 'ECONNREFUSED') {\n    errMessage = i18n.t('couldNotConnect');\n  }\n\n  notification.error({\n    message: methodName ? i18n.t('callToMethodFailed', {methodName}) : i18n.t('Error'),\n    description: errMessage,\n    duration: secs\n  });\n\n}\n\n/**\n * Change the caps object and then go back to the new session tab\n */\nexport function setCaps (caps, uuid) {\n  return (dispatch) => {\n    dispatch({type: SET_CAPS, caps, uuid});\n  };\n}\n\n/**\n * Change a single desired capability\n */\nexport function changeCapability (key, value) {\n  return (dispatch) => {\n    dispatch({type: CHANGE_CAPABILITY, key, value});\n  };\n}\n\n/**\n * Push a capability to the list\n */\nexport function addCapability () {\n  return (dispatch) => {\n    dispatch({type: ADD_CAPABILITY});\n  };\n}\n\n/**\n * Update value of a capability parameter\n */\nexport function setCapabilityParam (index, name, value) {\n  return (dispatch) => {\n    dispatch({type: SET_CAPABILITY_PARAM, index, name, value});\n  };\n}\n\n/**\n * Delete a capability from the list\n */\nexport function removeCapability (index) {\n  return (dispatch) => {\n    dispatch({type: REMOVE_CAPABILITY, index});\n  };\n}\n\n/**\n * Start a new appium session with the given caps\n */\nexport function newSession (caps, attachSessId = null) {\n  return async (dispatch, getState) => {\n\n    dispatch({type: NEW_SESSION_REQUESTED, caps});\n\n    let desiredCapabilities = caps ? getCapsObject(caps) : null;\n    let session = getState().session;\n    let host, port, username, accessKey, https, path, token;\n\n    switch (session.serverType) {\n      case ServerTypes.local:\n        host = session.server.local.hostname;\n        if (host === '0.0.0.0') {\n          // if we're on windows, we won't be able to connect directly to '0.0.0.0'\n          // so just connect to localhost; if we're listening on all interfaces,\n          // that will of course include 127.0.0.1 on all platforms\n          host = 'localhost';\n        }\n        port = session.server.local.port;\n        break;\n      case ServerTypes.remote:\n        host = session.server.remote.hostname || '127.0.0.1';\n        port = session.server.remote.port || 4723;\n        path = session.server.remote.path;\n        https = session.server.remote.ssl;\n        break;\n      case ServerTypes.sauce:\n        host = session.server.sauce.dataCenter === 'eu-central-1' ?\n          'ondemand.eu-central-1.saucelabs.com' : 'ondemand.saucelabs.com';\n        port = 80;\n        if (session.server.sauce.useSCProxy) {\n          host = session.server.sauce.scHost || 'localhost';\n          port = parseInt(session.server.sauce.scPort, 10) || 4445;\n        }\n        username = session.server.sauce.username || process.env.SAUCE_USERNAME;\n        accessKey = session.server.sauce.accessKey || process.env.SAUCE_ACCESS_KEY;\n        if (!username || !accessKey) {\n          notification.error({\n            message: i18n.t('Error'),\n            description: i18n.t('sauceCredentialsRequired'),\n            duration: 4\n          });\n          return;\n        }\n        https = false;\n        break;\n      case ServerTypes.testobject:\n        host = process.env.TESTOBJECT_HOST || `${session.server.testobject.dataCenter || 'us1'}.appium.testobject.com`;\n        port = 443;\n        https = true;\n        if (caps) {\n          desiredCapabilities.testobject_api_key = session.server.testobject.apiKey || process.env.TESTOBJECT_API_KEY;\n        }\n        break;\n      case ServerTypes.headspin: {\n        const headspinUrl = url.parse(session.server.headspin.webDriverUrl);\n        host = session.server.headspin.hostname = headspinUrl.hostname;\n        port = session.server.headspin.port = headspinUrl.port;\n        path = session.server.headspin.path = headspinUrl.pathname;\n        https = session.server.headspin.ssl = headspinUrl.protocol === 'https:';\n        break;\n      }\n      case ServerTypes.perfecto:\n        host = session.server.perfecto.hostname;\n        port = session.server.perfecto.port;\n        token = session.server.perfecto.token || process.env.PERFECTO_TOKEN;\n        path = session.server.perfecto.path = '/nexperience/perfectomobile/wd/hub';\n        if (!token) {\n          notification.error({\n            message: i18n.t('Error'),\n            description: i18n.t('Perfecto SecurityToken is required'),\n            duration: 4\n          });\n          return;\n        }\n        desiredCapabilities.securityToken = token;\n        https = session.server.perfecto.ssl = false;\n        break;\n      case ServerTypes.browserstack:\n        host = process.env.BROWSERSTACK_HOST || 'hub-cloud.browserstack.com';\n        port = session.server.browserstack.port = 443;\n        path = session.server.browserstack.path = '/wd/hub';\n        username = session.server.browserstack.username || process.env.BROWSERSTACK_USERNAME;\n        desiredCapabilities['browserstack.source'] = 'appiumdesktop';\n        accessKey = session.server.browserstack.accessKey || process.env.BROWSERSTACK_ACCESS_KEY;\n        if (!username || !accessKey) {\n          notification.error({\n            message: i18n.t('Error'),\n            description: i18n.t('browserstackCredentialsRequired'),\n            duration: 4\n          });\n          return;\n        }\n        https = session.server.browserstack.ssl = true;\n        break;\n      case ServerTypes.bitbar:\n        host = process.env.BITBAR_HOST || 'appium.bitbar.com';\n        port = session.server.bitbar.port = 443;\n        path = session.server.bitbar.path = '/wd/hub';\n        accessKey = session.server.bitbar.apiKey || process.env.BITBAR_API_KEY;\n        if (!accessKey) {\n          notification.error({\n            message: i18n.t('Error'),\n            description: i18n.t('bitbarCredentialsRequired'),\n            duration: 4\n          });\n          return;\n        }\n        desiredCapabilities.testdroid_source = 'appiumdesktop';\n        desiredCapabilities.testdroid_apiKey = accessKey;\n        https = session.server.bitbar.ssl = true;\n        break;\n      case ServerTypes.kobiton:\n        host = process.env.KOBITON_HOST || 'api.kobiton.com';\n        port = session.server.kobiton.port = 443;\n        path = session.server.kobiton.path = '/wd/hub';\n        username = session.server.kobiton.username || process.env.KOBITON_USERNAME;\n        desiredCapabilities['kobiton.source'] = 'appiumdesktop';\n        accessKey = session.server.kobiton.accessKey || process.env.KOBITON_ACCESS_KEY;\n        if (!username || !accessKey) {\n          notification.error({\n            message: i18n.t('Error'),\n            description: i18n.t('kobitonCredentialsRequired'),\n            duration: 4\n          });\n          return;\n        }\n        https = session.server.kobiton.ssl = true;\n        break;\n      case ServerTypes.pcloudy:\n        host = session.server.pcloudy.hostname;\n        port = session.server.pcloudy.port = 443;\n        path = session.server.pcloudy.path = '/objectspy/wd/hub';\n        username = session.server.pcloudy.username || process.env.PCLOUDY_USERNAME;\n        desiredCapabilities.pCloudy_Username = username;\n        accessKey = session.server.pcloudy.accessKey || process.env.PCLOUDY_ACCESS_KEY;\n        desiredCapabilities.pCloudy_ApiKey = accessKey;\n        if (!username || !accessKey) {\n          notification.error({\n            message: 'Error',\n            description: 'PCLOUDY username and api key are required!',\n            duration: 4\n          });\n          return;\n        }\n        https = session.server.pcloudy.ssl = true;\n        break;\n      case ServerTypes.testingbot:\n        host = session.server.testingbot.hostname = process.env.TB_HOST || 'hub.testingbot.com';\n        port = session.server.testingbot.port = 443;\n        username = session.server.testingbot.key || process.env.TB_KEY;\n        accessKey = session.server.testingbot.secret || process.env.TB_SECRET;\n        desiredCapabilities['tb.source'] = 'appiumdesktop';\n        if (!username || !accessKey) {\n          notification.error({\n            message: 'Error',\n            description: i18n.t('testingbotCredentialsRequired'),\n            duration: 4\n          });\n          return;\n        }\n        https = session.server.testingbot.ssl = true;\n        break;\n      default:\n        break;\n    }\n\n    let rejectUnauthorized = !session.server.advanced.allowUnauthorized;\n    let proxy;\n    if (session.server.advanced.useProxy && session.server.advanced.proxy) {\n      proxy = session.server.advanced.proxy;\n    }\n\n    // Start the session\n    ipcRenderer.send('appium-create-new-session', {\n      desiredCapabilities,\n      attachSessId,\n      host,\n      port,\n      path,\n      username,\n      accessKey,\n      https,\n      rejectUnauthorized,\n      proxy,\n    });\n\n    dispatch({type: SESSION_LOADING});\n\n    // If it failed, show an alert saying it failed\n    ipcRenderer.once('appium-new-session-failed', (evt, e) => {\n      dispatch({type: SESSION_LOADING_DONE});\n      removeNewSessionListeners();\n      showError(e, 0);\n    });\n\n    ipcRenderer.once('appium-new-session-ready', () => {\n      dispatch({type: SESSION_LOADING_DONE});\n      // pass some state to the inspector that it needs to build recorder\n      // code boilerplate\n      setSessionDetails({\n        desiredCapabilities,\n        host,\n        port,\n        path,\n        username,\n        accessKey,\n        https,\n      })(dispatch);\n      removeNewSessionListeners();\n      dispatch(push('/inspector'));\n    });\n\n    // Save the current server settings\n    await settings.set(SESSION_SERVER_PARAMS, session.server);\n  };\n}\n\n\n/**\n * Saves the caps\n */\nexport function saveSession (caps, params) {\n  return async (dispatch) => {\n    let {name, uuid} = params;\n    dispatch({type: SAVE_SESSION_REQUESTED});\n    let savedSessions = await settings.get(SAVED_SESSIONS);\n    if (!uuid) {\n\n      // If it's a new session, add it to the list\n      uuid = UUID();\n      let newSavedSession = {\n        date: +(new Date()),\n        name,\n        uuid,\n        caps,\n      };\n      savedSessions.push(newSavedSession);\n    } else {\n\n      // If it's an existing session, overwrite it\n      for (let session of savedSessions) {\n        if (session.uuid === uuid) {\n          session.caps = caps;\n        }\n      }\n    }\n    await settings.set(SAVED_SESSIONS, savedSessions);\n    await getSavedSessions()(dispatch);\n    dispatch({type: SET_CAPS, caps, uuid});\n    dispatch({type: SAVE_SESSION_DONE});\n  };\n}\n\n/**\n * Get the sessions saved by the user\n */\nexport function getSavedSessions () {\n  return async (dispatch) => {\n    dispatch({type: GET_SAVED_SESSIONS_REQUESTED});\n    let savedSessions = await settings.get(SAVED_SESSIONS);\n    dispatch({type: GET_SAVED_SESSIONS_DONE, savedSessions});\n  };\n}\n\n/**\n * Switch to a different tab\n */\nexport function switchTabs (key) {\n  return (dispatch) => {\n    dispatch({type: SWITCHED_TABS, key});\n  };\n}\n\n/**\n * Open a 'Save As' modal\n */\nexport function requestSaveAsModal () {\n  return (dispatch) => {\n    dispatch({type: SAVE_AS_MODAL_REQUESTED});\n  };\n}\n\n/**\n * Hide the 'Save As' modal\n */\nexport function hideSaveAsModal () {\n  return (dispatch) => {\n    dispatch({type: HIDE_SAVE_AS_MODAL_REQUESTED});\n  };\n}\n\n/**\n * Set the text to save capabilities as\n */\nexport function setSaveAsText (saveAsText) {\n  return (dispatch) => {\n    dispatch({type: SET_SAVE_AS_TEXT, saveAsText});\n  };\n}\n\n/**\n * Delete a saved session\n */\nexport function deleteSavedSession (uuid) {\n  return async (dispatch) => {\n    dispatch({type: DELETE_SAVED_SESSION_REQUESTED, uuid});\n    let savedSessions = await settings.get(SAVED_SESSIONS);\n    let newSessions = savedSessions.filter((session) => session.uuid !== uuid);\n    await settings.set(SAVED_SESSIONS, newSessions);\n    dispatch({type: DELETE_SAVED_SESSION_DONE});\n    dispatch({type: GET_SAVED_SESSIONS_DONE, savedSessions: newSessions});\n  };\n}\n\n/**\n * Set the session id to attach to\n */\nexport function setAttachSessId (attachSessId) {\n  return (dispatch) => {\n    dispatch({type: SET_ATTACH_SESS_ID, attachSessId});\n  };\n}\n\n/**\n * Change the server type\n */\nexport function changeServerType (serverType) {\n  return async (dispatch, getState) => {\n    await settings.set(SESSION_SERVER_TYPE, serverType);\n    dispatch({type: CHANGE_SERVER_TYPE, serverType});\n    getRunningSessions()(dispatch, getState);\n  };\n}\n\n/**\n * Set a server parameter (host, port, etc...)\n */\nexport function setServerParam (name, value, serverType) {\n  const debounceGetRunningSessions = debounce(getRunningSessions(), 5000);\n  return async (dispatch, getState) => {\n    serverType = serverType || getState().session.serverType;\n    await settings.set(SESSION_SERVER_TYPE, serverType);\n    dispatch({type: SET_SERVER_PARAM, serverType, name, value});\n    debounceGetRunningSessions(dispatch, getState);\n  };\n}\n\n/**\n * Set the local server hostname and port to whatever was saved in 'actions/StartServer.js' so that it\n * defaults to what the currently running appium server is\n */\nexport function setLocalServerParams () {\n  return async (dispatch, getState) => {\n    let serverArgs = await settings.get(SERVER_ARGS);\n    // Get saved server args from settings and set local server settings to it. If there are no saved args, set local\n    // host and port to undefined\n    if (serverArgs) {\n      dispatch({type: SET_SERVER_PARAM, serverType: ServerTypes.local, name: 'port', value: serverArgs.port});\n      dispatch({type: SET_SERVER_PARAM, serverType: ServerTypes.local, name: 'hostname', value: 'localhost'});\n    } else {\n      dispatch({type: SET_SERVER_PARAM, serverType: ServerTypes.local, name: 'port', value: undefined});\n      dispatch({type: SET_SERVER_PARAM, serverType: ServerTypes.local, name: 'hostname', value: undefined});\n      if (getState().session.serverType === 'local') {\n        await changeServerType('remote')(dispatch, getState);\n      }\n    }\n  };\n}\n\n/**\n * Set the server parameters to whatever they were last saved as.\n * Params are saved whenever there's a new session\n */\nexport function setSavedServerParams () {\n  return async (dispatch, getState) => {\n    let server = await settings.get(SESSION_SERVER_PARAMS);\n    let serverType = await settings.get(SESSION_SERVER_TYPE);\n    let currentProviders = getState().session.visibleProviders;\n\n    if (server) {\n      // if we have a cloud provider as a saved server, but for some reason the\n      // cloud provider is no longer in the list, revert server type to remote\n      if (keys(CloudProviders).includes(serverType) &&\n          !currentProviders.includes(serverType)) {\n        serverType = ServerTypes.remote;\n      }\n      dispatch({type: SET_SERVER, server, serverType});\n    }\n  };\n}\n\nexport function getRunningSessions () {\n  return (dispatch, getState) => {\n    const avoidServerTypes = [\n      'sauce', 'testobject'\n    ];\n    // Get currently running sessions for this server\n    const state = getState().session;\n    const {server, serverType} = state;\n    const serverInfo = server[serverType];\n\n    dispatch({type: GET_SESSIONS_REQUESTED});\n    if (avoidServerTypes.includes(serverType)) {\n      dispatch({type: GET_SESSIONS_DONE});\n    } else {\n      ipcRenderer.send('appium-client-get-sessions', {\n        host: serverInfo.hostname, port: serverInfo.port, path: serverInfo.path, ssl: serverInfo.ssl\n      });\n      ipcRenderer.once('appium-client-get-sessions-response', (evt, e) => {\n        const res = JSON.parse(e.res);\n        dispatch({type: GET_SESSIONS_DONE, sessions: res.value});\n        removeRunningSessionsListeners();\n      });\n      ipcRenderer.once('appium-client-get-sessions-fail', () => {\n        dispatch({type: GET_SESSIONS_DONE});\n        removeRunningSessionsListeners();\n      });\n    }\n  };\n}\n\nexport function startDesiredCapsEditor () {\n  return (dispatch) => {\n    dispatch({type: ENABLE_DESIRED_CAPS_EDITOR});\n  };\n}\n\nexport function abortDesiredCapsEditor () {\n  return (dispatch) => {\n    dispatch({type: ABORT_DESIRED_CAPS_EDITOR});\n  };\n}\n\nexport function saveRawDesiredCaps () {\n  return (dispatch, getState) => {\n    const state = getState().session;\n    const {rawDesiredCaps, caps: capsArray} = state;\n    try {\n      const newCaps = JSON.parse(rawDesiredCaps);\n\n      // Transform the current caps array to an object\n      let caps = {};\n      for (let {type, name, value} of capsArray) {\n        caps[name] = {type, value};\n      }\n\n      // Translate the caps JSON to array format\n      let newCapsArray = toPairs(newCaps).map(([name, value]) => ({\n        type: (() => {\n          let type = typeof value;\n\n          // If we already have this cap and it's file type, keep the type the same\n          if (caps[name] && caps[name].type === 'file' && type === 'string') {\n            return 'file';\n          } else if (type === 'string') {\n            return 'text';\n          } else {\n            return type;\n          }\n        })(),\n        name,\n        value,\n      }));\n      dispatch({type: SAVE_RAW_DESIRED_CAPS, caps: newCapsArray});\n    } catch (e) {\n      dispatch({type: SHOW_DESIRED_CAPS_JSON_ERROR, message: e.message});\n    }\n  };\n}\n\nexport function setRawDesiredCaps (rawDesiredCaps) {\n  return (dispatch, getState) => {\n    const state = getState().session;\n    let isValidCapsJson = true;\n    let invalidCapsJsonReason;\n    if (state.isValidatingCapsJson) {\n      try {\n        JSON.parse(rawDesiredCaps);\n      } catch (e) {\n        isValidCapsJson = false;\n        invalidCapsJsonReason = e.message;\n      }\n    }\n    dispatch({type: SET_RAW_DESIRED_CAPS, rawDesiredCaps, isValidCapsJson, invalidCapsJsonReason});\n  };\n}\n\nfunction removeNewSessionListeners () {\n  ipcRenderer.removeAllListeners('appium-new-session-failed');\n  ipcRenderer.removeAllListeners('appium-new-session-ready');\n}\n\nfunction removeRunningSessionsListeners () {\n  ipcRenderer.removeAllListeners('appium-client-get-sessions-fail');\n  ipcRenderer.removeAllListeners('appium-client-get-sessions-response');\n}\n\nexport function addCloudProvider () {\n  return (dispatch) => {\n    dispatch({type: IS_ADDING_CLOUD_PROVIDER, isAddingProvider: true});\n  };\n}\n\nexport function stopAddCloudProvider () {\n  return (dispatch) => {\n    dispatch({type: IS_ADDING_CLOUD_PROVIDER, isAddingProvider: false});\n  };\n}\n\nexport function addVisibleProvider (provider) {\n  return async (dispatch, getState) => {\n    let currentProviders = getState().session.visibleProviders;\n    const providers = union(currentProviders, [provider]);\n    await settings.set(VISIBLE_PROVIDERS, providers);\n    dispatch({type: SET_PROVIDERS, providers});\n  };\n}\n\nexport function removeVisibleProvider (provider) {\n  return async (dispatch, getState) => {\n    let currentProviders = getState().session.visibleProviders;\n    const providers = without(currentProviders, provider);\n    await settings.set(VISIBLE_PROVIDERS, providers);\n    dispatch({type: SET_PROVIDERS, providers});\n  };\n}\n\nexport function setVisibleProviders () {\n  return async (dispatch) => {\n    const providers = await settings.get(VISIBLE_PROVIDERS);\n    dispatch({type: SET_PROVIDERS, providers});\n  };\n}\n","import settings from 'electron-settings';\nimport { PRESETS } from '../renderer/actions/StartServer';\nimport { SAVED_SESSIONS, SERVER_ARGS, SESSION_SERVER_PARAMS,\n         SESSION_SERVER_TYPE } from '../renderer/actions/Session';\nimport { SAVED_FRAMEWORK } from '../renderer/actions/Inspector';\n\n// set default persistent settings\n// do it here because settings are kind of like state!\nsettings.defaults({\n  [PRESETS]: {},\n  [SAVED_SESSIONS]: [],\n  [SERVER_ARGS]: null,\n  [SESSION_SERVER_PARAMS]: null,\n  [SESSION_SERVER_TYPE]: null,\n  [SAVED_FRAMEWORK]: 'java',\n});\n\nexport default settings;\n","import i18n from 'i18next';\nimport i18nextBackend from 'i18next-node-fs-backend';\nimport config from './app.config';\nimport path from 'path';\nimport settings from '../shared/settings';\n\nconst i18nextOptions = {\n  backend: {\n    loadPath: path.join(__dirname, 'locales/{{lng}}/{{ns}}.json'),\n    addPath: path.join(__dirname, 'locales/{{lng}}/{{ns}}.json'),\n    jsonIndent: 2,\n  },\n  // debug: true,\n  // saveMissing: true,\n  interpolation: {\n    escapeValue: false\n  },\n  lng: settings && settings.getSync('PREFERRED_LANGUAGE', 'en') || 'en',\n  fallbackLng: config.fallbackLng,\n  whitelist: config.languages,\n  react: {\n    wait: false\n  }\n};\n\nif (!i18n.isInitialized) {\n  i18n\n    .use(i18nextBackend)\n    .init(i18nextOptions);\n}\n\nexport default i18n;\n","import Bluebird from 'bluebird';\nimport wd from 'wd';\nimport log from 'electron-log';\nimport _ from 'lodash';\nimport { SCREENSHOT_INTERACTION_MODE } from '../renderer/components/Inspector/shared';\n\nconst isDevelopment = process.env.NODE_ENV === 'development';\n\nconst KEEP_ALIVE_PING_INTERVAL = 5 * 1000;\nconst NO_NEW_COMMAND_LIMIT = isDevelopment ? 30 * 1000 : 24 * 60 * 60 * 1000; // Set timeout to 24 hours\nconst WAIT_FOR_USER_KEEP_ALIVE = 60 * 60 * 1000; // Give user 1 hour to reply\n\nexport default class AppiumMethodHandler {\n  constructor (driver, sender) {\n    this.driver = driver;\n    this.sender = sender;\n    this.elementCache = {};\n    this.elVariableCounter = 1;\n    this.elArrayVariableCounter = 1;\n    this._lastActiveMoment = +(new Date());\n  }\n\n  /**\n   * Ping server every 30 seconds to prevent `newCommandTimeout` from killing session\n   */\n  runKeepAliveLoop () {\n    this.keepAlive = setInterval(() => {\n      this.driver.sessionCapabilities(); // Pings the Appium server to keep it alive\n      const now = +(new Date());\n\n      // If the new command limit has been surpassed, prompt user if they want to keep session going\n      // Give them 30 seconds to respond\n      if (now - this._lastActiveMoment > NO_NEW_COMMAND_LIMIT) {\n        this.sender.send('appium-prompt-keep-alive');\n\n        // After the time limit kill the session (this timeout will be killed if they keep it alive)\n        this.waitForUserTimeout = setTimeout(() => {\n          this.close('Session closed due to inactivity');\n        }, WAIT_FOR_USER_KEEP_ALIVE);\n      }\n    }, KEEP_ALIVE_PING_INTERVAL);\n  }\n\n  /**\n   * Get rid of the intervals to keep the session alive\n   */\n  killKeepAliveLoop () {\n    clearInterval(this.keepAlive);\n    if (this.waitForUserTimeout) {\n      clearTimeout(this.waitForUserTimeout);\n    }\n  }\n\n  /**\n   * Reset the new command clock and kill the wait for user timeout\n   */\n  keepSessionAlive () {\n    this._lastActiveMoment = +(new Date());\n    if (this.waitForUserTimeout) {\n      clearTimeout(this.waitForUserTimeout);\n    }\n  }\n\n  async fetchElement (strategy, selector) {\n    let element = await this.driver.elementOrNull(strategy, selector);\n    if (element === null) {\n      return {};\n    }\n    let id = element.value;\n\n    // Cache this ID along with its variable name, variable type and strategy/selector\n    let cachedEl = this.elementCache[id] = {\n      el: element,\n      variableType: 'string',\n      strategy,\n      selector,\n      id,\n    };\n\n    return {\n      ...cachedEl,\n      strategy,\n      selector,\n      id,\n    };\n  }\n\n  async fetchElements (strategy, selector) {\n    let els = await this.driver.elements(strategy, selector);\n\n    let variableName = `els${this.elArrayVariableCounter++}`;\n    let variableType = 'array';\n\n    // Cache the elements that we find\n    let elements = els.map((el, index) => {\n      const res = {\n        el,\n        variableName,\n        variableIndex: index,\n        variableType: 'string',\n        id: el.value,\n        strategy,\n        selector,\n      };\n      this.elementCache[el.value] = res;\n      return res;\n    });\n\n    return {variableName, variableType, strategy, selector, elements};\n  }\n\n  async _execute ({elementId, methodName, args, skipScreenshotAndSource}) {\n    this._lastActiveMoment = +(new Date());\n    let cachedEl;\n    let res = {};\n    if (!_.isArray(args)) {\n      args = [args];\n    }\n\n    if (elementId) {\n      // Give the cached element a variable name (el1, el2, el3,...) the first time it's used\n      cachedEl = this.elementCache[elementId];\n      if (!cachedEl.variableName && cachedEl.variableType === 'string') {\n        cachedEl.variableName = `el${this.elVariableCounter++}`;\n      }\n      res = await cachedEl.el[methodName].apply(cachedEl.el, args);\n    } else {\n      // Specially handle the tap and swipe method\n      if (methodName === SCREENSHOT_INTERACTION_MODE.TAP) {\n        res = await (new wd.TouchAction(this.driver))\n          .tap({x: args[0], y: args[1]})\n          .perform();\n      } else if (methodName === SCREENSHOT_INTERACTION_MODE.SWIPE) {\n        const [startX, startY, endX, endY] = args;\n        res = await (new wd.TouchAction(this.driver))\n          .press({x: startX, y: startY})\n          .moveTo({x: endX, y: endY})\n          .release()\n          .perform();\n      } else if (methodName !== 'source' && methodName !== 'screenshot') {\n        res = await this.driver[methodName].apply(this.driver, args);\n      }\n    }\n\n    // Give the source/screenshot time to change before taking the screenshot\n    await Bluebird.delay(500);\n\n    let sourceAndScreenshot;\n    if (!skipScreenshotAndSource) {\n      sourceAndScreenshot = await this._getSourceAndScreenshot();\n    }\n\n    return {\n      ...sourceAndScreenshot,\n      ...cachedEl,\n      res,\n    };\n  }\n\n  async executeElementCommand (elementId, methodName, args = [], skipScreenshotAndSource = false) {\n    return await this._execute({elementId, methodName, args, skipScreenshotAndSource});\n  }\n\n  async executeMethod (methodName, args = [], skipScreenshotAndSource = false) {\n    return await this._execute({methodName, args, skipScreenshotAndSource});\n  }\n\n  async _getSourceAndScreenshot () {\n\n    /* eslint-disable promise/catch-or-return */\n    return await new Bluebird((resolve) => {\n      let res = {};\n\n      // Resolve when we have source/sourceError, screenshot/screenshotError and windowSize/windowSizeError\n      // NOTE: Couldn't use Promise.all here because Promise.all fails when it encounters just one error. In this\n      // case we need it to finish all of the promises and get either the response or the error for each\n      const checkShouldResolve = () => {\n        if (\n          (res.source || res.sourceError) &&\n          (res.screenshot || res.screenshotError) &&\n          (res.windowSize || res.windowSizeError)\n        ) {\n          resolve(res);\n        }\n      };\n\n      this.driver.source()\n        .then((source) => (res.source = source) && checkShouldResolve())\n        .catch((sourceError) => (res.sourceError = sourceError) && checkShouldResolve());\n\n      this.driver.takeScreenshot()\n        .then((screenshot) => (res.screenshot = screenshot) && checkShouldResolve())\n        .catch((screenshotError) => (res.screenshotError = screenshotError) && checkShouldResolve());\n\n      this.driver.getWindowSize()\n        .then((windowSize) => (res.windowSize = windowSize) && checkShouldResolve())\n        .catch((windowSizeError) => (res.windowSizeError = windowSizeError) && checkShouldResolve());\n    });\n    /* eslint-enable promise/catch-or-return */\n  }\n\n  restart () {\n    // Clear the variable names and start over (el1, el2, els1, els2, etc...)\n    for (const elCache of Object.values(this.elementCache)) {\n      delete elCache.variableName;\n    }\n\n    // Restart the variable counter\n    this.elVariableCounter = 1;\n    this.elArrayVariableCounter = 1;\n  }\n\n  async close (reason, killedByUser = false) {\n    this.killKeepAliveLoop();\n    this.sender.send('appium-session-done', {reason, killedByUser});\n    if (!this.driver._isAttachedSession) {\n      try {\n        await this.driver.quit();\n      } catch (ign) { }\n    }\n  }\n}\n\nexport function createSession (driver, sender, winId) {\n  const {appiumHandlers} = AppiumMethodHandler;\n  log.info(`Creating method handler for session with window id: ${winId}`);\n  const handler = AppiumMethodHandler.appiumHandlers[winId] = new AppiumMethodHandler(driver, sender);\n  log.info(`The following session window ID's have active sessions: '${JSON.stringify(_.keys(appiumHandlers))}'`);\n  return handler;\n}\n\nexport function killSession (winId, killedByUser) {\n  const {appiumHandlers} = AppiumMethodHandler;\n  const handler = appiumHandlers[winId];\n  delete AppiumMethodHandler.appiumHandlers[winId];\n  log.info(`Killing session for window with id: ${winId}`);\n\n  if (handler) {\n    handler.close('', killedByUser);\n  }\n\n  log.info(`Deleted session for window with id: ${winId}`);\n  log.info(`The following session window ID's have active sessions: '${JSON.stringify(_.keys(appiumHandlers))}'`);\n}\n\nexport function getSessionHandler (winId) {\n  log.info(`Retrieving session for window with id: ${winId}`);\n  const {appiumHandlers} = AppiumMethodHandler;\n  const handler = appiumHandlers[winId];\n  if (handler) {\n    return handler;\n  } else {\n    log.error(`Could not find session with window id '${winId}'. Availalable sessions are: '${JSON.stringify(_.keys(appiumHandlers))}'`);\n    return false;\n  }\n}\n\nAppiumMethodHandler.appiumHandlers = {};\n","const baseFeedUrl = `https://hazel-server-pxufsrwofl.now.sh`;\n\nexport function getFeedUrl (version) {\n  let platform = process.platform;\n  if (platform.toLowerCase() === 'linux') {\n    platform = 'AppImage';\n  }\n  return `${baseFeedUrl}/update/${platform}/${version}`;\n}\n\n\nexport default {\n  baseFeedUrl,\n  getFeedUrl,\n};","import request from 'request-promise';\nimport { getFeedUrl } from './config';\n\nexport async function checkUpdate (currentVersion) {\n  try {\n    const res = await request.get(getFeedUrl(currentVersion));\n    if (res) {\n      return JSON.parse(res);\n    }\n  } catch (ign) { }\n\n  return false;\n}","export default {\n\n};","let env = {};\n\nif (typeof (_ENV_) === 'undefined') {\n  env = require('../env/.env-dev');\n} else {\n  env = _ENV_; // eslint-disable-line no-undef\n}\n\nexport default env;","/**\n * Auto Updater\n *\n * Similar to https://electronjs.org/docs/api/auto-updater#events\n * See https://electronjs.org/docs/tutorial/updates for documentation\n */\nimport { app, autoUpdater, dialog } from 'electron';\nimport moment from 'moment';\nimport B from 'bluebird';\nimport { checkUpdate } from './update-checker';\nimport { getFeedUrl } from './config';\nimport _ from 'lodash';\nimport env from '../../env';\nimport i18n from '../../configs/i18next.config';\n\nconst isDev = process.env.NODE_ENV === 'development';\nconst runningLocally = isDev || process.env.RUNNING_LOCALLY;\n\nlet checkNewUpdates = _.noop;\n\nif (!runningLocally && !process.env.RUNNING_IN_SPECTRON) {\n\n  autoUpdater.setFeedURL(getFeedUrl(app.getVersion()));\n\n  /**\n   * Check for new updates\n   */\n  checkNewUpdates = async function (fromMenu) {\n    // autoupdate.checkForUpdates always downloads updates immediately\n    // This method (getUpdate) let's us take a peek to see if there is an update\n    // available before calling .checkForUpdates\n    if (process.env.RUNNING_IN_SPECTRON) {\n      return;\n    }\n    const update = await checkUpdate(app.getVersion());\n    if (update) {\n      let {name, notes, pub_date: pubDate} = update;\n      pubDate = moment(pubDate).format(i18n.t('datetimeFormat'));\n\n      let detail = i18n.t('updateDetails', {pubDate, notes: notes.replace('*', '\\n*')});\n      if (env.NO_AUTO_UPDATE) {\n        detail += `\\n\\nhttps://www.github.com/appium/appium-desktop/releases/latest`;\n      }\n\n\n      // Ask user if they wish to install now or later\n      if (!process.env.RUNNING_IN_SPECTRON) {\n        dialog.showMessageBox({\n          type: 'info',\n          buttons: env.NO_AUTO_UPDATE\n            ? [i18n.t('OK')]\n            : [i18n.t('Install Now'), i18n.t('Install Later')],\n          message: i18n.t('appiumIsAvailable', {name}),\n          detail,\n        }, (response) => {\n          if (response === 0) {\n            // If they say yes, get the updates now\n            if (!env.NO_AUTO_UPDATE) {\n              autoUpdater.checkForUpdates();\n            }\n          }\n        });\n      }\n    } else {\n      if (fromMenu) {\n        autoUpdater.emit('update-not-available');\n      } else {\n        // If no updates found check for updates every hour\n        await B.delay(60 * 60 * 1000);\n        checkNewUpdates();\n      }\n    }\n  };\n\n  // Inform user when the download is starting and that they'll be notified again when it is complete\n  autoUpdater.on('update-available', () => {\n    dialog.showMessageBox({\n      type: 'info',\n      buttons: [i18n.t('OK')],\n      message: i18n.t('Update Download Started'),\n      detail: i18n.t('updateIsBeingDownloaded'),\n    });\n  });\n\n  // Handle the unusual case where we checked the updates endpoint, found an update\n  // but then after calling 'checkForUpdates', nothing was there\n  autoUpdater.on('update-not-available', () => {\n    dialog.showMessageBox({\n      type: 'info',\n      buttons: [i18n.t('OK')],\n      message: i18n.t('No update available'),\n      detail: i18n.t('Appium Desktop is up-to-date'),\n    });\n  });\n\n  // When it's done, ask if user want to restart now or later\n  autoUpdater.on('update-downloaded', (event, releaseNotes, releaseName) => {\n    dialog.showMessageBox({\n      type: 'info',\n      buttons: [i18n.t('Restart Now'), i18n.t('Later')],\n      message: i18n.t('Update Downloaded'),\n      detail: i18n.t('updateIsDownloaded', {releaseName}),\n    }, (response) => {\n      // If they say yes, restart now\n      if (response === 0) {\n        autoUpdater.quitAndInstall();\n      }\n    });\n  });\n\n  // Handle error case\n  autoUpdater.on('error', (message) => {\n    dialog.showMessageBox({\n      type: 'error',\n      message: i18n.t('Could not download update'),\n      detail: i18n.t('updateDownloadFailed', {message}),\n    });\n  });\n\n}\n\nexport { checkNewUpdates };\n","import { BrowserWindow, Menu } from 'electron';\nimport settings from '../shared/settings';\nimport path from 'path';\nimport i18n from '../configs/i18next.config';\n\nconst isDev = process.env.NODE_ENV === 'development';\n\nexport function openBrowserWindow (route, opts) {\n  const defaultOpts = {\n    width: 1080,\n    minWidth: 1080,\n    height: 570,\n    minHeight: 570,\n    backgroundColor: '#f2f2f2',\n    frame: 'customButtonsOnHover',\n    webPreferences: {\n      devTools: true,\n      nodeIntegration: true\n    },\n  };\n\n  let win = new BrowserWindow({\n    ...defaultOpts,\n    ...opts,\n  });\n\n  let htmlPath = path.resolve(__dirname, 'index.html');\n\n  // on Windows we'll get backslashes, but we don't want these for a browser URL, so replace\n  htmlPath = htmlPath.replace('\\\\', '/');\n  htmlPath += `#/${route}`;\n  win.loadURL(`file://${htmlPath}`);\n  win.show();\n\n  // If it's dev, go ahead and open up the dev tools automatically\n  if (isDev) {\n    win.openDevTools();\n  }\n\n  // Make 'devTools' available on right click\n  win.webContents.on('context-menu', (e, props) => {\n    const {x, y} = props;\n\n    Menu.buildFromTemplate([{\n      label: i18n.t('Inspect element'),\n      click () {\n        win.inspectElement(x, y);\n      }\n    }]).popup(win);\n  });\n\n  return win;\n}\n\n\n// Sets the environment variables to a combination of process.env and whatever\n// the user saved\nexport async function setSavedEnv () {\n  const savedEnv = await settings.get('ENV');\n  process.env = {\n    ...process.env,\n    ...savedEnv || {},\n  };\n}","/* eslint-disable no-console */\n\nimport { ipcMain, app } from 'electron';\nimport { main as appiumServer } from 'appium';\nimport { getDefaultArgs } from 'appium/build/lib/parser';\nimport path from 'path';\nimport wd from 'wd';\nimport { fs, tempDir } from 'appium-support';\nimport _ from 'lodash';\nimport settings from '../shared/settings';\nimport {createSession, killSession, getSessionHandler} from './appium-method-handler';\nimport request from 'request-promise';\nimport { checkNewUpdates } from './auto-updater';\nimport { openBrowserWindow, setSavedEnv } from './helpers';\n\nconst LOG_SEND_INTERVAL_MS = 250;\n\nconst defaultEnvironmentVariables = _.clone(process.env);\n\nlet server = null;\nlet logWatcher = null;\nlet batchedLogs = [];\n\nlet logFile;\n\n// Delete saved server args, don't start until a server has been started\nsettings.deleteSync('SERVER_ARGS');\n\nasync function deleteLogfile () {\n  if (logFile) {\n    try {\n      await fs.rimraf(logFile);\n    } catch (ign) { }\n  }\n}\n\nfunction connectStartServer (win) {\n  ipcMain.on('start-server', async (event, args) => {\n    // log the server logs to a file\n    try {\n      const dir = await tempDir.openDir();\n      logFile = path.resolve(dir, 'appium-server-logs.txt');\n      win.webContents.send('path-to-logs', logFile);\n      win.on('close', deleteLogfile);\n    } catch (ign) { }\n\n    // clean up args object for appium log purposes (so it doesn't show in\n    // non-default args list\n    if (args.defaultCapabilities &&\n        Object.keys(args.defaultCapabilities).length === 0) {\n      delete args.defaultCapabilities;\n    }\n    args.logHandler = (level, msg) => {\n      batchedLogs.push({level, msg});\n    };\n    // make sure if the server barfs on startup, it throws an error rather\n    // than the typical behavior, which is process.exit o_O\n    args.throwInsteadOfExit = true;\n\n    // set up our log watcher\n    logWatcher = setInterval(async () => {\n      if (batchedLogs.length) {\n        try {\n          await fs.writeFile(\n            logFile,\n            batchedLogs.map((log) => `[${log.level}] ${log.msg}`).join('\\n'),\n            {flag: 'a'}\n          );\n          win.webContents.send('appium-log-line', batchedLogs);\n        } catch (ign) { }\n        batchedLogs.splice(0, batchedLogs.length);\n      }\n    }, LOG_SEND_INTERVAL_MS);\n\n    try {\n      // set up the appium server running in this thread\n      server = await appiumServer(args, true);\n      await settings.set('SERVER_ARGS', args);\n      win.webContents.send('appium-start-ok');\n    } catch (e) {\n      win.webContents.send('appium-start-error', e.message);\n      try {\n        await server.close();\n      } catch (ign) {}\n      clearInterval(logWatcher);\n    }\n  });\n}\n\nfunction connectStopServer (win) {\n  ipcMain.on('stop-server', async () => {\n    try {\n      await server.close();\n      win.webContents.send('appium-stop-ok');\n    } catch (e) {\n      win.webContents.send('appium-stop-error', e.message);\n    }\n\n    clearInterval(logWatcher);\n    await settings.delete('SERVER_ARGS');\n  });\n}\n\nfunction connectGetDefaultArgs () {\n\n  ipcMain.on('get-default-args', (evt) => {\n    evt.returnValue = getDefaultArgs();\n  });\n\n  ipcMain.on('get-args-metadata', (/*evt*/) => {\n    // If argv isn't defined, set it now. If argv[1] isn't defined, set it to empty string.\n    // If process.argv[1] is undefined, calling getParser() will break because argparse expects it to be a string\n    if (!process.argv) {\n      process.argv = [];\n    }\n\n    if (!process.argv[1]) {\n      process.argv[1] = '';\n    }\n    // Temporarily remove this feature until 'getParser' issue (https://github.com/appium/appium/issues/11320) has been fixed\n    /*const backupPathResolve = path.resolve;\n    path.resolve = () => \"node_modules/appium/package.json\";\n    let defArgs = Object.keys(getDefaultArgs());\n    evt.returnValue = getParser().rawArgs\n                        .filter((a) => defArgs.indexOf(a[1].dest) !== -1)\n                        .map((a) => a[1]);\n    path.resolve = backupPathResolve;*/\n  });\n}\n\n/**\n * Opens a new window for creating new sessions\n */\nfunction connectCreateNewSessionWindow (win) {\n  ipcMain.on('create-new-session-window', () => {\n    createNewSessionWindow(win);\n  });\n}\n\nfunction connectClearLogFile () {\n  ipcMain.on('appium-clear-logfile', async (event, {logfilePath}) => {\n    await fs.writeFile(logfilePath, '');\n  });\n}\n\nexport function createNewSessionWindow (win) {\n  let sessionWin = openBrowserWindow('session', {\n    title: 'Start Session',\n    titleBarStyle: 'hidden',\n  });\n\n  // When you close the session window, kill its associated Appium session (if there is one)\n  let sessionID = sessionWin.webContents.id;\n  sessionWin.on('closed', () => {\n    killSession(sessionID);\n    sessionWin = null;\n  });\n\n  // When the main window is closed, close the session window too\n  win.once('closed', () => {\n    sessionWin.close();\n  });\n}\n\nfunction connectCreateNewSession () {\n  ipcMain.on('appium-create-new-session', async (event, args) => {\n    const {desiredCapabilities, host, port, path, username, accessKey, https,\n           attachSessId, rejectUnauthorized, proxy} = args;\n\n    try {\n      // If there is an already active session, kill it. Limit one session per window.\n      const windowId = event.sender.id;\n      if (getSessionHandler(windowId)) {\n        killSession(windowId);\n      }\n\n      // Create the driver and cache it by the sender ID\n      let driver = wd.promiseChainRemote({\n        hostname: host,\n        port,\n        path,\n        username,\n        accessKey,\n        https,\n      });\n      driver.configureHttp({rejectUnauthorized, proxy});\n      const handler = createSession(driver, event.sender, windowId);\n\n\n      // If we're just attaching to an existing session, do that and\n      // short-circuit the rest of the logic\n      if (attachSessId) {\n        driver._isAttachedSession = true;\n        await driver.attach(attachSessId);\n        // get the session capabilities to prove things are working\n        await driver.sessionCapabilities();\n        event.sender.send('appium-new-session-ready');\n        return;\n      }\n\n      // If a newCommandTimeout wasn't provided, set it to 0 so that sessions don't close on users\n      if (!desiredCapabilities.newCommandTimeout) {\n        desiredCapabilities.newCommandTimeout = 0;\n      }\n\n      // If someone didn't specify connectHardwareKeyboard, set it to true by\n      // default\n      if (typeof desiredCapabilities.connectHardwareKeyboard === 'undefined') {\n        desiredCapabilities.connectHardwareKeyboard = true;\n      }\n\n      // Prevent wd from injecting default desired capabilities\n      if (typeof desiredCapabilities.wdNoDefaults === 'undefined' &&\n          typeof desiredCapabilities['wd-no-defaults'] === 'undefined') {\n        desiredCapabilities.wdNoDefaults = true;\n      }\n\n      // Try initializing it. If it fails, kill it and send error message to sender\n      let p = driver.init(desiredCapabilities);\n      event.sender.send('appium-new-session-successful');\n      await p;\n\n      if (host !== '127.0.0.1' && host !== 'localhost') {\n        handler.runKeepAliveLoop();\n      }\n\n\n      // we don't really support the web portion of apps for a number of\n      // reasons, so pre-emptively ensure we're in native mode before doing the\n      // rest of the inspector startup. Since some platforms might not implement\n      // contexts, ignore any failures here.\n      try {\n        await driver.context('NATIVE_APP');\n      } catch (ign) {}\n      event.sender.send('appium-new-session-ready');\n    } catch (e) {\n      // If the session failed, delete it from the cache\n      killSession(event.sender.id);\n      event.sender.send('appium-new-session-failed', e);\n    }\n  });\n}\n\nfunction connectRestartRecorder () {\n  ipcMain.on('appium-restart-recorder', (evt) => {\n    getSessionHandler(evt.sender.id).restart();\n  });\n}\n\nfunction connectKeepAlive () {\n  ipcMain.on('appium-keep-session-alive', (evt) => {\n    getSessionHandler(evt.sender.id).keepSessionAlive();\n  });\n}\n\n/**\n * When a Session Window makes method request, find it's corresponding driver, execute requested method\n * and send back the result\n */\nfunction connectClientMethodListener () {\n  ipcMain.on('appium-client-command-request', async (evt, data) => {\n    const {\n      uuid, // Transaction ID\n      methodName, // Optional. Name of method being provided\n      strategy, // Optional. Element locator strategy\n      selector, // Optional. Element fetch selector\n      fetchArray = false, // Optional. Are we fetching an array of elements or just one?\n      elementId, // Optional. Element being operated on\n      args = [], // Optional. Arguments passed to method\n      skipScreenshotAndSource = false, // Optional. Do we want the updated source and screenshot?\n      ignoreResult = false, // Optional. Do we want to send the result back to the renderer?\n    } = data;\n\n    let renderer = evt.sender;\n    let methodHandler = getSessionHandler(renderer.id);\n\n    try {\n      if (methodName === 'quit') {\n        killSession(renderer.id, true);\n        // when we've quit the session, there's no source/screenshot to send\n        // back\n        renderer.send('appium-client-command-response', {\n          source: null,\n          screenshot: null,\n          windowSize: null,\n          uuid,\n          result: null\n        });\n      } else {\n        let res = {};\n        if (methodName) {\n          if (elementId) {\n            console.log(`Handling client method request with method '${methodName}', args ${JSON.stringify(args)} and elementId ${elementId}`);\n            res = await methodHandler.executeElementCommand(elementId, methodName, args, skipScreenshotAndSource);\n          } else {\n            console.log(`Handling client method request with method '${methodName}' and args ${JSON.stringify(args)}`);\n            res = await methodHandler.executeMethod(methodName, args, skipScreenshotAndSource);\n          }\n        } else if (strategy && selector) {\n          if (fetchArray) {\n            console.log(`Fetching elements with selector '${selector}' and strategy ${strategy}`);\n            res = await methodHandler.fetchElements(strategy, selector, skipScreenshotAndSource);\n          } else {\n            console.log(`Fetching an element with selector '${selector}' and strategy ${strategy}`);\n            res = await methodHandler.fetchElement(strategy, selector);\n          }\n        }\n\n        renderer.send('appium-client-command-response', {\n          ...res,\n          methodName,\n          ignoreResult,\n          uuid,\n        });\n      }\n\n    } catch (e) {\n      // If the status is '6' that means the session has been terminated\n      if (e.status === 6) {\n        console.log('Session terminated: e.status === 6');\n        renderer.send('appium-session-done', e);\n      }\n      console.log('Caught an exception: ', e);\n      renderer.send('appium-client-command-response-error', {e: JSON.stringify(e), uuid});\n    }\n  });\n}\n\nconst getCurrentSessions = _.debounce(async (evt, data) => {\n  const {host, port, path: appiumPath = '/wd/hub', ssl} = data;\n  try {\n    const res = await request(`http${ssl ? 's' : ''}://${host}:${port}${appiumPath}/sessions`);\n    evt.sender.send('appium-client-get-sessions-response', {res});\n  } catch (e) {\n    evt.sender.send('appium-client-get-sessions-fail');\n  }\n}, 2000);\n\nfunction connectGetSessionsListener () {\n  ipcMain.on('appium-client-get-sessions', getCurrentSessions);\n}\n\nfunction connectMoveToApplicationsFolder () {\n  ipcMain.on('appium-move-to-applications-folder', (evt) => {\n    app.moveToApplicationsFolder();\n    evt.sender.send('appium-done-moving-to-applications-folder');\n  });\n}\n\nexport function createNewConfigWindow (win) {\n  openBrowserWindow('config', {\n    title: 'Config',\n    parent: win,\n    width: 1080 / 2,\n    height: 1080 / 4,\n  });\n}\n\nfunction connectOpenConfig (win) {\n  ipcMain.on('appium-open-config', () => {\n    createNewConfigWindow(win);\n  });\n}\n\nfunction connectGetEnv () {\n  ipcMain.on('appium-get-env', async (event) => {\n    event.sender.send('appium-env', {\n      defaultEnvironmentVariables,\n      savedEnvironmentVariables: await settings.get('ENV', {}),\n    });\n  });\n}\n\nfunction connectSaveEnv () {\n  ipcMain.on('appium-save-env', async (event, environmentVariables) => {\n    // Pluck unset values\n    const env = _.pickBy(environmentVariables, _.identity);\n\n    await settings.set('ENV', env);\n    await setSavedEnv();\n    event.sender.send('appium-save-env-done');\n  });\n}\n\nexport function connectServerErrorBackdoor () {\n  ipcMain.on('appium-force-nodejs-error', () => {\n    throw new Error('A NodeJS error was intentionally thrown');\n  });\n}\n\nexport function initializeIpc (win) {\n  // listen for 'start-server' from the renderer\n  connectStartServer(win);\n  // listen for 'stop-server' from the renderer\n  connectStopServer(win);\n  // listen for 'create-new-session-window' from the renderer\n  connectCreateNewSessionWindow(win);\n  connectGetDefaultArgs();\n  connectCreateNewSession(win);\n  connectClientMethodListener(win);\n  connectGetSessionsListener();\n  connectRestartRecorder();\n  connectMoveToApplicationsFolder();\n  connectKeepAlive();\n  connectClearLogFile();\n  connectOpenConfig(win);\n  connectGetEnv();\n  connectSaveEnv();\n\n  setTimeout(checkNewUpdates, 10000);\n}\n","import { app, shell, dialog, Menu } from 'electron';\nimport { createNewSessionWindow, createNewConfigWindow} from './appium';\nimport { checkNewUpdates } from './auto-updater';\nimport config from '../configs/app.config';\nimport i18n from '../configs/i18next.config';\n\nlet menuTemplates = {mac: {}, other: {}};\nlet mainWindow = null;\n\nfunction languageMenu () {\n  return config.languages.map((languageCode) => ({\n    label: i18n.t(languageCode),\n    type: 'radio',\n    checked: i18n.language === languageCode,\n    click: () => i18n.changeLanguage(languageCode)\n  }));\n}\n\nfunction macMenuAppium () {\n  return {\n    label: 'Appium',\n    submenu: [{\n      label: i18n.t('About Appium'),\n      selector: 'orderFrontStandardAboutPanel:'\n    }, {\n      label: i18n.t('Check for updates'),\n      click () {\n        checkNewUpdates(true);\n      }\n    }, {\n      type: 'separator'\n    }, {\n      label: i18n.t('New Session Window…'),\n      accelerator: 'Command+N',\n      click () {\n        createNewSessionWindow(mainWindow);\n      }\n    }, {\n      label: i18n.t('Configurations…'),\n      click () {\n        createNewConfigWindow(mainWindow);\n      }\n    }, {\n      type: 'separator'\n    }, {\n      label: i18n.t('Hide Appium'),\n      accelerator: 'Command+H',\n      selector: 'hide:'\n    }, {\n      label: i18n.t('Hide Others'),\n      accelerator: 'Command+Shift+H',\n      selector: 'hideOtherApplications:'\n    }, {\n      label: i18n.t('Show All'),\n      selector: 'unhideAllApplications:'\n    }, {\n      type: 'separator'\n    }, {\n      label: i18n.t('Quit'),\n      accelerator: 'Command+Q',\n      click () {\n        app.quit();\n      }\n    }]\n  };\n}\n\nfunction macMenuEdit () {\n  return {\n    label: i18n.t('Edit'),\n    submenu: [{\n      label: i18n.t('Undo'),\n      accelerator: 'Command+Z',\n      selector: 'undo:'\n    }, {\n      label: i18n.t('Redo'),\n      accelerator: 'Shift+Command+Z',\n      selector: 'redo:'\n    }, {\n      type: 'separator'\n    }, {\n      label: i18n.t('Cut'),\n      accelerator: 'Command+X',\n      selector: 'cut:'\n    }, {\n      label: i18n.t('Copy'),\n      accelerator: 'Command+C',\n      selector: 'copy:'\n    }, {\n      label: i18n.t('Paste'),\n      accelerator: 'Command+V',\n      selector: 'paste:'\n    }, {\n      label: i18n.t('Select All'),\n      accelerator: 'Command+A',\n      selector: 'selectAll:'\n    }]\n  };\n}\n\nfunction macMenuView () {\n  const submenu = (process.env.NODE_ENV === 'development') ? [{\n    label: i18n.t('Reload'),\n    accelerator: 'Command+R',\n    click () {\n      mainWindow.webContents.reload();\n    }\n  }, {\n    label: i18n.t('Toggle Developer Tools'),\n    accelerator: 'Alt+Command+I',\n    click () {\n      mainWindow.toggleDevTools();\n    }\n  }] : [];\n\n  submenu.push({\n    label: i18n.t('Toggle Full Screen'),\n    accelerator: 'Ctrl+Command+F',\n    click () {\n      mainWindow.setFullScreen(!mainWindow.isFullScreen());\n    }\n  });\n\n  submenu.push({\n    label: i18n.t('Languages'),\n    submenu: languageMenu(),\n  });\n\n  return {\n    label: i18n.t('View'),\n    submenu,\n  };\n}\n\nfunction macMenuWindow () {\n  return {\n    label: i18n.t('Window'),\n    submenu: [{\n      label: i18n.t('Minimize'),\n      accelerator: 'Command+M',\n      selector: 'performMiniaturize:'\n    }, {\n      label: i18n.t('Close'),\n      accelerator: 'Command+W',\n      selector: 'performClose:'\n    }, {\n      type: 'separator'\n    }, {\n      label: i18n.t('Bring All to Front'),\n      selector: 'arrangeInFront:'\n    }]\n  };\n}\n\nfunction macMenuHelp () {\n  return {\n    label: i18n.t('Help'),\n    submenu: [{\n      label: i18n.t('Learn More'),\n      click () {\n        shell.openExternal('http://appium.io');\n      }\n    }, {\n      label: i18n.t('Documentation'),\n      click () {\n        shell.openExternal('https://appium.io/documentation.html');\n      }\n    }, {\n      label: i18n.t('Search Issues'),\n      click () {\n        shell.openExternal('https://github.com/appium/appium-desktop/issues');\n      }\n    }, {\n      label: i18n.t('Add Or Improve Translations'),\n      click () {\n        shell.openExternal('https://crowdin.com/project/appium-desktop');\n      }\n    }]\n  };\n}\n\nmenuTemplates.mac = async () => [\n  macMenuAppium(),\n  macMenuEdit(),\n  await macMenuView(),\n  macMenuWindow(),\n  macMenuHelp(),\n];\n\nfunction otherMenuFile () {\n  let fileSubmenu = [{\n    label: i18n.t('&Open'),\n    accelerator: 'Ctrl+O'\n  }, {\n    label: i18n.t('&About Appium'),\n    click () {\n      dialog.showMessageBox({\n        title: i18n.t('Appium Desktop'),\n        message: i18n.t(`Version ${app.getVersion()}`),\n      });\n    }\n  }, {\n    type: 'separator'\n  }, {\n    label: i18n.t('&New Session Window...'),\n    accelerator: 'Ctrl+N',\n    click () {\n      createNewSessionWindow(mainWindow);\n    }\n  }, {\n    label: i18n.t('&Close'),\n    accelerator: 'Ctrl+W',\n    click () {\n      mainWindow.close();\n    }\n  }];\n\n  // If it's Windows, add a 'Check for Updates' menu option\n  if (process.platform === 'win32') {\n    fileSubmenu.splice(1, 0, {\n      label: i18n.t('&Check for updates'),\n      click () {\n        checkNewUpdates(true);\n      }\n    });\n  }\n\n  return {\n    label: i18n.t('&File'),\n    submenu: fileSubmenu,\n  };\n}\n\nfunction otherMenuView () {\n  const submenu = [];\n  submenu.push([{\n    label: i18n.t('Toggle &Full Screen'),\n    accelerator: 'F11',\n    click () {\n      mainWindow.setFullScreen(!mainWindow.isFullScreen());\n    }\n  }]);\n\n  submenu.push({\n    label: i18n.t('Languages'),\n    submenu: languageMenu(),\n  });\n\n  if (process.env.NODE_ENV === 'development') {\n    submenu.push({\n      label: i18n.t('&Reload'),\n      accelerator: 'Ctrl+R',\n      click () {\n        mainWindow.webContents.reload();\n      }\n    });\n    submenu.push({\n      label: i18n.t('Toggle &Developer Tools'),\n      accelerator: 'Alt+Ctrl+I',\n      click () {\n        mainWindow.toggleDevTools();\n      }\n    });\n  }\n\n  return {\n    label: i18n.t('&View'),\n    submenu,\n  };\n}\n\nfunction otherMenuHelp () {\n  return {\n    label: i18n.t('Help'),\n    submenu: [{\n      label: i18n.t('Learn More'),\n      click () {\n        shell.openExternal('http://appium.io');\n      }\n    }, {\n      label: i18n.t('Documentation'),\n      click () {\n        shell.openExternal('https://appium.io/documentation.html');\n      }\n    }, {\n      label: i18n.t('Search Issues'),\n      click () {\n        shell.openExternal('https://github.com/appium/appium-desktop/issues');\n      }\n    }]\n  };\n}\n\nmenuTemplates.other = async () => [\n  otherMenuFile(mainWindow),\n  await otherMenuView(mainWindow),\n  otherMenuHelp()\n];\n\nasync function rebuildMenus (mainWin = null) {\n  if (mainWin) {\n    mainWindow = mainWin;\n  }\n  if (!mainWindow) {\n    return;\n  }\n\n  if (config.platform === 'darwin') {\n    const template = await menuTemplates.mac(mainWindow);\n    const menu = Menu.buildFromTemplate(template);\n    Menu.setApplicationMenu(menu);\n  } else {\n    const template = await menuTemplates.other(mainWindow);\n    const menu = Menu.buildFromTemplate(template);\n    mainWindow.setMenu(menu);\n  }\n}\n\nexport default rebuildMenus;\n","import i18n from './configs/i18next.config';\nimport { app, BrowserWindow, Menu, webContents } from 'electron';\nimport { initializeIpc } from './main/appium';\nimport { setSavedEnv } from './main/helpers';\nimport rebuildMenus from './main/menus';\nimport shellEnv from 'shell-env';\nimport fixPath from 'fix-path';\nimport settings from './shared/settings';\n\nlet mainWindow = null;\nconst isDev = process.env.NODE_ENV === 'development';\n\nif (isDev) {\n  require('electron-debug')(); // eslint-disable-line global-require\n}\n\nif (!isDev) {\n  // if we're running from the app package, we won't have access to env vars\n  // normally loaded in a shell, so work around with the shell-env module\n  const decoratedEnv = shellEnv.sync();\n  process.env = {...process.env, ...decoratedEnv};\n\n  // and we need to do the same thing with PATH\n  fixPath();\n}\nsetSavedEnv();\n\napp.on('window-all-closed', () => {\n  app.quit();\n});\n\n\nconst installExtensions = async () => {\n  if (isDev) {\n    const installer = require('electron-devtools-installer'); // eslint-disable-line global-require\n    const extensions = [\n      'REACT_DEVELOPER_TOOLS',\n      'REDUX_DEVTOOLS'\n    ];\n    const forceDownload = !!process.env.UPGRADE_EXTENSIONS;\n    for (const name of extensions) {\n      try {\n        await installer.default(installer[name], forceDownload);\n      } catch (e) {} // eslint-disable-line\n    }\n  }\n};\n\napp.on('ready', async () => {\n  await installExtensions();\n\n  mainWindow = new BrowserWindow({\n    show: false,\n    width: isDev ? 1200 : 650,\n    height: 600,\n    minWidth: 650,\n    minHeight: 600,\n    webPreferences: {\n      nodeIntegration: true\n    }\n  });\n\n  mainWindow.loadURL(`file://${__dirname}/index.html`);\n\n  mainWindow.webContents.on('did-finish-load', () => {\n    mainWindow.show();\n    mainWindow.focus();\n  });\n\n  mainWindow.on('closed', () => {\n    mainWindow = null;\n  });\n\n  if (isDev) {\n    mainWindow.openDevTools();\n  }\n\n  mainWindow.webContents.on('context-menu', (e, props) => {\n    const {x, y} = props;\n\n    Menu.buildFromTemplate([{\n      label: i18n.t('Inspect element'),\n      click () {\n        mainWindow.inspectElement(x, y);\n      }\n    }]).popup(mainWindow);\n  });\n\n  i18n.on('languageChanged', async (languageCode) => {\n    rebuildMenus();\n    await settings.set('PREFERRED_LANGUAGE', languageCode);\n    webContents.getAllWebContents().forEach((wc) => {\n      wc.send('appium-language-changed', {\n        language: languageCode,\n      });\n    });\n  });\n\n  rebuildMenus(mainWindow);\n\n  initializeIpc(mainWindow);\n});\n"]}