"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

var _validate = _interopRequireDefault(require("validate.js"));

var _appiumBaseDriver = require("appium-base-driver");

var _utils = require("../utils");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

function assertRequiredOptions(options, requiredOptionNames) {
  if (!_lodash.default.isArray(requiredOptionNames)) {
    requiredOptionNames = [requiredOptionNames];
  }

  const presentOptionNames = _lodash.default.keys(options);

  const missingOptionNames = _lodash.default.difference(requiredOptionNames, presentOptionNames);

  if (_lodash.default.isEmpty(missingOptionNames)) {
    return options;
  }

  throw new Error(`The following options are required: ${JSON.stringify(missingOptionNames)}. ` + `You have only provided: ${JSON.stringify(presentOptionNames)}`);
}

commands.mobilePerformEditorAction = async function mobilePerformEditorAction(opts = {}) {
  const {
    action
  } = assertRequiredOptions(opts, ['action']);
  return await this.espresso.jwproxy.command('/appium/device/perform_editor_action', 'POST', {
    action
  });
};

commands.mobileSwipe = async function mobileSwipe(opts = {}) {
  const {
    direction,
    element,
    swiper,
    startCoordinates,
    endCoordinates,
    precisionDescriber
  } = assertRequiredOptions(opts, ['element']);
  return await this.espresso.jwproxy.command(`/appium/execute_mobile/${_appiumSupport.util.unwrapElement(element)}/swipe`, 'POST', {
    direction,
    element,
    swiper,
    startCoordinates,
    endCoordinates,
    precisionDescriber
  });
};

commands.mobileGetDeviceInfo = async function mobileGetDeviceInfo() {
  return await this.espresso.jwproxy.command('/appium/device/info', 'GET');
};

commands.mobileIsToastVisible = async function mobileIsToastVisible(opts = {}) {
  const {
    text,
    isRegexp
  } = opts;

  if (!_appiumSupport.util.hasValue(text)) {
    _logger.default.errorAndThrow(`'text' argument is mandatory`);
  }

  return await this.espresso.jwproxy.command('/appium/execute_mobile/is_toast_displayed', 'POST', {
    text,
    isRegexp
  });
};

commands.mobileOpenDrawer = async function mobileOpenDrawer(opts = {}) {
  const {
    element,
    gravity
  } = assertRequiredOptions(opts, ['element']);
  return await this.espresso.jwproxy.command(`/appium/execute_mobile/${_appiumSupport.util.unwrapElement(element)}/open_drawer`, 'POST', {
    gravity
  });
};

commands.mobileCloseDrawer = async function mobileCloseDrawer(opts = {}) {
  const {
    element,
    gravity
  } = assertRequiredOptions(opts, ['element']);
  return await this.espresso.jwproxy.command(`/appium/execute_mobile/${_appiumSupport.util.unwrapElement(element)}/close_drawer`, 'POST', {
    gravity
  });
};

commands.mobileSetDate = async function mobileSetDate(opts = {}) {
  const {
    element,
    year,
    monthOfYear,
    dayOfMonth
  } = assertRequiredOptions(opts, ['element', 'year', 'monthOfYear', 'dayOfMonth']);
  return await this.espresso.jwproxy.command(`/appium/execute_mobile/${_appiumSupport.util.unwrapElement(element)}/set_date`, 'POST', {
    year,
    monthOfYear,
    dayOfMonth
  });
};

commands.mobileSetTime = async function mobileSetTime(opts = {}) {
  const {
    element,
    hours,
    minutes
  } = assertRequiredOptions(opts, ['element', 'hours', 'minutes']);
  return await this.espresso.jwproxy.command(`/appium/execute_mobile/${_appiumSupport.util.unwrapElement(element)}/set_time`, 'POST', {
    hours,
    minutes
  });
};

commands.mobileNavigateTo = async function mobileNavigateTo(opts = {}) {
  let {
    element,
    menuItemId
  } = assertRequiredOptions(opts, ['menuItemId', 'element']);
  let menuItemIdAsNumber = parseInt(menuItemId, 10);

  if (_lodash.default.isNaN(menuItemIdAsNumber) || menuItemIdAsNumber < 0) {
    _logger.default.errorAndThrow(`'menuItemId' must be a non-negative number. Found ${menuItemId}`);

    menuItemId = menuItemIdAsNumber;
  }

  return await this.espresso.jwproxy.command(`/appium/execute_mobile/${_appiumSupport.util.unwrapElement(element)}/navigate_to`, 'POST', {
    menuItemId
  });
};

commands.mobileWebAtoms = async function mobileWebAtoms(opts = {}) {
  opts = assertRequiredOptions(opts, ['methodChain']);
  return await this.espresso.jwproxy.command(`/appium/execute_mobile/web_atoms`, 'POST', opts);
};

commands.mobileScrollToPage = async function mobileScrollToPage(opts = {}) {
  const scrollToTypes = ['first', 'last', 'left', 'right'];
  const res = (0, _validate.default)(opts, {
    element: {
      presence: true
    },
    scrollTo: {
      inclusion: {
        within: scrollToTypes,
        message: `"scrollTo" must be one of "${scrollToTypes.join(', ')}" found '%{value}'`
      }
    },
    scrollToPage: {
      numericality: {
        onlyInteger: true,
        greaterThanOrEqualTo: 0,
        message: `"scrollToPage" must be a non-negative integer. Found '%{value}'`
      }
    }
  });

  if (_appiumSupport.util.hasValue(res)) {
    _logger.default.errorAndThrow(`Invalid scrollTo parameters: ${JSON.stringify(res)}`);
  }

  const {
    element,
    scrollTo,
    scrollToPage,
    smoothScroll
  } = opts;

  if (_appiumSupport.util.hasValue(scrollTo) && _appiumSupport.util.hasValue(scrollToPage)) {
    _logger.default.warn(`'scrollTo' and 'scrollToPage' where both provided. Defaulting to 'scrollTo'`);
  }

  return await this.espresso.jwproxy.command(`/appium/execute_mobile/${_appiumSupport.util.unwrapElement(element)}/scroll_to_page`, 'POST', {
    scrollTo,
    scrollToPage,
    smoothScroll
  });
};

commands.mobileBackdoor = async function mobileBackdoor(opts = {}) {
  assertRequiredOptions(opts, ['target', 'methods']);
  const {
    target,
    methods
  } = opts;

  if (target === 'element') {
    assertRequiredOptions(opts, ['elementId']);
  }

  const {
    elementId
  } = opts;
  return await this.espresso.jwproxy.command(`/appium/execute_mobile/backdoor`, 'POST', {
    target,
    methods,
    elementId
  });
};

commands.mobileUiautomator = async function mobileUiautomator(opts = {}) {
  const {
    strategy,
    locator,
    action,
    index
  } = assertRequiredOptions(opts, ['strategy', 'locator', 'action']);
  return await this.espresso.jwproxy.command(`/appium/execute_mobile/uiautomator`, 'POST', {
    strategy,
    locator,
    index,
    action
  });
};

commands.mobileFlashElement = async function mobileFlashElement(opts = {}) {
  const {
    element
  } = assertRequiredOptions(opts, ['element']);
  const {
    durationMillis,
    repeatCount
  } = opts;
  return await this.espresso.jwproxy.command(`/appium/execute_mobile/${_appiumSupport.util.unwrapElement(element)}/flash`, 'POST', {
    durationMillis,
    repeatCount
  });
};

commands.mobileClickAction = async function mobileClickAction(opts = {}) {
  const {
    element,
    tapper,
    coordinatesProvider,
    precisionDescriber,
    inputDevice,
    buttonState
  } = assertRequiredOptions(opts, ['element']);
  return await this.espresso.jwproxy.command(`/appium/execute_mobile/${_appiumSupport.util.unwrapElement(element)}/click_action`, 'POST', {
    tapper,
    coordinatesProvider,
    precisionDescriber,
    inputDevice,
    buttonState
  });
};

commands.updateSettings = async function updateSettings(settings) {
  throw new _appiumBaseDriver.errors.NotYetImplementedError();
};

commands.getSettings = async function getSettings() {
  throw new _appiumBaseDriver.errors.NotYetImplementedError();
};

helpers.suspendChromedriverProxy = function suspendChromedriverProxy() {
  this.chromedriver = null;
  this.proxyReqRes = this.espresso.proxyReqRes.bind(this.espresso);
  this.jwpProxyActive = true;
};

commands.startActivity = async function startActivity(appPackage, appActivity, appWaitPackage, appWaitActivity) {
  appPackage = appPackage || this.caps.appPackage;
  appWaitPackage = appWaitPackage || appPackage;
  appActivity = (0, _utils.qualifyActivityName)(appActivity, appPackage);
  appWaitActivity = (0, _utils.qualifyActivityName)(appWaitActivity || appActivity, appWaitPackage);

  _logger.default.debug(`Starting activity '${appActivity}' for package '${appPackage}'`);

  await this.espresso.jwproxy.command(`/appium/device/start_activity`, 'POST', {
    appPackage,
    appActivity
  });
  await this.adb.waitForActivity(appWaitPackage, appWaitActivity);
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
