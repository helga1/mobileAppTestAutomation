"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.IOSLog = void 0;

require("source-map-support/register");

var _appiumIosDriver = require("appium-ios-driver");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../logger"));

var _teen_process = require("teen_process");

class IOSLog extends _appiumIosDriver.IOSLog {
  async startCaptureSimulator() {
    if (_lodash.default.isUndefined(this.sim.udid)) {
      throw new Error(`Log capture requires a sim udid`);
    }

    if (!(await this.sim.isRunning())) {
      throw new Error(`iOS Simulator with udid ${this.sim.udid} is not running`);
    }

    const tool = 'xcrun';
    const args = ['simctl', 'spawn', this.sim.udid, 'log', 'stream', '--style', 'compact'];

    _logger.default.debug(`Starting log capture for iOS Simulator with udid '${this.sim.udid}', ` + `using '${tool} ${args.join(' ')}'`);

    try {
      await (0, _teen_process.exec)('pkill', ['-xf', [tool, ...args].join(' ')]);
    } catch (ign) {}

    try {
      this.proc = new _teen_process.SubProcess(tool, args);
      await this.finishStartingLogCapture();
    } catch (e) {
      throw new Error(`Simulator log capture failed. Original error: ${e.message}`);
    }
  }

  get isCapturing() {
    return !!(this.proc && this.proc.isRunning);
  }

}

exports.IOSLog = IOSLog;
var _default = IOSLog;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9kZXZpY2UtbG9nL2lvcy1sb2cuanMiXSwibmFtZXMiOlsiSU9TTG9nIiwiSU9TRHJpdmVySU9TTG9nIiwic3RhcnRDYXB0dXJlU2ltdWxhdG9yIiwiXyIsImlzVW5kZWZpbmVkIiwic2ltIiwidWRpZCIsIkVycm9yIiwiaXNSdW5uaW5nIiwidG9vbCIsImFyZ3MiLCJsb2ciLCJkZWJ1ZyIsImpvaW4iLCJpZ24iLCJwcm9jIiwiU3ViUHJvY2VzcyIsImZpbmlzaFN0YXJ0aW5nTG9nQ2FwdHVyZSIsImUiLCJtZXNzYWdlIiwiaXNDYXB0dXJpbmciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsTUFBTUEsTUFBTixTQUFxQkMsdUJBQXJCLENBQXFDO0FBQ25DLFFBQU1DLHFCQUFOLEdBQStCO0FBQzdCLFFBQUlDLGdCQUFFQyxXQUFGLENBQWMsS0FBS0MsR0FBTCxDQUFTQyxJQUF2QixDQUFKLEVBQWtDO0FBQ2hDLFlBQU0sSUFBSUMsS0FBSixDQUFXLGlDQUFYLENBQU47QUFDRDs7QUFFRCxRQUFJLEVBQUMsTUFBTSxLQUFLRixHQUFMLENBQVNHLFNBQVQsRUFBUCxDQUFKLEVBQWlDO0FBQy9CLFlBQU0sSUFBSUQsS0FBSixDQUFXLDJCQUEwQixLQUFLRixHQUFMLENBQVNDLElBQUssaUJBQW5ELENBQU47QUFDRDs7QUFDRCxVQUFNRyxJQUFJLEdBQUcsT0FBYjtBQUNBLFVBQU1DLElBQUksR0FBRyxDQUFDLFFBQUQsRUFBVyxPQUFYLEVBQW9CLEtBQUtMLEdBQUwsQ0FBU0MsSUFBN0IsRUFBbUMsS0FBbkMsRUFBMEMsUUFBMUMsRUFBb0QsU0FBcEQsRUFBK0QsU0FBL0QsQ0FBYjs7QUFDQUssb0JBQUlDLEtBQUosQ0FBVyxxREFBb0QsS0FBS1AsR0FBTCxDQUFTQyxJQUFLLEtBQW5FLEdBQ0MsVUFBU0csSUFBSyxJQUFHQyxJQUFJLENBQUNHLElBQUwsQ0FBVSxHQUFWLENBQWUsR0FEM0M7O0FBRUEsUUFBSTtBQUVGLFlBQU0sd0JBQUssT0FBTCxFQUFjLENBQUMsS0FBRCxFQUFRLENBQUNKLElBQUQsRUFBTyxHQUFHQyxJQUFWLEVBQWdCRyxJQUFoQixDQUFxQixHQUFyQixDQUFSLENBQWQsQ0FBTjtBQUNELEtBSEQsQ0FHRSxPQUFPQyxHQUFQLEVBQVksQ0FBRTs7QUFDaEIsUUFBSTtBQUNGLFdBQUtDLElBQUwsR0FBWSxJQUFJQyx3QkFBSixDQUFlUCxJQUFmLEVBQXFCQyxJQUFyQixDQUFaO0FBQ0EsWUFBTSxLQUFLTyx3QkFBTCxFQUFOO0FBQ0QsS0FIRCxDQUdFLE9BQU9DLENBQVAsRUFBVTtBQUNWLFlBQU0sSUFBSVgsS0FBSixDQUFXLGlEQUFnRFcsQ0FBQyxDQUFDQyxPQUFRLEVBQXJFLENBQU47QUFDRDtBQUNGOztBQUVELE1BQUlDLFdBQUosR0FBbUI7QUFDakIsV0FBTyxDQUFDLEVBQUUsS0FBS0wsSUFBTCxJQUFhLEtBQUtBLElBQUwsQ0FBVVAsU0FBekIsQ0FBUjtBQUNEOztBQTNCa0M7OztlQStCdEJSLE0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJT1NMb2cgYXMgSU9TRHJpdmVySU9TTG9nIH0gZnJvbSAnYXBwaXVtLWlvcy1kcml2ZXInO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCB7IFN1YlByb2Nlc3MsIGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuXG5cbmNsYXNzIElPU0xvZyBleHRlbmRzIElPU0RyaXZlcklPU0xvZyB7XG4gIGFzeW5jIHN0YXJ0Q2FwdHVyZVNpbXVsYXRvciAoKSB7XG4gICAgaWYgKF8uaXNVbmRlZmluZWQodGhpcy5zaW0udWRpZCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTG9nIGNhcHR1cmUgcmVxdWlyZXMgYSBzaW0gdWRpZGApO1xuICAgIH1cblxuICAgIGlmICghYXdhaXQgdGhpcy5zaW0uaXNSdW5uaW5nKCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgaU9TIFNpbXVsYXRvciB3aXRoIHVkaWQgJHt0aGlzLnNpbS51ZGlkfSBpcyBub3QgcnVubmluZ2ApO1xuICAgIH1cbiAgICBjb25zdCB0b29sID0gJ3hjcnVuJztcbiAgICBjb25zdCBhcmdzID0gWydzaW1jdGwnLCAnc3Bhd24nLCB0aGlzLnNpbS51ZGlkLCAnbG9nJywgJ3N0cmVhbScsICctLXN0eWxlJywgJ2NvbXBhY3QnXTtcbiAgICBsb2cuZGVidWcoYFN0YXJ0aW5nIGxvZyBjYXB0dXJlIGZvciBpT1MgU2ltdWxhdG9yIHdpdGggdWRpZCAnJHt0aGlzLnNpbS51ZGlkfScsIGAgK1xuICAgICAgICAgICAgICBgdXNpbmcgJyR7dG9vbH0gJHthcmdzLmpvaW4oJyAnKX0nYCk7XG4gICAgdHJ5IHtcbiAgICAgIC8vIGNsZWFudXAgZXhpc3RpbmcgbGlzdGVuZXJzIGlmIHRoZSBwcmV2aW91cyBzZXNzaW9uIGhhcyBub3QgYmVlbiB0ZXJtaW5hdGVkIHByb3Blcmx5XG4gICAgICBhd2FpdCBleGVjKCdwa2lsbCcsIFsnLXhmJywgW3Rvb2wsIC4uLmFyZ3NdLmpvaW4oJyAnKV0pO1xuICAgIH0gY2F0Y2ggKGlnbikge31cbiAgICB0cnkge1xuICAgICAgdGhpcy5wcm9jID0gbmV3IFN1YlByb2Nlc3ModG9vbCwgYXJncyk7XG4gICAgICBhd2FpdCB0aGlzLmZpbmlzaFN0YXJ0aW5nTG9nQ2FwdHVyZSgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgU2ltdWxhdG9yIGxvZyBjYXB0dXJlIGZhaWxlZC4gT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApO1xuICAgIH1cbiAgfVxuXG4gIGdldCBpc0NhcHR1cmluZyAoKSB7XG4gICAgcmV0dXJuICEhKHRoaXMucHJvYyAmJiB0aGlzLnByb2MuaXNSdW5uaW5nKTtcbiAgfVxufVxuXG5leHBvcnQgeyBJT1NMb2cgfTtcbmV4cG9ydCBkZWZhdWx0IElPU0xvZztcbiJdLCJmaWxlIjoibGliL2RldmljZS1sb2cvaW9zLWxvZy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
