"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.detectUdid = detectUdid;
exports.getAndCheckXcodeVersion = getAndCheckXcodeVersion;
exports.getAndCheckIosSdkVersion = getAndCheckIosSdkVersion;
exports.checkAppPresent = checkAppPresent;
exports.getDriverInfo = getDriverInfo;
exports.clearSystemFiles = clearSystemFiles;
exports.translateDeviceName = translateDeviceName;
exports.normalizeCommandTimeouts = normalizeCommandTimeouts;
exports.resetXCTestProcesses = resetXCTestProcesses;
exports.getPIDsUsingPattern = getPIDsUsingPattern;
exports.markSystemFilesForCleanup = markSystemFilesForCleanup;
exports.printUser = printUser;
exports.printLibimobiledeviceInfo = printLibimobiledeviceInfo;
exports.getPIDsListeningOnPort = getPIDsListeningOnPort;
exports.encodeBase64OrUpload = encodeBase64OrUpload;
exports.removeAllSessionWebSocketHandlers = removeAllSessionWebSocketHandlers;
exports.verifyApplicationPlatform = verifyApplicationPlatform;
exports.isTvOS = isTvOS;
exports.isLocalHost = isLocalHost;
exports.normalizePlatformVersion = normalizePlatformVersion;
exports.DEFAULT_TIMEOUT_KEY = void 0;

require("source-map-support/register");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _appiumIosDriver = require("appium-ios-driver");

var _teen_process = require("teen_process");

var _appiumXcode = _interopRequireDefault(require("appium-xcode"));

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _fs2 = _interopRequireDefault(require("fs"));

var _url = _interopRequireDefault(require("url"));

var _v = _interopRequireDefault(require("v8"));

var _desiredCaps = require("./desired-caps");

var _semver = _interopRequireDefault(require("semver"));

const DEFAULT_TIMEOUT_KEY = 'default';
exports.DEFAULT_TIMEOUT_KEY = DEFAULT_TIMEOUT_KEY;

async function detectUdid() {
  _logger.default.debug('Auto-detecting real device udid...');

  let cmd,
      args = [];

  try {
    cmd = await _appiumSupport.fs.which('idevice_id');
    args.push('-l');

    _logger.default.debug('Using idevice_id');
  } catch (err) {
    _logger.default.debug('Using udidetect');

    cmd = require.resolve('udidetect');
  }

  let udid;

  try {
    let {
      stdout
    } = await (0, _teen_process.exec)(cmd, args, {
      timeout: 3000
    });

    let udids = _lodash.default.uniq(_lodash.default.filter(stdout.split('\n'), Boolean));

    udid = _lodash.default.last(udids);

    if (udids.length > 1) {
      _logger.default.warn(`Multiple devices found: ${udids.join(', ')}`);

      _logger.default.warn(`Choosing '${udid}'. If this is wrong, manually set with 'udid' desired capability`);
    }
  } catch (err) {
    _logger.default.errorAndThrow(`Error detecting udid: ${err.message}`);
  }

  if (!udid || udid.length <= 2) {
    throw new Error('Could not detect udid.');
  }

  _logger.default.debug(`Detected real device udid: '${udid}'`);

  return udid;
}

async function getAndCheckXcodeVersion() {
  let version;

  try {
    version = await _appiumXcode.default.getVersion(true);
  } catch (err) {
    _logger.default.debug(err);

    _logger.default.errorAndThrow(`Could not determine Xcode version: ${err.message}`);
  }

  if (version.versionFloat < 7.3) {
    _logger.default.errorAndThrow(`Xcode version '${version.versionString}'. Support for ` + `Xcode ${version.versionString} is not supported. ` + `Please upgrade to version 7.3 or higher`);
  }

  return version;
}

async function getAndCheckIosSdkVersion() {
  try {
    return await _appiumXcode.default.getMaxIOSSDK();
  } catch (err) {
    _logger.default.errorAndThrow(`Could not determine iOS SDK version: ${err.message}`);
  }
}

function translateDeviceName(platformVersion, devName = '') {
  let deviceName = devName;

  switch (devName.toLowerCase().trim()) {
    case 'iphone simulator':
      deviceName = 'iPhone 6';
      break;

    case 'ipad simulator':
      deviceName = platformVersion && _appiumSupport.util.compareVersions(platformVersion, '<', '10.3') ? 'iPad Retina' : 'iPad Air';
      break;
  }

  if (deviceName !== devName) {
    _logger.default.debug(`Changing deviceName from '${devName}' to '${deviceName}'`);
  }

  return deviceName;
}

const derivedDataCleanupMarkers = new Map();

async function markSystemFilesForCleanup(wda) {
  if (!wda || !(await wda.retrieveDerivedDataPath())) {
    _logger.default.warn('No WebDriverAgent derived data available, so unable to mark system files for cleanup');

    return;
  }

  const logsRoot = _path.default.resolve((await wda.retrieveDerivedDataPath()), 'Logs');

  let markersCount = 0;

  if (derivedDataCleanupMarkers.has(logsRoot)) {
    markersCount = derivedDataCleanupMarkers.get(logsRoot);
  }

  derivedDataCleanupMarkers.set(logsRoot, ++markersCount);
}

async function clearSystemFiles(wda) {
  if (!wda || !(await wda.retrieveDerivedDataPath())) {
    _logger.default.warn('No WebDriverAgent derived data available, so unable to clear system files');

    return;
  }

  const logsRoot = _path.default.resolve((await wda.retrieveDerivedDataPath()), 'Logs');

  if (derivedDataCleanupMarkers.has(logsRoot)) {
    let markersCount = derivedDataCleanupMarkers.get(logsRoot);
    derivedDataCleanupMarkers.set(logsRoot, --markersCount);

    if (markersCount > 0) {
      _logger.default.info(`Not cleaning '${logsRoot}' folder, because the other session does not expect it to be cleaned`);

      return;
    }
  }

  derivedDataCleanupMarkers.set(logsRoot, 0);
  const cleanupCmd = `find -E /private/var/folders ` + `-regex '.*/Session-WebDriverAgentRunner.*\\.log$|.*/StandardOutputAndStandardError\\.txt$' ` + `-type f -exec sh -c 'echo "" > "{}"' \\;`;
  const cleanupTask = new _teen_process.SubProcess('bash', ['-c', cleanupCmd], {
    detached: true,
    stdio: ['ignore', 'pipe', 'pipe']
  });
  await cleanupTask.start(0, true);

  _logger.default.debug(`Started background XCTest logs cleanup: ${cleanupCmd}`);

  if (await _appiumSupport.fs.exists(logsRoot)) {
    _logger.default.info(`Cleaning test logs in '${logsRoot}' folder`);

    await _appiumIosDriver.utils.clearLogs([logsRoot]);
    return;
  }

  _logger.default.info(`There is no ${logsRoot} folder, so not cleaning files`);
}

async function checkAppPresent(app) {
  _logger.default.debug(`Checking whether app '${app}' is actually present on file system`);

  if (!(await _appiumSupport.fs.exists(app))) {
    _logger.default.errorAndThrow(`Could not find app at '${app}'`);
  }

  _logger.default.debug('App is present');
}

async function getDriverInfo() {
  const stat = await _appiumSupport.fs.stat(_path.default.resolve(__dirname, '..'));
  const built = stat.mtime.getTime();

  const pkg = require(__filename.includes('build/lib/utils') ? '../../package.json' : '../package.json');

  const version = pkg.version;
  return {
    built,
    version
  };
}

function normalizeCommandTimeouts(value) {
  if (typeof value !== 'string') {
    return value;
  }

  let result = {};

  if (!isNaN(value)) {
    result[DEFAULT_TIMEOUT_KEY] = _lodash.default.toInteger(value);
    return result;
  }

  try {
    result = JSON.parse(value);

    if (!_lodash.default.isPlainObject(result)) {
      throw new Error();
    }
  } catch (err) {
    _logger.default.errorAndThrow(`"commandTimeouts" capability should be a valid JSON object. "${value}" was given instead`);
  }

  for (let [cmd, timeout] of _lodash.default.toPairs(result)) {
    if (!_lodash.default.isInteger(timeout) || timeout <= 0) {
      _logger.default.errorAndThrow(`The timeout for "${cmd}" should be a valid natural number of milliseconds. "${timeout}" was given instead`);
    }
  }

  return result;
}

async function getPIDsUsingPattern(pattern, opts = {}) {
  const {
    multi = false,
    ignoreCase = true
  } = opts;
  const args = [`-${ignoreCase ? 'i' : ''}f${multi ? '' : 'n'}`, pattern];

  try {
    const {
      stdout
    } = await (0, _teen_process.exec)('pgrep', args);

    if (multi) {
      const result = stdout.split('\n').filter(x => parseInt(x, 10)).map(x => `${parseInt(x, 10)}`);
      return _lodash.default.isEmpty(result) ? null : result;
    }

    const pid = parseInt(stdout, 10);
    return isNaN(pid) ? null : `${pid}`;
  } catch (err) {
    _logger.default.debug(`'pgrep ${args.join(' ')}' didn't detect any matching processes. Return code: ${err.code}`);

    return null;
  }
}

async function killAppUsingPattern(pgrepPattern) {
  for (const signal of [2, 15, 9]) {
    if (!(await getPIDsUsingPattern(pgrepPattern))) {
      return;
    }

    const args = [`-${signal}`, '-if', pgrepPattern];

    try {
      await (0, _teen_process.exec)('pkill', args);
    } catch (err) {
      _logger.default.debug(`pkill ${args.join(' ')} -> ${err.message}`);
    }

    await _bluebird.default.delay(100);
  }
}

async function resetXCTestProcesses(udid, isSimulator, opts = {}) {
  const processPatterns = [`xcodebuild.*${udid}`];

  if (opts.wdaLocalPort) {
    processPatterns.push(`iproxy ${opts.wdaLocalPort}`);
  } else if (!isSimulator) {
    processPatterns.push(`iproxy.*${udid}`);
  }

  if (isSimulator) {
    processPatterns.push(`${udid}.*XCTRunner`);
  }

  _logger.default.debug(`Killing running processes '${processPatterns.join(', ')}' for the device ${udid}...`);

  for (const pgrepPattern of processPatterns) {
    await killAppUsingPattern(pgrepPattern);
  }
}

async function printUser() {
  try {
    let {
      stdout
    } = await (0, _teen_process.exec)('whoami');

    _logger.default.debug(`Current user: '${stdout.trim()}'`);
  } catch (err) {
    _logger.default.debug(`Unable to get username running server: ${err.message}`);
  }
}

async function printLibimobiledeviceInfo() {
  try {
    let {
      stdout
    } = await (0, _teen_process.exec)('brew', ['info', 'libimobiledevice']);
    let match = /libimobiledevice:(.+)/.exec(stdout);

    if (match && match[1]) {
      _logger.default.debug(`Current version of libimobiledevice: ${match[1].trim()}`);
    }
  } catch (err) {
    _logger.default.debug(`Unable to get version of libimobiledevice: ${err.message}`);
  }
}

async function getPIDsListeningOnPort(port, filteringFunc = null) {
  const result = [];

  try {
    const {
      stdout
    } = await (0, _teen_process.exec)('lsof', ['-ti', `tcp:${port}`]);
    result.push(...stdout.trim().split(/\n+/));
  } catch (e) {
    return result;
  }

  if (!_lodash.default.isFunction(filteringFunc)) {
    return result;
  }

  return await _bluebird.default.filter(result, async x => {
    const {
      stdout
    } = await (0, _teen_process.exec)('ps', ['-p', x, '-o', 'command']);
    return await filteringFunc(stdout);
  });
}

async function encodeBase64OrUpload(localFile, remotePath = null, uploadOptions = {}) {
  if (!(await _appiumSupport.fs.exists(localFile))) {
    _logger.default.errorAndThrow(`The file at '${localFile}' does not exist or is not accessible`);
  }

  const {
    size
  } = await _appiumSupport.fs.stat(localFile);

  _logger.default.debug(`The size of the file is ${_appiumSupport.util.toReadableSizeString(size)}`);

  if (_lodash.default.isEmpty(remotePath)) {
    const maxMemoryLimit = _v.default.getHeapStatistics().total_available_size / 2;

    if (size >= maxMemoryLimit) {
      _logger.default.info(`The file might be too large to fit into the process memory ` + `(${_appiumSupport.util.toReadableSizeString(size)} >= ${_appiumSupport.util.toReadableSizeString(maxMemoryLimit)}). ` + `Provide a link to a remote writable location for video upload ` + `(http(s) and ftp protocols are supported) if you experience Out Of Memory errors`);
    }

    const content = await _appiumSupport.fs.readFile(localFile);
    return content.toString('base64');
  }

  const remoteUrl = _url.default.parse(remotePath);

  let options = {};
  const {
    user,
    pass,
    method
  } = uploadOptions;

  if (remoteUrl.protocol.startsWith('http')) {
    options = {
      url: remoteUrl.href,
      method: method || 'PUT',
      multipart: [{
        body: _fs2.default.createReadStream(localFile)
      }]
    };

    if (user && pass) {
      options.auth = {
        user,
        pass
      };
    }
  } else if (remoteUrl.protocol === 'ftp:') {
    options = {
      host: remoteUrl.hostname,
      port: remoteUrl.port || 21
    };

    if (user && pass) {
      options.user = user;
      options.pass = pass;
    }
  }

  await _appiumSupport.net.uploadFile(localFile, remotePath, options);
  return '';
}

async function removeAllSessionWebSocketHandlers(server, sessionId) {
  if (!server || !_lodash.default.isFunction(server.getWebSocketHandlers)) {
    return;
  }

  const activeHandlers = await server.getWebSocketHandlers(sessionId);

  for (const pathname of _lodash.default.keys(activeHandlers)) {
    await server.removeWebSocketHandler(pathname);
  }
}

async function verifyApplicationPlatform(app, isSimulator, isTvOS) {
  _logger.default.debug('Verifying application platform');

  const infoPlist = _path.default.resolve(app, 'Info.plist');

  if (!(await _appiumSupport.fs.exists(infoPlist))) {
    _logger.default.debug(`'${infoPlist}' does not exist`);

    return null;
  }

  const {
    CFBundleSupportedPlatforms
  } = await _appiumSupport.plist.parsePlistFile(infoPlist);

  _logger.default.debug(`CFBundleSupportedPlatforms: ${JSON.stringify(CFBundleSupportedPlatforms)}`);

  if (!_lodash.default.isArray(CFBundleSupportedPlatforms)) {
    _logger.default.debug(`CFBundleSupportedPlatforms key does not exist in '${infoPlist}'`);

    return null;
  }

  const expectedPlatform = isSimulator ? isTvOS ? 'AppleTVSimulator' : 'iPhoneSimulator' : isTvOS ? 'AppleTVOS' : 'iPhoneOS';
  const isAppSupported = CFBundleSupportedPlatforms.includes(expectedPlatform);

  if (isAppSupported) {
    return true;
  }

  throw new Error(`${isSimulator ? 'Simulator' : 'Real device'} architecture is unsupported by the '${app}' application. ` + `Make sure the correct deployment target has been selected for its compilation in Xcode.`);
}

function isTvOS(platformName) {
  return _lodash.default.toLower(platformName) === _lodash.default.toLower(_desiredCaps.PLATFORM_NAME_TVOS);
}

function isLocalHost(urlString) {
  try {
    const {
      hostname
    } = _url.default.parse(urlString);

    return ['localhost', '127.0.0.1', '::1', '::ffff:127.0.0.1'].includes(hostname);
  } catch (ign) {
    _logger.default.warn(`'${urlString}' cannot be parsed as a valid URL`);
  }

  return false;
}

function normalizePlatformVersion(originalVersion) {
  const normalizedVersion = _appiumSupport.util.coerceVersion(originalVersion, false);

  if (!normalizedVersion) {
    throw new Error(`The platform version '${originalVersion}' should be a valid version number`);
  }

  const {
    major,
    minor
  } = new _semver.default.SemVer(normalizedVersion);
  return `${major}.${minor}`;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
